const http = require('http');
const fs = require('fs');
const path = require('path');

const PORT = 3000;

// –ò–º–∏—Ç–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–æ–≤ (–±–µ–∑ OpenAI API)
const mockAIResponses = {
  story: "–ñ–∏–ª-–±—ã–ª –º–∞–ª–µ–Ω—å–∫–∏–π {name}, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏–ª –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –û–¥–Ω–∞–∂–¥—ã {name} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –ª–µ—Å...",
  advice: "–í –≤–æ–∑—Ä–∞—Å—Ç–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–æ—â—Ä—è—Ç—å –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å."
};

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let users = {};
let stories = {};

const server = http.createServer((req, res) => {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  const url = req.url;
  const method = req.method;

  console.log(`${method} ${url}`);

  if (url === '/' && method === 'GET') {
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
      <h1>Master Parenthood Test Server üåü</h1>
      <p>–°–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
      <h2>API Endpoints:</h2>
      <ul>
        <li><strong>POST /api/auth/register</strong> - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
        <li><strong>POST /api/auth/login</strong> - –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
        <li><strong>POST /api/stories/generate</strong> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏</li>
        <li><strong>GET /api/stories</strong> - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–∞–∑–∫–∏</li>
        <li><strong>POST /api/ai/advice</strong> - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç AI</li>
        <li><strong>GET /api/health</strong> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞</li>
      </ul>
    `);
  }

  else if (url === '/api/health' && method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'ok',
      timestamp: new Date().toISOString(),
      message: 'Master Parenthood Test Server —Ä–∞–±–æ—Ç–∞–µ—Ç!'
    }));
  }

  else if (url === '/api/auth/register' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { email, password, name } = JSON.parse(body);

        if (users[email]) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }));
          return;
        }

        users[email] = { email, name, password, id: Date.now() };

        res.writeHead(201, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          user: { email, name, id: users[email].id }
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/auth/login' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { email, password } = JSON.parse(body);

        if (!users[email] || users[email].password !== password) {
          res.writeHead(401, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }));
          return;
        }

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          user: { email, name: users[email].name, id: users[email].id }
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/stories/generate' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { childName, theme, userId } = JSON.parse(body);

        let story = mockAIResponses.story.replace(/{name}/g, childName || '–º–∞–ª—ã—à');

        if (theme) {
          story += ` –¢–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏: ${theme}. `;
        }

        story += "–ò –æ–Ω–∏ –∂–∏–ª–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ! ‚ú®";

        const storyId = Date.now();
        stories[storyId] = {
          id: storyId,
          childName,
          theme,
          story,
          userId,
          createdAt: new Date().toISOString()
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          story: stories[storyId]
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/stories' && method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      success: true,
      stories: Object.values(stories)
    }));
  }

  else if (url === '/api/ai/advice' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { childAge, question } = JSON.parse(body);

        let advice = mockAIResponses.advice;

        if (childAge) {
          advice = `–î–ª—è —Ä–µ–±–µ–Ω–∫–∞ ${childAge} –ª–µ—Ç: ` + advice;
        }

        if (question) {
          advice += ` –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: "${question}" - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.`;
        }

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          advice: advice
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  // üöÄ NEW 2025 AI ENDPOINTS

  else if (url === '/api/ai/behavior-analysis' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { childName, ageInMonths, behaviors } = JSON.parse(body);

        const analysis = {
          analysis: `${childName} shows typical behavioral patterns for ${ageInMonths} months old. Recent behaviors indicate healthy emotional and social development.`,
          triggers: ['–ü–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏–µ', '–ì–æ–ª–æ–¥', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–Ω–∏–º–∞–Ω–∏—è'],
          strategies: [
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º –¥–Ω—è',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ',
            '–û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞'
          ],
          alerts: [],
          positivePatterns: ['–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞', '–•–æ—Ä–æ—à–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å']
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: true, analysis }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/ai/predict-development' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { childName, ageInMonths, currentMilestones } = JSON.parse(body);

        const predictions = {
          nextMilestones: [
            '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π',
            '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞',
            '–†–∞–∑–≤–∏—Ç–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
          ],
          timeframe: '–°–ª–µ–¥—É—é—â–∏–µ 2-3 –º–µ—Å—è—Ü–∞',
          recommendations: [
            '–ß–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
            '–ü–æ–æ—â—Ä—è–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'
          ],
          watchFor: [
            '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–ø–ø–µ—Ç–∏—Ç–µ',
            '–ù–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞',
            '–†–µ–≥—Ä–µ—Å—Å –≤ –Ω–∞–≤—ã–∫–∞—Ö'
          ],
          strengths: [
            '–û—Ç–ª–∏—á–Ω–∞—è —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
            '–•–æ—Ä–æ—à–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
            '–ê–∫—Ç–∏–≤–Ω–æ–µ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ'
          ]
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: true, predictions }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/ai/personalized-activities' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { childName, ageInMonths, interests, skills } = JSON.parse(body);

        const activities = {
          activities: [
            {
              name: '–°–µ–Ω—Å–æ—Ä–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞ —Å –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
              description: `–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—Ä–æ–±–∫—É —Å –ª–∏—Å—Ç—å—è–º–∏, —à–∏—à–∫–∞–º–∏ –∏ –∫–∞–º–µ—à–∫–∞–º–∏ –¥–ª—è ${childName}. –≠—Ç–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.`,
              materials: ['–ö–æ—Ä–æ–±–∫–∞', '–õ–∏—Å—Ç—å—è', '–®–∏—à–∫–∏', '–ì–ª–∞–¥–∫–∏–µ –∫–∞–º–µ—à–∫–∏'],
              duration: '15-20 –º–∏–Ω—É—Ç',
              skills: ['–°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', '–ú–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–Ω–∏–º–∞–Ω–∏—è']
            },
            {
              name: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
              description: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Å—Ç—Ä—é–ª–∏, –ª–æ–∂–∫–∏ –∏ –±—É—Ç—ã–ª–æ—á–∫–∏ —Å –∫—Ä—É–ø–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è ${childName}.`,
              materials: ['–ö–∞—Å—Ç—Ä—é–ª–∏', '–õ–æ–∂–∫–∏', '–ë—É—Ç—ã–ª–æ—á–∫–∏ —Å –∫—Ä—É–ø–æ–π', '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –º–∏—Å–∫–∏'],
              duration: '10-15 –º–∏–Ω—É—Ç',
              skills: ['–°–ª—É—Ö–æ–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ', '–†–∏—Ç–º', '–ö—Ä—É–ø–Ω–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞']
            },
            {
              name: '–ò–≥—Ä–∞ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ü–≤–µ—Ç–∞–º',
              description: `–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ ${childName} —Ä–∞—Å—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º.`,
              materials: ['–¶–≤–µ—Ç–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏', '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã', '–¶–≤–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞'],
              duration: '10-12 –º–∏–Ω—É—Ç',
              skills: ['–¶–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ', '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']
            }
          ]
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: true, activities }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/ai/mood-analysis' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { childName, moodEntries, behaviorNotes } = JSON.parse(body);

        const moodAnalysis = {
          moodPattern: '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑—Ä–∞—Å—Ç—É',
          emotionalDevelopment: '–ó–¥–æ—Ä–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å —Ö–æ—Ä–æ—à–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∫ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—é',
          concerns: [],
          strategies: [
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —ç–º–æ—Ü–∏–∏ —Ä–µ–±–µ–Ω–∫–∞ —Å–ª–æ–≤–∞–º–∏',
            '–û–±—É—á–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è–º —ç–º–æ—Ü–∏–π',
            '–ß–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –æ —á—É–≤—Å—Ç–≤–∞—Ö'
          ],
          positives: [
            '–û—Ç–∫—Ä—ã—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π',
            '–ü–æ–∏—Å–∫ —É—Ç–µ—à–µ–Ω–∏—è —É –≤–∑—Ä–æ—Å–ª—ã—Ö',
            '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏–∏'
          ]
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: true, moodAnalysis }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/ai/chat' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { message, childContext } = JSON.parse(body);

        const responses = [
          `–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –ø–æ –ø–æ–≤–æ–¥—É "${message}". –ö–∞–∂–¥—ã–π —Ä–µ–±–µ–Ω–æ–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ, –∏ —ç—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.`,
          `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ "${message}" - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏—Ö.`,
          `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å –æ "${message}". –í —ç—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –≤–∞–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é —Å—Ä–µ–¥—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.`,
          `–ö–∞—Å–∞—Ç–µ–ª—å–Ω–æ "${message}" - –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ - –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞.`
        ];

        const randomResponse = responses[Math.floor(Math.random() * responses.length)];

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          response: randomResponse
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/smart-notifications/optimal-time' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { notificationType, userId } = JSON.parse(body);

        const optimalTimes = {
          feeding_reminder: { optimalHour: 8, confidence: 0.8 },
          sleep_time: { optimalHour: 20, confidence: 0.9 },
          development_tip: { optimalHour: 14, confidence: 0.7 },
          milestone_reminder: { optimalHour: 10, confidence: 0.6 }
        };

        const result = optimalTimes[notificationType] || { optimalHour: 12, confidence: 0.5 };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          ...result,
          reasoning: `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è ${notificationType} - ${result.optimalHour}:00`,
          alternativeTimes: [result.optimalHour - 2, result.optimalHour + 2]
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  // üåç GLOBAL COMMUNITY & TRANSLATION ENDPOINTS

  else if (url === '/api/translation/translate' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { message, targetLanguage, sourceLanguage } = JSON.parse(body);

        // Mock translation responses
        const translations = {
          'Hello': {
            'es': 'Hola',
            'fr': 'Bonjour',
            'de': 'Hallo',
            'ru': '–ü—Ä–∏–≤–µ—Ç',
            'zh': '‰Ω†Â•Ω',
            'ja': '„Åì„Çì„Å´„Å°„ÅØ'
          },
          'How are you?': {
            'es': '¬øC√≥mo est√°s?',
            'fr': 'Comment allez-vous?',
            'de': 'Wie geht es dir?',
            'ru': '–ö–∞–∫ –¥–µ–ª–∞?',
            'zh': '‰Ω†Â•ΩÂêóÔºü',
            'ja': 'ÂÖÉÊ∞ó„Åß„Åô„ÅãÔºü'
          },
          'Thank you': {
            'es': 'Gracias',
            'fr': 'Merci',
            'de': 'Danke',
            'ru': '–°–ø–∞—Å–∏–±–æ',
            'zh': 'Ë∞¢Ë∞¢',
            'ja': '„ÅÇ„Çä„Åå„Å®„ÅÜ'
          }
        };

        let translatedText = message;
        let detectedLanguage = sourceLanguage || 'en';

        // Simple translation logic
        for (const [phrase, translations_map] of Object.entries(translations)) {
          if (message.toLowerCase().includes(phrase.toLowerCase())) {
            translatedText = translations_map[targetLanguage] || message;
            break;
          }
        }

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          originalText: message,
          translatedText: translatedText,
          sourceLanguage: detectedLanguage,
          targetLanguage: targetLanguage,
          confidence: 0.9,
          cached: false
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/community/weekly-topic' && method === 'GET') {
    const weekNumber = Math.floor((Date.now() / (1000 * 60 * 60 * 24 * 7))) % 52 + 1;

    const topics = [
      {
        id: `topic_${weekNumber}`,
        week: weekNumber,
        title: '–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∫–æ–ª—ã–±–µ–ª—å–Ω—ã–µ –º–∏—Ä–∞',
        description: '–î–µ–ª–∏–º—Å—è –∫–æ–ª—ã–±–µ–ª—å–Ω—ã–º–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä! –ö–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É —É–∫–ª–∞–¥—ã–≤–∞—é—Ç –¥–µ—Ç–µ–π —Å–ø–∞—Ç—å?',
        questions: [
          '–ö–∞–∫–∏–µ –∫–æ–ª—ã–±–µ–ª—å–Ω—ã–µ –ø–µ–ª–∏ –≤–∞–º –≤–∞—à–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏?',
          '–ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ —Ä–∏—Ç—É–∞–ª—ã –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –≤ –≤–∞—à–µ–π –∫—É–ª—å—Ç—É—Ä–µ?',
          '–ö–∞–∫ –≤—ã –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏?'
        ],
        activities: [
          '–ó–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–æ–µ—Ç–µ –∫–æ–ª—ã–±–µ–ª—å–Ω—É—é',
          '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–º—ã—Å–ª–æ–º –ª—é–±–∏–º–æ–π –∫–æ–ª—ã–±–µ–ª—å–Ω–æ–π',
          '–í—ã—É—á–∏—Ç–µ –∫–æ–ª—ã–±–µ–ª—å–Ω—É—é –∏–∑ –¥—Ä—É–≥–æ–π –∫—É–ª—å—Ç—É—Ä—ã'
        ],
        culturalNote: '–ú—É–∑—ã–∫–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –±–∞—Ä—å–µ—Ä—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π.',
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        language: 'ru',
        isActive: true
      }
    ];

    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      success: true,
      topic: topics[0]
    }));
  }

  else if (url === '/api/community/posts' && method === 'GET') {
    const mockPosts = [
      {
        id: 'post_1',
        userId: 'user_1',
        userName: 'Anna from Russia',
        content: '–ú–æ—è –¥–æ—á–∫–∞ –ª—é–±–∏—Ç –∫–æ–ª—ã–±–µ–ª—å–Ω—É—é "–°–ø–∏, –º–æ—è —Ä–∞–¥–æ—Å—Ç—å, —É—Å–Ω–∏". –ê –∫–∞–∫–∏–µ –ø–µ—Å–Ω–∏ –ø–æ–µ—Ç–µ –≤—ã —Å–≤–æ–∏–º –º–∞–ª—ã—à–∞–º?',
        originalLanguage: 'ru',
        topicId: 'topic_1',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        likes: 5,
        replies: 3,
        isTranslated: false,
        timeAgo: '2h ago'
      },
      {
        id: 'post_2',
        userId: 'user_2',
        userName: 'Maria from Spain',
        content: 'En Espa√±a cantamos "Du√©rmete ni√±o" a nuestros beb√©s. ¬°Es muy relajante!',
        originalLanguage: 'es',
        topicId: 'topic_1',
        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
        likes: 8,
        replies: 2,
        isTranslated: true,
        translatedText: '–í –ò—Å–ø–∞–Ω–∏–∏ –º—ã –ø–æ–µ–º "Du√©rmete ni√±o" –Ω–∞—à–∏–º –¥–µ—Ç—è–º. –≠—Ç–æ –æ—á–µ–Ω—å —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç!',
        timeAgo: '4h ago'
      },
      {
        id: 'post_3',
        userId: 'user_3',
        userName: 'John from USA',
        content: 'We love singing "Twinkle, Twinkle, Little Star" at bedtime. It\'s a classic!',
        originalLanguage: 'en',
        topicId: 'topic_1',
        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        likes: 12,
        replies: 7,
        isTranslated: true,
        translatedText: '–ú—ã –ª—é–±–∏–º –ø–µ—Ç—å "Twinkle, Twinkle, Little Star" –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. –≠—Ç–æ –∫–ª–∞—Å—Å–∏–∫–∞!',
        timeAgo: '6h ago'
      }
    ];

    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      success: true,
      posts: mockPosts
    }));
  }

  else if (url === '/api/community/create-post' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { userId, userName, content, userLanguage, topicId } = JSON.parse(body);

        const newPost = {
          id: `post_${Date.now()}`,
          userId,
          userName,
          content,
          originalLanguage: userLanguage,
          topicId,
          timestamp: new Date().toISOString(),
          likes: 0,
          replies: 0,
          isTranslated: false,
          timeAgo: 'just now'
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          post: newPost,
          message: 'Post created successfully'
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else if (url === '/api/community/stats' && method === 'GET') {
    const stats = {
      totalPosts: 156,
      totalUsers: 42,
      languageDistribution: {
        'ru': 45,
        'en': 38,
        'es': 28,
        'fr': 22,
        'de': 15,
        'zh': 8
      },
      topContributors: {
        'Anna from Russia': 12,
        'Maria from Spain': 10,
        'John from USA': 9,
        'Sophie from France': 8,
        'Hans from Germany': 6
      },
      averagePostsPerWeek: 2.3,
      mostActiveHours: {
        9: 15,
        14: 22,
        20: 18,
        21: 25
      }
    };

    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      success: true,
      stats: stats
    }));
  }

  else if (url === '/api/translation/detect-language' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const { text } = JSON.parse(body);

        // Simple language detection
        let detectedLanguage = 'en';

        if (/[–∞-—è—ë]/i.test(text)) detectedLanguage = 'ru';
        else if (/[√±√°√©√≠√≥√∫]/i.test(text)) detectedLanguage = 'es';
        else if (/[√†√¢√§√©√®√™√´√Æ√Ø√¥√∂√π√ª√º√ø√ß]/i.test(text)) detectedLanguage = 'fr';
        else if (/[√§√∂√º√ü]/i.test(text)) detectedLanguage = 'de';
        else if (/[‰∏≠Êñá]/.test(text)) detectedLanguage = 'zh';
        else if (/[„Å≤„Çâ„Åå„Å™„Ç´„Çø„Ç´„Éä]/.test(text)) detectedLanguage = 'ja';

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          detectedLanguage: detectedLanguage,
          confidence: 0.85
        }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
      }
    });
  }

  else {
    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' }));
  }
});

server.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Master Parenthood Test Server –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:${PORT}`);
  console.log(`üåê –°–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å: http://[IP-—Ç–µ–ª–µ—Ñ–æ–Ω–∞]:${PORT}`);
  console.log(`üìã API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}`);
  console.log(`‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!`);
});