// lib/services/firebase_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:google_sign_in/google_sign_in.dart';

import 'dart:io';

class FirebaseService {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseStorage _storage = FirebaseStorage.instance;
  static final GoogleSignIn _googleSignIn = GoogleSignIn();

  // ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

  static User? get currentUser => _auth.currentUser;
  static String? get currentUserId => _auth.currentUser?.uid;
  static bool get isAuthenticated => _auth.currentUser != null;

  // Stream —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static Stream<User?> get authStateChanges => _auth.authStateChanges();

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  static Future<User?> registerWithEmail({
    required String email,
    required String password,
    required String parentName,
  }) async {
    return signUpWithEmail(
      email: email,
      password: password,
      displayName: parentName,
    );
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email
  static Future<User?> signUpWithEmail({
    required String email,
    required String password,
    required String displayName,
  }) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (credential.user != null) {
        await credential.user!.updateDisplayName(displayName);
        await _createUserProfile(credential.user!);
      }

      return credential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthException(e);
    }
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email
  static Future<User?> signInWithEmail({
    required String email,
    required String password,
  }) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (credential.user != null) {
        await _updateLastLogin(credential.user!.uid);
      }

      return credential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthException(e);
    }
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  static Future<User?> signInWithGoogle() async {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;

      // –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      // –í—Ö–æ–¥–∏–º –≤ Firebase
      final UserCredential userCredential = await _auth.signInWithCredential(credential);

      if (userCredential.user != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        final doc = await _firestore.collection('users').doc(userCredential.user!.uid).get();

        if (!doc.exists) {
          await _createUserProfile(userCredential.user!);
        } else {
          await _updateLastLogin(userCredential.user!.uid);
        }
      }

      return userCredential.user;
    } catch (e) {
      if (kDebugMode) {
        print('Error signing in with Google: $e');
      }
      throw Exception('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google');
    }
  }



  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  static Future<void> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
    } on FirebaseAuthException catch (e) {
      throw _handleAuthException(e);
    }
  }

  // –í—ã—Ö–æ–¥
  static Future<void> signOut() async {
    await _googleSignIn.signOut();

    await _auth.signOut();
  }

  // ===== –ü–†–û–§–ò–õ–ò =====

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> _createUserProfile(User user) async {
    final profile = {
      'uid': user.uid,
      'email': user.email,
      'displayName': user.displayName ?? '–†–æ–¥–∏—Ç–µ–ª—å',
      'photoURL': user.photoURL,
      'level': 1,
      'xp': 0,
      'subscription': 'free',
      'createdAt': FieldValue.serverTimestamp(),
      'lastLogin': FieldValue.serverTimestamp(),
      'provider': user.providerData.isNotEmpty ? user.providerData.first.providerId : 'email',
    };

    await _firestore.collection('users').doc(user.uid).set(profile);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
  static Future<void> _updateLastLogin(String uid) async {
    await _firestore.collection('users').doc(uid).update({
      'lastLogin': FieldValue.serverTimestamp(),
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<UserProfile?> getUserProfile() async {
    if (!isAuthenticated) return null;

    final doc = await _firestore.collection('users').doc(currentUserId!).get();
    if (doc.exists) {
      return UserProfile.fromFirestore(doc);
    }
    return null;
  }

  // Stream –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Stream<UserProfile?> getUserProfileStream() {
    if (!isAuthenticated) return Stream.value(null);

    return _firestore
        .collection('users')
        .doc(currentUserId!)
        .snapshots()
        .map((doc) => doc.exists ? UserProfile.fromFirestore(doc) : null);
  }

  // ===== –î–ï–¢–ò =====

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
  static Future<String> addChild({
    required String name,
    required DateTime birthDate,
    required String gender,
    required double height,
    required double weight,
    String petName = '–ï–¥–∏–Ω–æ—Ä–æ–≥',
    String petType = 'ü¶Ñ',
  }) async {
    if (!isAuthenticated) throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    final childRef = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .add({
      'name': name,
      'birthDate': Timestamp.fromDate(birthDate),
      'gender': gender,
      'height': height,
      'weight': weight,
      'petName': petName,
      'petType': petType,
      'petStats': {
        'happiness': 50,
        'energy': 50,
        'knowledge': 50,
      },
      'milestones': {},
      'vocabularySize': 0,
      'createdAt': FieldValue.serverTimestamp(),
      'updatedAt': FieldValue.serverTimestamp(),
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    await setActiveChild(childRef.id);

    return childRef.id;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Future<void> updateChild({
    required String childId,
    required Map<String, dynamic> data,
  }) async {
    if (!isAuthenticated) return;

    data['updatedAt'] = FieldValue.serverTimestamp();

    await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .doc(childId)
        .update(data);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
  static Future<void> setActiveChild(String childId) async {
    if (!isAuthenticated) return;

    await _firestore.collection('users').doc(currentUserId!).update({
      'activeChildId': childId,
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
  static Future<ChildProfile?> getActiveChild() async {
    if (!isAuthenticated) return null;

    final userDoc = await _firestore.collection('users').doc(currentUserId!).get();
    final activeChildId = userDoc.data()?['activeChildId'];

    if (activeChildId != null) {
      return getChild(activeChildId);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ
    final children = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .limit(1)
        .get();

    if (children.docs.isNotEmpty) {
      final firstChild = ChildProfile.fromFirestore(
        children.docs.first.data(),
        children.docs.first.id,
      );
      await setActiveChild(firstChild.id);
      return firstChild;
    }

    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ ID
  static Future<ChildProfile?> getChild(String childId) async {
    if (!isAuthenticated) return null;

    final doc = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .doc(childId)
        .get();

    if (doc.exists) {
      return ChildProfile.fromFirestore(doc.data()!, doc.id);
    }
    return null;
  }

  // Stream –≤—Å–µ—Ö –¥–µ—Ç–µ–π
  static Stream<List<ChildProfile>> getChildrenStream() {
    if (!isAuthenticated) return Stream.value([]);

    return _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .orderBy('createdAt', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => ChildProfile.fromFirestore(doc.data(), doc.id))
        .toList());
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ä–µ–±–µ–Ω–∫–∞
  static Future<String?> uploadChildPhoto({
    required File file,
    required String childId,
  }) async {
    if (!isAuthenticated) return null;

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      if (!await file.exists()) {
        throw Exception('File does not exist');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      final fileSizeInBytes = await file.length();
      final fileSizeInMB = fileSizeInBytes / (1024 * 1024);
      
      if (fileSizeInMB > 5) {
        throw Exception('File size exceeds 5MB limit');
      }

      final ref = _storage
          .ref()
          .child('users')
          .child(currentUserId!)
          .child('children')
          .child(childId)
          .child('photo_${DateTime.now().millisecondsSinceEpoch}.jpg');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      final metadata = SettableMetadata(
        contentType: 'image/jpeg',
        customMetadata: {
          'uploadedBy': currentUserId!,
          'childId': childId,
        },
      );

      await ref.putFile(file, metadata);
      final url = await ref.getDownloadURL();

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞
      await _firestore
          .collection('users')
          .doc(currentUserId!)
          .collection('children')
          .doc(childId)
          .update({
            'photoURL': url,
            'photoUpdatedAt': FieldValue.serverTimestamp(),
          });

      return url;
    } catch (e) {
      if (kDebugMode) {
        print('Error uploading photo: $e');
      }
      rethrow;
    }
  }

  // ===== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ò XP =====

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ XP
  static Future<void> addXP(int amount) async {
    if (!isAuthenticated) return;

    final userRef = _firestore.collection('users').doc(currentUserId!);

    await _firestore.runTransaction((transaction) async {
      final userDoc = await transaction.get(userRef);
      if (!userDoc.exists) return;

      final currentXP = userDoc.data()?['xp'] ?? 0;
      final currentLevel = userDoc.data()?['level'] ?? 1;

      final newXP = currentXP + amount;
      final newLevel = (newXP ~/ 1000) + 1;

      transaction.update(userRef, {
        'xp': newXP,
        'level': newLevel,
      });
    });
  }

  // Stream –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static Stream<List<Achievement>> getAchievementsStream() {
    if (!isAuthenticated) return Stream.value([]);

    return _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('achievements')
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => Achievement.fromFirestore(doc.data(), doc.id))
        .toList());
  }

  // ===== –°–ö–ê–ó–ö–ò =====

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–∞–∑–∫–∏
  static Future<String> saveStory({
    required String childId,
    required String story,
    required String theme,
    String? imageUrl,
  }) async {
    if (!isAuthenticated) throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    final storyRef = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .add({
      'childId': childId,
      'story': story,
      'theme': theme,
      'imageUrl': imageUrl,
      'createdAt': FieldValue.serverTimestamp(),
      'isFavorite': false,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏
    await addXP(50);

    return storyRef.id;
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–∑–∫–∏
  static Future<void> toggleStoryFavorite(String storyId) async {
    if (!isAuthenticated) return;

    final storyRef = _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .doc(storyId);

    final storyDoc = await storyRef.get();
    if (storyDoc.exists) {
      final currentFavorite = storyDoc.data()?['isFavorite'] ?? false;
      await storyRef.update({'isFavorite': !currentFavorite});
    }
  }

  // Stream –∏—Å—Ç–æ—Ä–∏–π
  static Stream<List<StoryData>> getStoriesStream(String childId) {
    if (!isAuthenticated) return Stream.value([]);

    return _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .where('childId', isEqualTo: childId)
        .orderBy('createdAt', descending: true)
        .limit(50)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => StoryData.fromFirestore(doc))
        .toList());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫
  static Stream<List<StoryData>> getFavoriteStoriesStream() {
    if (!isAuthenticated) return Stream.value([]);

    return _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .where('isFavorite', isEqualTo: true)
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => StoryData.fromFirestore(doc))
        .toList());
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static String _handleAuthException(FirebaseAuthException e) {
    switch (e.code) {
      case 'weak-password':
        return '–°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å';
      case 'email-already-in-use':
        return 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
      case 'invalid-email':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
      case 'user-not-found':
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      case 'wrong-password':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
      case 'user-disabled':
        return '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      case 'too-many-requests':
        return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      default:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message}';
    }
  }
}

// ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile {
  final String uid;
  final String email;
  final String displayName;
  final String? photoURL;
  final int level;
  final int xp;
  final String subscription;
  final DateTime createdAt;
  final DateTime lastLogin;
  final String provider;
  final String? activeChildId;

  UserProfile({
    required this.uid,
    required this.email,
    required this.displayName,
    this.photoURL,
    required this.level,
    required this.xp,
    required this.subscription,
    required this.createdAt,
    required this.lastLogin,
    required this.provider,
    this.activeChildId,
  });

  factory UserProfile.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return UserProfile(
      uid: doc.id,
      email: data['email'] ?? '',
      displayName: data['displayName'] ?? '–†–æ–¥–∏—Ç–µ–ª—å',
      photoURL: data['photoURL'],
      level: data['level'] ?? 1,
      xp: data['xp'] ?? 0,
      subscription: data['subscription'] ?? 'free',
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      lastLogin: (data['lastLogin'] as Timestamp?)?.toDate() ?? DateTime.now(),
      provider: data['provider'] ?? 'email',
      activeChildId: data['activeChildId'],
    );
  }

  int get xpForNextLevel => level * 1000;
  int get xpProgress => xp % 1000;
  double get levelProgress => xpProgress / 1000;
}

// –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞
class ChildProfile {
  final String id;
  final String name;
  final DateTime birthDate;
  final String gender;
  final double height;
  final double weight;
  final String? photoURL;
  final String petName;
  final String petType;
  final Map<String, int> petStats;
  final Map<String, dynamic> milestones;
  final int vocabularySize;
  final DateTime createdAt;
  final DateTime updatedAt;

  ChildProfile({
    required this.id,
    required this.name,
    required this.birthDate,
    required this.gender,
    required this.height,
    required this.weight,
    this.photoURL,
    required this.petName,
    required this.petType,
    required this.petStats,
    required this.milestones,
    required this.vocabularySize,
    required this.createdAt,
    required this.updatedAt,
  });

  factory ChildProfile.fromFirestore(Map<String, dynamic> data, String id) {
    return ChildProfile(
      id: id,
      name: data['name'] ?? '',
      birthDate: (data['birthDate'] as Timestamp).toDate(),
      gender: data['gender'] ?? 'male',
      height: (data['height'] ?? 0).toDouble(),
      weight: (data['weight'] ?? 0).toDouble(),
      photoURL: data['photoURL'],
      petName: data['petName'] ?? '–ï–¥–∏–Ω–æ—Ä–æ–≥',
      petType: data['petType'] ?? 'ü¶Ñ',
      petStats: Map<String, int>.from(data['petStats'] ?? {
        'happiness': 50,
        'energy': 50,
        'knowledge': 50,
      }),
      milestones: data['milestones'] ?? {},
      vocabularySize: data['vocabularySize'] ?? 0,
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
    );
  }

  int get ageInMonths {
    final now = DateTime.now();
    final months = (now.year - birthDate.year) * 12 + now.month - birthDate.month;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    if (now.day < birthDate.day) {
      return months - 1;
    }
    
    return months;
  }

  int get ageInDays {
    final now = DateTime.now();
    final difference = now.difference(birthDate);
    return difference.inDays;
  }

  int get ageInYears {
    return ageInMonths ~/ 12;
  }

  String get ageFormatted {
    final days = ageInDays;
    final months = ageInMonths;
    final years = months ~/ 12;
    final remainingMonths = months % 12;

    // –î–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö (–º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏)
    if (days < 7) {
      if (days == 0) {
        return '–°–µ–≥–æ–¥–Ω—è —Ä–æ–¥–∏–ª—Å—è';
      } else if (days == 1) {
        return '1 –¥–µ–Ω—å';
      } else if (days >= 2 && days <= 4) {
        return '$days –¥–Ω—è';
      } else {
        return '$days –¥–Ω–µ–π';
      }
    }
    // –î–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ –º–µ—Å—è—Ü–∞
    else if (days < 30) {
      final weeks = days ~/ 7;
      if (weeks == 1) {
        return '1 –Ω–µ–¥–µ–ª—è';
      } else {
        return '$weeks –Ω–µ–¥–µ–ª–∏';
      }
    }
    // –î–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ –≥–æ–¥–∞
    else if (years == 0) {
      if (remainingMonths == 1) {
        return '1 –º–µ—Å—è—Ü';
      } else if (remainingMonths >= 2 && remainingMonths <= 4) {
        return '$remainingMonths –º–µ—Å—è—Ü–∞';
      } else {
        return '$remainingMonths –º–µ—Å—è—Ü–µ–≤';
      }
    }
    // –î–ª—è –¥–µ—Ç–µ–π —Å—Ç–∞—Ä—à–µ –≥–æ–¥–∞
    else {
      String yearStr;
      if (years == 1) {
        yearStr = '1 –≥–æ–¥';
      } else if (years >= 2 && years <= 4) {
        yearStr = '$years –≥–æ–¥–∞';
      } else {
        yearStr = '$years –ª–µ—Ç';
      }
      
      if (remainingMonths == 0) {
        return yearStr;
      } else if (remainingMonths == 1) {
        return '$yearStr 1 –º–µ—Å.';
      } else {
        return '$yearStr $remainingMonths –º–µ—Å.';
      }
    }
  }
  
  // –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è UI
  String get ageFormattedShort {
    final months = ageInMonths;
    final years = months ~/ 12;
    
    if (years == 0) {
      return '$months –º–µ—Å.';
    } else if (years == 1) {
      return '1 –≥–æ–¥';
    } else if (years >= 2 && years <= 4) {
      return '$years –≥–æ–¥–∞';
    } else {
      return '$years –ª–µ—Ç';
    }
  }
}

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
class Achievement {
  final String id;
  final String title;
  final String description;
  final String icon;
  final bool unlocked;
  final DateTime? unlockedAt;
  final int progress;
  final int maxProgress;

  Achievement({
    required this.id,
    required this.title,
    required this.description,
    required this.icon,
    required this.unlocked,
    this.unlockedAt,
    required this.progress,
    required this.maxProgress,
  });

  factory Achievement.fromFirestore(Map<String, dynamic> data, String id) {
    return Achievement(
      id: id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      icon: data['icon'] ?? 'üèÜ',
      unlocked: data['unlocked'] ?? false,
      unlockedAt: data['unlockedAt'] != null
          ? (data['unlockedAt'] as Timestamp).toDate()
          : null,
      progress: data['progress'] ?? 0,
      maxProgress: data['maxProgress'] ?? 1,
    );
  }
}

// –ò—Å—Ç–æ—Ä–∏—è
class StoryData {
  final String id;
  final String childId;
  final String theme;
  final String story;
  final String? imageUrl;
  final bool isFavorite;
  final DateTime createdAt;

  StoryData({
    required this.id,
    required this.childId,
    required this.theme,
    required this.story,
    this.imageUrl,
    required this.isFavorite,
    required this.createdAt,
  });

  factory StoryData.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return StoryData(
      id: doc.id,
      childId: data['childId'] ?? '',
      theme: data['theme'] ?? '',
      story: data['story'] ?? '',
      imageUrl: data['imageUrl'],
      isFavorite: data['isFavorite'] ?? false,
      createdAt: (data['createdAt'] as Timestamp).toDate(),
    );
  }
}