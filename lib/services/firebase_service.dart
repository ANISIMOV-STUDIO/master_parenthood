// lib/services/firebase_service.dart
import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:intl/intl.dart';

import 'dart:io';
import '../data/who_growth_standards.dart';

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
enum DiaryEntryType { milestone, development, daily }

class DiaryEntry {
  final String id;
  final String childId;
  final String title;
  final String content;
  final DateTime date;
  final DiaryEntryType type;
  final List<String> photos;

  DiaryEntry({
    required this.id,
    required this.childId,
    required this.title,
    required this.content,
    required this.date,
    required this.type,
    required this.photos,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'title': title,
      'content': content,
      'date': Timestamp.fromDate(date),
      'type': type.name,
      'photos': photos,
    };
  }

  static DiaryEntry fromJson(Map<String, dynamic> json) {
    return DiaryEntry(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      title: json['title'] ?? '',
      content: json['content'] ?? '',
      date: (json['date'] as Timestamp).toDate(),
      type: DiaryEntryType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => DiaryEntryType.daily,
      ),
      photos: List<String>.from(json['photos'] ?? []),
    );
  }
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
enum ActivityType { sleep, feeding, walk, play }
enum Mood { excited, happy, calm, sad, crying }

class Activity {
  final String id;
  final String childId;
  final ActivityType type;
  final DateTime startTime;
  final DateTime? endTime;
  final String notes;
  final Mood mood;

  Activity({
    required this.id,
    required this.childId,
    required this.type,
    required this.startTime,
    this.endTime,
    required this.notes,
    required this.mood,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'type': type.name,
      'startTime': Timestamp.fromDate(startTime),
      'endTime': endTime != null ? Timestamp.fromDate(endTime!) : null,
      'notes': notes,
      'mood': mood.name,
    };
  }

  static Activity fromJson(Map<String, dynamic> json) {
    return Activity(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      type: ActivityType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => ActivityType.feeding,
      ),
      startTime: (json['startTime'] as Timestamp).toDate(),
      endTime: json['endTime'] != null 
          ? (json['endTime'] as Timestamp).toDate() 
          : null,
      notes: json['notes'] ?? '',
      mood: Mood.values.firstWhere(
        (e) => e.name == json['mood'],
        orElse: () => Mood.happy,
      ),
    );
  }
}

// –ú–æ–¥–µ–ª—å –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π —Ä–æ—Å—Ç–∞/–≤–µ—Å–∞
class GrowthMeasurement {
  final String id;
  final String childId;
  final DateTime date;
  final double height;
  final double weight;
  final String notes;

  GrowthMeasurement({
    required this.id,
    required this.childId,
    required this.date,
    required this.height,
    required this.weight,
    required this.notes,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'date': Timestamp.fromDate(date),
      'height': height,
      'weight': weight,
      'notes': notes,
    };
  }

  static GrowthMeasurement fromJson(Map<String, dynamic> json) {
    return GrowthMeasurement(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      date: (json['date'] as Timestamp).toDate(),
      height: (json['height'] ?? 0.0).toDouble(),
      weight: (json['weight'] ?? 0.0).toDouble(),
      notes: json['notes'] ?? '',
    );
  }
}

class FirebaseService {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseStorage _storage = FirebaseStorage.instance;
  static final GoogleSignIn _googleSignIn = GoogleSignIn();

  // ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

  static User? get currentUser => _auth.currentUser;
  static String? get currentUserId => _auth.currentUser?.uid;
  static bool get isAuthenticated => _auth.currentUser != null;

  // Stream —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static Stream<User?> get authStateChanges => _auth.authStateChanges();

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  static Future<User?> registerWithEmail({
    required String email,
    required String password,
    required String parentName,
  }) async {
    return signUpWithEmail(
      email: email,
      password: password,
      displayName: parentName,
    );
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email
  static Future<User?> signUpWithEmail({
    required String email,
    required String password,
    required String displayName,
  }) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (credential.user != null) {
        await credential.user!.updateDisplayName(displayName);
        await _createUserProfile(credential.user!);
      }

      return credential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthException(e);
    }
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email
  static Future<User?> signInWithEmail({
    required String email,
    required String password,
  }) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (credential.user != null) {
        await _updateLastLogin(credential.user!.uid);
      }

      return credential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthException(e);
    }
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  static Future<User?> signInWithGoogle() async {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;

      // –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      // –í—Ö–æ–¥–∏–º –≤ Firebase
      final UserCredential userCredential = await _auth.signInWithCredential(credential);

      if (userCredential.user != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        final doc = await _firestore.collection('users').doc(userCredential.user!.uid).get();

        if (!doc.exists) {
          await _createUserProfile(userCredential.user!);
        } else {
          await _updateLastLogin(userCredential.user!.uid);
        }
      }

      return userCredential.user;
    } catch (e) {
      if (kDebugMode) {
        print('Error signing in with Google: $e');
      }
      throw Exception('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google');
    }
  }



  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  static Future<void> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
    } on FirebaseAuthException catch (e) {
      throw _handleAuthException(e);
    }
  }

  // –í—ã—Ö–æ–¥
  static Future<void> signOut() async {
    await _googleSignIn.signOut();

    await _auth.signOut();
  }

  // ===== –ü–†–û–§–ò–õ–ò =====

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> _createUserProfile(User user) async {
    final profile = {
      'uid': user.uid,
      'email': user.email,
      'displayName': user.displayName ?? '–†–æ–¥–∏—Ç–µ–ª—å',
      'photoURL': user.photoURL,
      'level': 1,
      'xp': 0,
      'subscription': 'free',
      'createdAt': FieldValue.serverTimestamp(),
      'lastLogin': FieldValue.serverTimestamp(),
      'provider': user.providerData.isNotEmpty ? user.providerData.first.providerId : 'email',
    };

    await _firestore.collection('users').doc(user.uid).set(profile);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
  static Future<void> _updateLastLogin(String uid) async {
    await _firestore.collection('users').doc(uid).update({
      'lastLogin': FieldValue.serverTimestamp(),
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<UserProfile?> getUserProfile() async {
    if (!isAuthenticated) return null;

    final doc = await _firestore.collection('users').doc(currentUserId!).get();
    if (doc.exists) {
      return UserProfile.fromFirestore(doc);
    }
    return null;
  }

  // Stream –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Stream<UserProfile?> getUserProfileStream() {
    if (!isAuthenticated) return Stream.value(null);

    return FirebaseFirestore.instance
        .collection('users')
        .doc(currentUserId!)
        .snapshots()
        .map((doc) => doc.exists ? UserProfile.fromFirestore(doc) : null);
  }

  // ===== –î–ï–¢–ò =====

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
  static Future<String> addChild({
    required String name,
    required DateTime birthDate,
    required String gender,
    required double height,
    required double weight,
    String petName = '–ï–¥–∏–Ω–æ—Ä–æ–≥',
    String petType = 'ü¶Ñ',
  }) async {
    if (!isAuthenticated) throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    final childRef = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .add({
      'name': name,
      'birthDate': Timestamp.fromDate(birthDate),
      'gender': gender,
      'height': height,
      'weight': weight,
      'petName': petName,
      'petType': petType,
      'petStats': {
        'happiness': 50,
        'energy': 50,
        'knowledge': 50,
      },
      'milestones': {},
      'vocabularySize': 0,
      'createdAt': FieldValue.serverTimestamp(),
      'updatedAt': FieldValue.serverTimestamp(),
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    await setActiveChild(childRef.id);

    return childRef.id;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Future<void> updateChild({
    required String childId,
    required Map<String, dynamic> data,
  }) async {
    if (!isAuthenticated) return;

    data['updatedAt'] = FieldValue.serverTimestamp();

    await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .doc(childId)
        .update(data);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
  static Future<void> setActiveChild(String childId) async {
    if (!isAuthenticated) return;

    await _firestore.collection('users').doc(currentUserId!).update({
      'activeChildId': childId,
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
  static Future<ChildProfile?> getActiveChild() async {
    if (!isAuthenticated) return null;

    final userDoc = await _firestore.collection('users').doc(currentUserId!).get();
    final activeChildId = userDoc.data()?['activeChildId'];

    if (activeChildId != null) {
      return getChild(activeChildId);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ
    final children = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .limit(1)
        .get();

    if (children.docs.isNotEmpty) {
      final firstChild = ChildProfile.fromFirestore(
        children.docs.first.data(),
        children.docs.first.id,
      );
      await setActiveChild(firstChild.id);
      return firstChild;
    }

    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ ID
  static Future<ChildProfile?> getChild(String childId) async {
    if (!isAuthenticated) return null;

    final doc = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .doc(childId)
        .get();

    if (doc.exists) {
      return ChildProfile.fromFirestore(doc.data()!, doc.id);
    }
    return null;
  }

  // Stream –≤—Å–µ—Ö –¥–µ—Ç–µ–π
  static Stream<List<ChildProfile>> getChildrenStream() {
    if (!isAuthenticated) return Stream.value([]);

    return FirebaseFirestore.instance
        .collection('users')
        .doc(currentUserId!)
        .collection('children')
        .orderBy('createdAt', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => ChildProfile.fromFirestore(doc.data(), doc.id))
        .toList());
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ä–µ–±–µ–Ω–∫–∞
  static Future<String?> uploadChildPhoto({
    required File file,
    required String childId,
  }) async {
    if (!isAuthenticated) return null;

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      if (!await file.exists()) {
        throw Exception('File does not exist');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      final fileSizeInBytes = await file.length();
      final fileSizeInMB = fileSizeInBytes / (1024 * 1024);
      
      if (fileSizeInMB > 5) {
        throw Exception('File size exceeds 5MB limit');
      }

      final ref = _storage
          .ref()
          .child('users')
          .child(currentUserId!)
          .child('children')
          .child(childId)
          .child('photo_${DateTime.now().millisecondsSinceEpoch}.jpg');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      final metadata = SettableMetadata(
        contentType: 'image/jpeg',
        customMetadata: {
          'uploadedBy': currentUserId!,
          'childId': childId,
        },
      );

      await ref.putFile(file, metadata);
      final url = await ref.getDownloadURL();

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞
      await FirebaseFirestore.instance
          .collection('users')
          .doc(currentUserId!)
          .collection('children')
          .doc(childId)
          .update({
            'photoURL': url,
            'photoUpdatedAt': FieldValue.serverTimestamp(),
          });

      return url;
    } catch (e) {
      if (kDebugMode) {
        print('Error uploading photo: $e');
      }
      rethrow;
    }
  }

  // ===== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ò XP =====

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ XP
  static Future<void> addXP(int amount) async {
    if (!isAuthenticated) return;

    final userRef = _firestore.collection('users').doc(currentUserId!);

    await _firestore.runTransaction((transaction) async {
      final userDoc = await transaction.get(userRef);
      if (!userDoc.exists) return;

      final currentXP = userDoc.data()?['xp'] ?? 0;
      final currentLevel = userDoc.data()?['level'] ?? 1;

      final newXP = currentXP + amount;
      final newLevel = (newXP ~/ 1000) + 1;

      transaction.update(userRef, {
        'xp': newXP,
        'level': newLevel,
      });
    });
  }

  // Stream –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static Stream<List<Achievement>> getAchievementsStream() {
    if (!isAuthenticated) return Stream.value([]);

    return FirebaseFirestore.instance
        .collection('users')
        .doc(currentUserId!)
        .collection('achievements')
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => Achievement.fromFirestore(doc.data(), doc.id))
        .toList());
  }

  // ===== –°–ö–ê–ó–ö–ò =====

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–∞–∑–∫–∏
  static Future<String> saveStory({
    required String childId,
    required String story,
    required String theme,
    String? imageUrl,
  }) async {
    if (!isAuthenticated) throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    final storyRef = await _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .add({
      'childId': childId,
      'story': story,
      'theme': theme,
      'imageUrl': imageUrl,
      'createdAt': FieldValue.serverTimestamp(),
      'isFavorite': false,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏
    await addXP(50);

    return storyRef.id;
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–∑–∫–∏
  static Future<void> toggleStoryFavorite(String storyId) async {
    if (!isAuthenticated) return;

    final storyRef = _firestore
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .doc(storyId);

    final storyDoc = await storyRef.get();
    if (storyDoc.exists) {
      final currentFavorite = storyDoc.data()?['isFavorite'] ?? false;
      await storyRef.update({'isFavorite': !currentFavorite});
    }
  }

  // Stream –∏—Å—Ç–æ—Ä–∏–π
  static Stream<List<StoryData>> getStoriesStream(String childId) {
    if (!isAuthenticated) return Stream.value([]);

    return FirebaseFirestore.instance
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .where('childId', isEqualTo: childId)
        .orderBy('createdAt', descending: true)
        .limit(50)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => StoryData.fromFirestore(doc))
        .toList());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫
  static Stream<List<StoryData>> getFavoriteStoriesStream() {
    if (!isAuthenticated) return Stream.value([]);

    return FirebaseFirestore.instance
        .collection('users')
        .doc(currentUserId!)
        .collection('stories')
        .where('isFavorite', isEqualTo: true)
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => StoryData.fromFirestore(doc))
        .toList());
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static String _handleAuthException(FirebaseAuthException e) {
    switch (e.code) {
      case 'weak-password':
        return '–°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å';
      case 'email-already-in-use':
        return 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
      case 'invalid-email':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
      case 'user-not-found':
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      case 'wrong-password':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
      case 'user-disabled':
        return '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      case 'too-many-requests':
        return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      default:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message}';
    }
  }

  // ===== –î–ù–ï–í–ù–ò–ö –†–ê–ó–í–ò–¢–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
  static Future<String> createDiaryEntry(DiaryEntry entry) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('diary_entries')
          .add(entry.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<DiaryEntry>> getDiaryEntriesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('diary_entries')
        .where('childId', isEqualTo: childId)
        .orderBy('date', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DiaryEntry.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
  static Stream<List<DiaryEntry>> getAllDiaryEntriesStream() {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('diary_entries')
        .orderBy('date', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DiaryEntry.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞
  static Future<void> updateDiaryEntry(DiaryEntry entry) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('diary_entries')
          .doc(entry.id)
          .update(entry.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞
  static Future<void> deleteDiaryEntry(String entryId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('diary_entries')
          .doc(entryId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // ===== –¢–†–ï–ö–ï–† –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô =====

  // –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  static Future<String> createActivity(Activity activity) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('activities')
          .add(activity.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
  static Stream<List<Activity>> getActivitiesStream(String childId, DateTime date) {
    final startOfDay = DateTime(date.year, date.month, date.day);
    final endOfDay = DateTime(date.year, date.month, date.day, 23, 59, 59);
    
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('activities')
        .where('childId', isEqualTo: childId)
        .where('startTime', isGreaterThanOrEqualTo: Timestamp.fromDate(startOfDay))
        .where('startTime', isLessThanOrEqualTo: Timestamp.fromDate(endOfDay))
        .orderBy('startTime', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Activity.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<Activity>> getAllActivitiesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('activities')
        .where('childId', isEqualTo: childId)
        .orderBy('startTime', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Activity.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  static Future<void> updateActivity(Activity activity) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('activities')
          .doc(activity.id)
          .update(activity.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  static Future<void> deleteActivity(String activityId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('activities')
          .doc(activityId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.toString()}');
    }
  }

  // ===== –ò–ó–ú–ï–†–ï–ù–ò–Ø –†–û–°–¢–ê –ò –í–ï–°–ê =====

  // –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  static Future<String> addGrowthMeasurement(GrowthMeasurement measurement) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('growth_measurements')
          .add(measurement.toJson());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ —Ä–µ–±–µ–Ω–∫–∞
      await updateChildProfile(measurement.childId, {
        'height': measurement.height,
        'weight': measurement.weight,
      });
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<GrowthMeasurement>> getGrowthMeasurementsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('growth_measurements')
        .where('childId', isEqualTo: childId)
        .orderBy('date', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => GrowthMeasurement.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  static Future<void> updateGrowthMeasurement(GrowthMeasurement measurement) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('growth_measurements')
          .doc(measurement.id)
          .update(measurement.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  static Future<void> deleteGrowthMeasurement(String measurementId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('growth_measurements')
          .doc(measurementId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
  static Future<void> updateChildProfile(String childId, Map<String, dynamic> data) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('children')
          .doc(childId)
          .update({
            ...data,
            'updatedAt': FieldValue.serverTimestamp(),
          });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${e.toString()}');
    }
  }

  // ===== –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ =====

  // ===== –ü–†–ò–í–ò–í–ö–ò =====

  // –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∏–≤–∫—É
  static Future<String> createVaccination(Vaccination vaccination) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('vaccinations')
          .add(vaccination.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∏–≤–∫–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∏–≤–∫–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<Vaccination>> getVaccinationsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('vaccinations')
        .where('childId', isEqualTo: childId)
        .orderBy('scheduledDate', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Vaccination.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤–∏–≤–∫–∏
  static Stream<List<Vaccination>> getOverdueVaccinationsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('vaccinations')
        .where('childId', isEqualTo: childId)
        .where('status', isEqualTo: VaccinationStatus.scheduled.name)
        .where('scheduledDate', isLessThan: Timestamp.now())
        .orderBy('scheduledDate', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Vaccination.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø—Ä–∏–≤–∏–≤–∫–∏ (–≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π)
  static Stream<List<Vaccination>> getUpcomingVaccinationsStream(String childId) {
    final now = DateTime.now();
    final futureDate = now.add(const Duration(days: 30));
    
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('vaccinations')
        .where('childId', isEqualTo: childId)
        .where('status', isEqualTo: VaccinationStatus.scheduled.name)
        .where('scheduledDate', isGreaterThan: Timestamp.now())
        .where('scheduledDate', isLessThan: Timestamp.fromDate(futureDate))
        .orderBy('scheduledDate', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Vaccination.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∏–≤–∫—É
  static Future<void> updateVaccination(Vaccination vaccination) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('vaccinations')
          .doc(vaccination.id)
          .update(vaccination.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∏–≤–∫–∏: ${e.toString()}');
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤–∏–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  static Future<void> markVaccinationCompleted(
    String vaccinationId, 
    DateTime actualDate,
    {String? doctorName, String? clinic, String? reaction, String? batchNumber}
  ) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('vaccinations')
          .doc(vaccinationId)
          .update({
            'status': VaccinationStatus.completed.name,
            'actualDate': Timestamp.fromDate(actualDate),
            'doctorName': doctorName,
            'clinic': clinic,
            'reaction': reaction,
            'batchNumber': batchNumber,
            'updatedAt': FieldValue.serverTimestamp(),
          });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤–∏–≤–∫–∏: ${e.toString()}');
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–≤–∏–≤–æ–∫ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Future<void> generateVaccinationSchedule(String childId, DateTime birthDate) async {
    try {
      final ageInMonths = DateTime.now().difference(birthDate).inDays ~/ 30;
      final scheduleTemplates = VaccinationSchedule.getScheduleForAge(ageInMonths);
      
      for (final template in scheduleTemplates) {
        final scheduledDate = birthDate.add(Duration(days: template.recommendedAgeMonths * 30));
        
        final vaccination = Vaccination(
          id: '', // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
          childId: childId,
          type: template.type,
          name: template.name,
          scheduledDate: scheduledDate,
          status: VaccinationStatus.scheduled,
          attachments: [],
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
        
        await createVaccination(vaccination);
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏–≤–∏–≤–æ–∫: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∏–≤–∫—É
  static Future<void> deleteVaccination(String vaccinationId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('vaccinations')
          .doc(vaccinationId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∏–≤–∫–∏: ${e.toString()}');
    }
  }

  // ===== –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –ó–ê–ü–ò–°–ò =====

  // –°–æ–∑–¥–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∑–∞–ø–∏—Å—å
  static Future<String> createMedicalRecord(MedicalRecord record) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('medical_records')
          .add(record.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<MedicalRecord>> getMedicalRecordsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('medical_records')
        .where('childId', isEqualTo: childId)
        .orderBy('date', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => MedicalRecord.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É
  static Stream<List<MedicalRecord>> getMedicalRecordsByTypeStream(
    String childId, 
    MedicalRecordType type
  ) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('medical_records')
        .where('childId', isEqualTo: childId)
        .where('type', isEqualTo: type.name)
        .orderBy('date', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => MedicalRecord.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–∏—Å–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
  static Future<List<MedicalRecord>> searchMedicalRecords(
    String childId, 
    String searchQuery
  ) async {
    try {
      final query = searchQuery.toLowerCase();
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('medical_records')
          .where('childId', isEqualTo: childId)
          .get();

      return snapshot.docs
          .map((doc) => MedicalRecord.fromJson({...doc.data(), 'id': doc.id}))
          .where((record) =>
              record.title.toLowerCase().contains(query) ||
              record.description.toLowerCase().contains(query) ||
              record.diagnosis?.toLowerCase().contains(query) == true ||
              record.symptoms.any((symptom) => symptom.toLowerCase().contains(query)))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∑–∞–ø–∏—Å—å
  static Future<void> updateMedicalRecord(MedicalRecord record) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('medical_records')
          .doc(record.id)
          .update(record.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∑–∞–ø–∏—Å—å
  static Future<void> deleteMedicalRecord(String recordId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('medical_records')
          .doc(recordId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Ä–µ—Ü–µ–ø—Ç—ã
  static Future<List<Prescription>> getActivePrescriptions(String childId) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('medical_records')
          .where('childId', isEqualTo: childId)
          .get();

      final activePrescriptions = <Prescription>[];
      
      for (final doc in snapshot.docs) {
        final record = MedicalRecord.fromJson({...doc.data(), 'id': doc.id});
        activePrescriptions.addAll(
          record.prescriptions.where((prescription) => 
            !prescription.isCompleted && 
            (prescription.endDate == null || prescription.endDate!.isAfter(DateTime.now()))
          )
        );
      }
      
      return activePrescriptions;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  static Future<Map<String, dynamic>> getMedicalSummary(
    String childId, 
    {DateTime? fromDate, DateTime? toDate}
  ) async {
    try {
      final from = fromDate ?? DateTime.now().subtract(const Duration(days: 365));
      final to = toDate ?? DateTime.now();

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
      final recordsSnapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('medical_records')
          .where('childId', isEqualTo: childId)
          .where('date', isGreaterThanOrEqualTo: Timestamp.fromDate(from))
          .where('date', isLessThanOrEqualTo: Timestamp.fromDate(to))
          .orderBy('date', descending: true)
          .get();

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∏–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
      final vaccinationsSnapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('vaccinations')
          .where('childId', isEqualTo: childId)
          .where('actualDate', isGreaterThanOrEqualTo: Timestamp.fromDate(from))
          .where('actualDate', isLessThanOrEqualTo: Timestamp.fromDate(to))
          .orderBy('actualDate', descending: true)
          .get();

      final records = recordsSnapshot.docs
          .map((doc) => MedicalRecord.fromJson({...doc.data(), 'id': doc.id}))
          .toList();

      final vaccinations = vaccinationsSnapshot.docs
          .map((doc) => Vaccination.fromJson({...doc.data(), 'id': doc.id}))
          .toList();

      return {
        'period': '${from.day}.${from.month}.${from.year} - ${to.day}.${to.month}.${to.year}',
        'totalRecords': records.length,
        'totalVaccinations': vaccinations.length,
        'records': records.map((r) => r.toJson()).toList(),
        'vaccinations': vaccinations.map((v) => v.toJson()).toList(),
        'recordsByType': _groupRecordsByType(records),
        'activePrescriptions': await getActivePrescriptions(childId),
        'generatedAt': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–≤–æ–¥–∫–∏: ${e.toString()}');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø—É
  static Map<String, int> _groupRecordsByType(List<MedicalRecord> records) {
    final grouped = <String, int>{};
    for (final record in records) {
      final type = record.typeDisplayName;
      grouped[type] = (grouped[type] ?? 0) + 1;
    }
    return grouped;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ñ–æ—Ç–æ —Å–ø—Ä–∞–≤–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç.–¥.)
  static Future<String?> uploadMedicalDocument({
    required File file,
    required String childId,
    required String documentType, // 'vaccination', 'medical_record'
    required String documentId,
  }) async {
    if (!isAuthenticated) return null;

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
      if (!await file.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      final fileSizeInBytes = await file.length();
      final fileSizeInMB = fileSizeInBytes / (1024 * 1024);
      
      if (fileSizeInMB > 10) {
        throw Exception('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB');
      }

      final ref = FirebaseStorage.instance
          .ref()
          .child('users')
          .child(currentUserId!)
          .child('children')
          .child(childId)
          .child('medical')
          .child(documentType)
          .child(documentId)
          .child('${DateTime.now().millisecondsSinceEpoch}.jpg');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      final metadata = SettableMetadata(
        contentType: 'image/jpeg',
        customMetadata: {
          'uploadedBy': currentUserId!,
          'childId': childId,
          'documentType': documentType,
          'documentId': documentId,
        },
      );

      await ref.putFile(file, metadata);
      final url = await ref.getDownloadURL();

      return url;
    } catch (e) {
      if (kDebugMode) {
        print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: $e');
      }
      rethrow;
    }
  }

  // ===== –ú–ï–¢–û–î–´ –ü–ò–¢–ê–ù–ò–Ø =====

  // ===== –ü–†–û–î–£–ö–¢–´ –ü–ò–¢–ê–ù–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–∏—Ç–∞–Ω–∏—è
  static Future<String> createFoodItem(FoodItem foodItem) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('food_items')
          .add(foodItem.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
  static Stream<List<FoodItem>> getFoodItemsStream() {
    return FirebaseFirestore.instance
        .collection('food_items')
        .orderBy('name')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => FoodItem.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  static Future<List<FoodItem>> searchFoodItems(String query) async {
    try {
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å)
      final snapshot = await FirebaseFirestore.instance
          .collection('food_items')
          .where('name', isGreaterThanOrEqualTo: query)
          .where('name', isLessThanOrEqualTo: '$query\uf8ff')
          .get();

      return snapshot.docs
          .map((doc) => FoodItem.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${e.toString()}');
    }
  }

  // ===== –ó–ê–ü–ò–°–ò –ü–ò–¢–ê–ù–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–∏—Ç–∞–Ω–∏–∏
  static Future<String> createNutritionEntry(NutritionEntry entry) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_entries')
          .add(entry.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<NutritionEntry>> getNutritionEntriesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('nutrition_entries')
        .where('childId', isEqualTo: childId)
        .orderBy('mealTime', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => NutritionEntry.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
  static Future<List<NutritionEntry>> getNutritionEntriesForDay(
    String childId, 
    DateTime date
  ) async {
    try {
      final startOfDay = DateTime(date.year, date.month, date.day);
      final endOfDay = startOfDay.add(const Duration(days: 1));

      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_entries')
          .where('childId', isEqualTo: childId)
          .where('mealTime', isGreaterThanOrEqualTo: Timestamp.fromDate(startOfDay))
          .where('mealTime', isLessThan: Timestamp.fromDate(endOfDay))
          .orderBy('mealTime')
          .get();

      return snapshot.docs
          .map((doc) => NutritionEntry.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å: ${e.toString()}');
    }
  }

  // ===== –†–ï–¶–ï–ü–¢–´ =====

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
  static Future<List<Recipe>> getRecipesForAge(int ageMonths) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('recipes')
          .where('minAgeMonths', isLessThanOrEqualTo: ageMonths)
          .orderBy('minAgeMonths')
          .orderBy('rating', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => Recipe.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞: ${e.toString()}');
    }
  }

  // –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
  static Future<List<Recipe>> searchRecipes(String query) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('recipes')
          .where('name', isGreaterThanOrEqualTo: query)
          .where('name', isLessThanOrEqualTo: '$query\uf8ff')
          .get();

      return snapshot.docs
          .map((doc) => Recipe.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${e.toString()}');
    }
  }

  // ===== –ê–õ–õ–ï–†–ì–ò–ò =====

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏
  static Future<String> createAllergyInfo(AllergyInfo allergyInfo) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('allergies')
          .add(allergyInfo.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏
  static Future<List<AllergyInfo>> getEmergencyAllergies(String childId) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('allergies')
          .where('childId', isEqualTo: childId)
          .where('isActive', isEqualTo: true)
          .where('reactionType', whereIn: [
            AllergyReactionType.severe.name,
            AllergyReactionType.anaphylaxis.name
          ])
          .get();

      return snapshot.docs
          .map((doc) => AllergyInfo.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–ª–ª–µ—Ä–≥–∏–π: ${e.toString()}');
    }
  }

  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–ª–ª–µ—Ä–≥–∏—é
  static Future<void> deactivateAllergy(String allergyId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('allergies')
          .doc(allergyId)
          .update({
            'isActive': false,
            'updatedAt': FieldValue.serverTimestamp(),
          });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ª–ª–µ—Ä–≥–∏–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏ —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<AllergyInfo>> getAllergiesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('allergies')
        .where('childId', isEqualTo: childId)
        .where('isActive', isEqualTo: true)
        .orderBy('firstReactionDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => AllergyInfo.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // ===== –¶–ï–õ–ò –ü–ò–¢–ê–ù–ò–Ø =====

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è
  static Future<NutritionGoals?> getCurrentNutritionGoals(String childId) async {
    try {
      final now = DateTime.now();
      
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_goals')
          .where('childId', isEqualTo: childId)
          .where('validFrom', isLessThanOrEqualTo: Timestamp.fromDate(now))
          .orderBy('validFrom', descending: true)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        final data = snapshot.docs.first.data();
        final goals = NutritionGoals.fromJson({...data, 'id': snapshot.docs.first.id});
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª–∏ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if (goals.validUntil == null || goals.validUntil!.isAfter(now)) {
          return goals;
        }
      }
      
      return null;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è: ${e.toString()}');
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
  static Future<String> createStandardNutritionGoals(String childId, int ageMonths) async {
    try {
      final goals = NutritionGoals.createStandardGoals(childId, ageMonths);
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_goals')
          .add(goals.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π: ${e.toString()}');
    }
  }

  // ===== –ê–ù–ê–õ–ò–ó –ü–ò–¢–ê–ù–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
  static Future<DailyNutritionAnalysis> generateDailyNutritionAnalysis(
    String childId, 
    DateTime date
  ) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
      final nutritionEntries = await getNutritionEntriesForDay(childId, date);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏
      final goals = await getCurrentNutritionGoals(childId);
      if (goals == null) {
        throw Exception('–¶–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
      double totalCalories = 0;
      double totalProtein = 0;
      double totalFats = 0;
      double totalCarbs = 0;
      double totalFiber = 0;
      double totalVitaminA = 0;
      double totalVitaminC = 0;
      double totalVitaminD = 0;
      double totalCalcium = 0;
      double totalIron = 0;
      double totalWater = 0;

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
      int totalMeals = nutritionEntries.length;
      int mealsFinished = nutritionEntries.where((e) => e.wasFinished).length;
      double averageAppetite = totalMeals > 0 
          ? nutritionEntries.map((e) => e.appetite).reduce((a, b) => a + b) / totalMeals 
          : 0;

      final mealDistribution = <MealType, int>{};
      for (final entry in nutritionEntries) {
        mealDistribution[entry.mealType] = (mealDistribution[entry.mealType] ?? 0) + 1;
      }

      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —Å—á–∏—Ç–∞—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
      for (final entry in nutritionEntries) {
        // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ FoodItem)
        totalCalories += entry.amount * 0.5; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        totalProtein += entry.amount * 0.05;
        totalFats += entry.amount * 0.03;
        totalCarbs += entry.amount * 0.1;
        
        if (entry.unit == MeasurementUnit.milliliters) {
          totalWater += entry.amount;
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
      final goalCompletion = <String, double>{
        'calories': (totalCalories / goals.targetCalories * 100).clamp(0, 150),
        'protein': (totalProtein / goals.targetProtein * 100).clamp(0, 150),
        'fats': (totalFats / goals.targetFats * 100).clamp(0, 150),
        'carbs': (totalCarbs / goals.targetCarbs * 100).clamp(0, 150),
        'fiber': (totalFiber / goals.targetFiber * 100).clamp(0, 150),
        'vitaminA': (totalVitaminA / goals.targetVitaminA * 100).clamp(0, 150),
        'vitaminC': (totalVitaminC / goals.targetVitaminC * 100).clamp(0, 150),
        'vitaminD': (totalVitaminD / goals.targetVitaminD * 100).clamp(0, 150),
        'calcium': (totalCalcium / goals.targetCalcium * 100).clamp(0, 150),
        'iron': (totalIron / goals.targetIron * 100).clamp(0, 150),
        'water': (totalWater / goals.targetWater * 100).clamp(0, 150),
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–±–ª–µ–º—ã
      final achievements = <String>[];
      final concerns = <String>[];
      final recommendations = <String>[];

      if (goalCompletion['calories']! >= 80 && goalCompletion['calories']! <= 120) {
        achievements.add('–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π');
      } else if (goalCompletion['calories']! < 70) {
        concerns.add('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π');
        recommendations.add('–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ä—Ü–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã');
      }

      if (goalCompletion['protein']! >= 80) {
        achievements.add('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞');
      } else {
        concerns.add('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –±–µ–ª–∫–∞');
        recommendations.add('–î–æ–±–∞–≤—å—Ç–µ –º—è—Å–æ, —Ä—ã–±—É, —è–π—Ü–∞ –∏–ª–∏ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã');
      }

      if (goalCompletion['vitaminC']! >= 100) {
        achievements.add('–û—Ç–ª–∏—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ C');
      } else {
        recommendations.add('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –æ–≤–æ—â–µ–π');
      }

      if (mealsFinished == totalMeals && totalMeals > 0) {
        achievements.add('–û—Ç–ª–∏—á–Ω—ã–π –∞–ø–ø–µ—Ç–∏—Ç - —Å—ä–µ–ª –≤—Å–µ –ø–æ—Ä—Ü–∏–∏!');
      }

      if (averageAppetite >= 4) {
        achievements.add('–•–æ—Ä–æ—à–∏–π –∞–ø–ø–µ—Ç–∏—Ç');
      } else if (averageAppetite <= 2) {
        concerns.add('–ü–ª–æ—Ö–æ–π –∞–ø–ø–µ—Ç–∏—Ç');
        recommendations.add('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –±–ª—é–¥ –∏–ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
      double overallScore = 70; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

      // –ë–∞–ª–ª –∑–∞ –±–∞–ª–∞–Ω—Å –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
      final avgCompletion = goalCompletion.values.reduce((a, b) => a + b) / goalCompletion.length;
      if (avgCompletion >= 80 && avgCompletion <= 120) {
        overallScore += 20;
      } else if (avgCompletion >= 60) {
        overallScore += 10;
      }

      // –ë–∞–ª–ª –∑–∞ –∞–ø–ø–µ—Ç–∏—Ç
      if (averageAppetite >= 4) {
        overallScore += 10;
      } else if (averageAppetite >= 3) {
        overallScore += 5;
      }

      // –ë–∞–ª–ª –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
      final finishedPercentage = totalMeals > 0 ? (mealsFinished / totalMeals) * 100 : 0;
      if (finishedPercentage >= 80) {
        overallScore += 10;
      }

      overallScore = overallScore.clamp(0, 100);

      // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑
      final analysis = DailyNutritionAnalysis(
        id: '',
        childId: childId,
        analysisDate: date,
        nutritionEntries: nutritionEntries,
        goals: goals,
        actualCalories: totalCalories,
        actualProtein: totalProtein,
        actualFats: totalFats,
        actualCarbs: totalCarbs,
        actualFiber: totalFiber,
        actualVitaminA: totalVitaminA,
        actualVitaminC: totalVitaminC,
        actualVitaminD: totalVitaminD,
        actualCalcium: totalCalcium,
        actualIron: totalIron,
        actualWater: totalWater,
        goalCompletion: goalCompletion,
        overallScore: overallScore,
        achievements: achievements,
        concerns: concerns,
        recommendations: recommendations,
        totalMeals: totalMeals,
        averageAppetite: averageAppetite,
        mealsFinished: mealsFinished,
        mealDistribution: mealDistribution,
        createdAt: DateTime.now(),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      await _saveDailyNutritionAnalysis(analysis);

      return analysis;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è: ${e.toString()}');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è
  static Future<String> _saveDailyNutritionAnalysis(DailyNutritionAnalysis analysis) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_analyses')
          .add(analysis.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã –ø–∏—Ç–∞–Ω–∏—è
  static Stream<List<DailyNutritionAnalysis>> getNutritionAnalysesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('nutrition_analyses')
        .where('childId', isEqualTo: childId)
        .orderBy('analysisDate', descending: true)
        .limit(30)
        .snapshots()
        .asyncMap((snapshot) async {
          final analyses = <DailyNutritionAnalysis>[];
          
          for (final doc in snapshot.docs) {
            final data = doc.data();
            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (entries, goals)
            // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            final analysis = DailyNutritionAnalysis.fromJson(
              {...data, 'id': doc.id},
              nutritionEntries: [], // –ó–∞–≥–ª—É—à–∫–∞
              goals: NutritionGoals.createStandardGoals(childId, 12), // –ó–∞–≥–ª—É—à–∫–∞
            );
            analyses.add(analysis);
          }
          
          return analyses;
        });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
  static Future<Map<String, dynamic>> getNutritionStats(
    String childId, 
    DateTime startDate, 
    DateTime endDate
  ) async {
    try {
      final startTimestamp = Timestamp.fromDate(startDate);
      final endTimestamp = Timestamp.fromDate(endDate.add(const Duration(days: 1)));

      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_entries')
          .where('childId', isEqualTo: childId)
          .where('mealTime', isGreaterThanOrEqualTo: startTimestamp)
          .where('mealTime', isLessThan: endTimestamp)
          .get();

      final entries = snapshot.docs
          .map((doc) => NutritionEntry.fromJson({...doc.data(), 'id': doc.id}))
          .toList();

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final totalEntries = entries.length;
      final finishedMeals = entries.where((e) => e.wasFinished).length;
      final avgAppetite = totalEntries > 0 
          ? entries.map((e) => e.appetite).reduce((a, b) => a + b) / totalEntries 
          : 0;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      final mealTypeStats = <String, int>{};
      for (final entry in entries) {
        final key = entry.mealType.name;
        mealTypeStats[key] = (mealTypeStats[key] ?? 0) + 1;
      }

      // –õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      final foodStats = <String, int>{};
      for (final entry in entries) {
        foodStats[entry.foodName] = (foodStats[entry.foodName] ?? 0) + 1;
      }

      final favoriteFood = foodStats.isNotEmpty 
          ? foodStats.entries.reduce((a, b) => a.value > b.value ? a : b).key
          : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

      return {
        'totalEntries': totalEntries,
        'finishedMeals': finishedMeals,
        'finishedPercentage': totalEntries > 0 ? (finishedMeals / totalEntries) * 100 : 0,
        'averageAppetite': avgAppetite,
        'mealTypeStats': mealTypeStats,
        'favoriteFood': favoriteFood,
        'uniqueFoods': foodStats.keys.length,
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–∏—Ç–∞–Ω–∏—è
  static Future<void> deleteNutritionEntry(String entryId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('nutrition_entries')
          .doc(entryId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è: ${e.toString()}');
    }
  }

  // ===== –ú–ï–¢–û–î–´ –°–ù–ê =====

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–Ω–µ
  static Future<String> createSleepEntry(SleepEntry sleepEntry) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .add(sleepEntry.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<SleepEntry>> getSleepEntriesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('sleep_entries')
        .where('childId', isEqualTo: childId)
        .orderBy('date', descending: true)
        .limit(30)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => SleepEntry.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
  static Future<List<SleepEntry>> getSleepEntriesForPeriod(
    String childId,
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .where('childId', isEqualTo: childId)
          .where('date', isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
          .where('date', isLessThanOrEqualTo: Timestamp.fromDate(endDate))
          .orderBy('date')
          .get();

      return snapshot.docs
          .map((doc) => SleepEntry.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —Å–Ω–∞
  static Future<SleepEntry?> getLatestSleepEntry(String childId) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .where('childId', isEqualTo: childId)
          .orderBy('date', descending: true)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        return SleepEntry.fromJson({...snapshot.docs.first.data(), 'id': snapshot.docs.first.id});
      }
      return null;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–Ω–∞
  static Future<void> updateSleepEntry(SleepEntry sleepEntry) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .doc(sleepEntry.id)
          .update(sleepEntry.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–Ω–∞
  static Future<void> deleteSleepEntry(String entryId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .doc(entryId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Å–æ–Ω –∫ –∑–∞–ø–∏—Å–∏
  static Future<void> addNapToSleepEntry(String entryId, Nap nap) async {
    try {
      final entryRef = FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .doc(entryId);

      await FirebaseFirestore.instance.runTransaction((transaction) async {
        final entryDoc = await transaction.get(entryRef);
        
        if (entryDoc.exists) {
          final data = entryDoc.data()!;
          final currentNaps = List<Map<String, dynamic>>.from(data['naps'] ?? []);
          currentNaps.add(nap.toJson());
          
          transaction.update(entryRef, {
            'naps': currentNaps,
            'updatedAt': FieldValue.serverTimestamp(),
          });
        }
      });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ—á–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∫ –∑–∞–ø–∏—Å–∏
  static Future<void> addInterruptionToSleepEntry(String entryId, SleepInterruption interruption) async {
    try {
      final entryRef = FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_entries')
          .doc(entryId);

      await FirebaseFirestore.instance.runTransaction((transaction) async {
        final entryDoc = await transaction.get(entryRef);
        
        if (entryDoc.exists) {
          final data = entryDoc.data()!;
          final currentInterruptions = List<Map<String, dynamic>>.from(data['interruptions'] ?? []);
          currentInterruptions.add(interruption.toJson());
          
          transaction.update(entryRef, {
            'interruptions': currentInterruptions,
            'updatedAt': FieldValue.serverTimestamp(),
          });
        }
      });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // ===== –ê–ù–ê–õ–ò–ó –°–ù–ê =====

  // –°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
  static Future<SleepAnalysis> generateSleepAnalysis(
    String childId,
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
      final sleepEntries = await getSleepEntriesForPeriod(childId, startDate, endDate);
      
      if (sleepEntries.isEmpty) {
        throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      final completeEntries = sleepEntries.where((e) => e.isCompleteEntry).toList();
      
      if (completeEntries.isEmpty) {
        throw Exception('–ù–µ—Ç –ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ —Å–Ω–µ –∑–∞ –ø–µ—Ä–∏–æ–¥');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final totalNightSleep = completeEntries.fold<Duration>(
        Duration.zero,
        (sum, entry) => sum + entry.actualSleepTime,
      );
      final averageNightSleep = Duration(
        milliseconds: totalNightSleep.inMilliseconds ~/ completeEntries.length,
      );

      final totalDaytimeSleep = completeEntries.fold<Duration>(
        Duration.zero,
        (sum, entry) => sum + entry.totalNapTime,
      );
      final averageDaytimeSleep = Duration(
        milliseconds: totalDaytimeSleep.inMilliseconds ~/ completeEntries.length,
      );

      final averageTotalSleep = Duration(
        milliseconds: (totalNightSleep.inMilliseconds + totalDaytimeSleep.inMilliseconds) ~/ completeEntries.length,
      );

      // –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
      double avgBedtime = 0;
      double avgWakeup = 0;
      double avgTimeToSleep = 0;
      double avgWakings = 0;
      double avgQuality = 0;

      for (final entry in completeEntries) {
        if (entry.bedtime != null) {
          avgBedtime += entry.bedtime!.hour * 60 + entry.bedtime!.minute;
        }
        if (entry.wakeupTime != null) {
          avgWakeup += entry.wakeupTime!.hour * 60 + entry.wakeupTime!.minute;
        }
        if (entry.timeToFallAsleep != null) {
          avgTimeToSleep += entry.timeToFallAsleep!.inMinutes;
        }
        avgWakings += entry.nightWakings;
        avgQuality += entry.quality.scoreValue;
      }

      avgBedtime /= completeEntries.length;
      avgWakeup /= completeEntries.length;
      avgTimeToSleep /= completeEntries.length;
      avgWakings /= completeEntries.length;
      avgQuality /= completeEntries.length;

      // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
      final sleepTimeTrend = _analyzeSleepTimeTrend(completeEntries);
      final qualityTrend = _analyzeSleepQualityTrend(completeEntries);
      final bedtimeTrend = _analyzeBedtimeTrend(completeEntries);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final insights = _generateSleepInsights(completeEntries, averageNightSleep, avgQuality, avgWakings);
      final recommendations = _generateSleepRecommendations(
        averageNightSleep, 
        avgTimeToSleep, 
        avgWakings, 
        avgQuality,
        completeEntries,
      );

      // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è
      final commonFactors = _analyzeCommonSleepFactors(completeEntries);

      // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑
      final analysis = SleepAnalysis(
        id: '',
        childId: childId,
        startDate: startDate,
        endDate: endDate,
        sleepEntries: completeEntries,
        averageNightSleep: averageNightSleep,
        averageDaytimeSleep: averageDaytimeSleep,
        averageTotalSleep: averageTotalSleep,
        averageBedtime: avgBedtime,
        averageWakeupTime: avgWakeup,
        averageTimeToFallAsleep: avgTimeToSleep,
        averageNightWakings: avgWakings,
        averageSleepQuality: avgQuality,
        sleepTimeTrend: sleepTimeTrend,
        qualityTrend: qualityTrend,
        bedtimeTrend: bedtimeTrend,
        sleepPatterns: _analyzeSleepPatterns(completeEntries),
        insights: insights,
        recommendations: recommendations,
        commonFactors: commonFactors,
        createdAt: DateTime.now(),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      await _saveSleepAnalysis(analysis);

      return analysis;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
  static SleepTrend _analyzeSleepTimeTrend(List<SleepEntry> entries) {
    if (entries.length < 3) return SleepTrend.stable;
    
    final recent = entries.take(entries.length ~/ 2).toList();
    final older = entries.skip(entries.length ~/ 2).toList();
    
    final recentAvg = recent.fold<Duration>(Duration.zero, (sum, e) => sum + e.actualSleepTime).inMinutes / recent.length;
    final olderAvg = older.fold<Duration>(Duration.zero, (sum, e) => sum + e.actualSleepTime).inMinutes / older.length;
    
    final diff = recentAvg - olderAvg;
    
    if (diff > 30) return SleepTrend.improving;
    if (diff < -30) return SleepTrend.declining;
    return SleepTrend.stable;
  }

  static SleepTrend _analyzeSleepQualityTrend(List<SleepEntry> entries) {
    if (entries.length < 3) return SleepTrend.stable;
    
    final recent = entries.take(entries.length ~/ 2).toList();
    final older = entries.skip(entries.length ~/ 2).toList();
    
    final recentAvg = recent.fold<double>(0, (sum, e) => sum + e.quality.scoreValue) / recent.length;
    final olderAvg = older.fold<double>(0, (sum, e) => sum + e.quality.scoreValue) / older.length;
    
    final diff = recentAvg - olderAvg;
    
    if (diff > 0.5) return SleepTrend.improving;
    if (diff < -0.5) return SleepTrend.declining;
    return SleepTrend.stable;
  }

  static SleepTrend _analyzeBedtimeTrend(List<SleepEntry> entries) {
    if (entries.length < 3) return SleepTrend.stable;
    
    final bedtimes = entries
        .where((e) => e.bedtime != null)
        .map((e) => e.bedtime!.hour * 60 + e.bedtime!.minute)
        .toList();
    
    if (bedtimes.length < 3) return SleepTrend.stable;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
    final avg = bedtimes.fold<double>(0, (sum, t) => sum + t) / bedtimes.length;
    final variance = bedtimes.fold<double>(0, (sum, t) => sum + (t - avg) * (t - avg)) / bedtimes.length;
    
    if (variance > 900) return SleepTrend.inconsistent; // > 30 –º–∏–Ω —Ä–∞–∑–±—Ä–æ—Å
    return SleepTrend.stable;
  }

  static Map<String, dynamic> _analyzeSleepPatterns(List<SleepEntry> entries) {
    final patterns = <String, dynamic>{};
    
    // –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    final weekdayStats = <int, List<Duration>>{};
    for (final entry in entries) {
      final weekday = entry.date.weekday;
      weekdayStats.putIfAbsent(weekday, () => []).add(entry.actualSleepTime);
    }
    
    final weekdayAverages = <String, double>{};
    weekdayStats.forEach((day, durations) {
      final avg = durations.fold<Duration>(Duration.zero, (sum, d) => sum + d).inMinutes / durations.length;
      weekdayAverages['day_$day'] = avg;
    });
    
    patterns['weekday_averages'] = weekdayAverages;
    
    // –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–Ω–∏
    if (weekdayAverages.isNotEmpty) {
      final sortedDays = weekdayAverages.entries.toList()
        ..sort((a, b) => b.value.compareTo(a.value));
      
      patterns['best_sleep_day'] = sortedDays.first.key;
      patterns['worst_sleep_day'] = sortedDays.last.key;
    }
    
    return patterns;
  }

  static List<String> _generateSleepInsights(
    List<SleepEntry> entries,
    Duration avgSleep,
    double avgQuality,
    double avgWakings,
  ) {
    final insights = <String>[];
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞
    final avgHours = avgSleep.inHours;
    if (avgHours >= 11) {
      insights.add('–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ - ${avgHours}—á –≤ —Å—Ä–µ–¥–Ω–µ–º');
    } else if (avgHours >= 9) {
      insights.add('–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ - ${avgHours}—á –≤ —Å—Ä–µ–¥–Ω–µ–º');
    } else {
      insights.add('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ - —Ç–æ–ª—å–∫–æ ${avgHours}—á');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    if (avgQuality >= 4) {
      insights.add('–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ - –æ—Ü–µ–Ω–∫–∞ ${avgQuality.toStringAsFixed(1)}/5');
    } else if (avgQuality >= 3) {
      insights.add('–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ - –æ—Ü–µ–Ω–∫–∞ ${avgQuality.toStringAsFixed(1)}/5');
    } else {
      insights.add('–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ - –æ—Ü–µ–Ω–∫–∞ ${avgQuality.toStringAsFixed(1)}/5');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π
    if (avgWakings <= 1) {
      insights.add('–•–æ—Ä–æ—à–∏–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Å–æ–Ω - ${avgWakings.toStringAsFixed(1)} –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π –∑–∞ –Ω–æ—á—å');
    } else if (avgWakings <= 2) {
      insights.add('–£–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ—á–Ω—ã–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è - ${avgWakings.toStringAsFixed(1)} —Ä–∞–∑ –∑–∞ –Ω–æ—á—å');
    } else {
      insights.add('–ß–∞—Å—Ç—ã–µ –Ω–æ—á–Ω—ã–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è - ${avgWakings.toStringAsFixed(1)} —Ä–∞–∑ –∑–∞ –Ω–æ—á—å');
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    final bedtimeVariation = _calculateBedtimeVariation(entries);
    if (bedtimeVariation < 30) {
      insights.add('–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ - —Ä–∞–∑–±—Ä–æ—Å –º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç');
    } else {
      insights.add('–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ - —Ä–∞–∑–±—Ä–æ—Å ${bedtimeVariation.toInt()} –º–∏–Ω—É—Ç');
    }
    
    return insights;
  }

  static List<String> _generateSleepRecommendations(
    Duration avgSleep,
    double avgTimeToSleep,
    double avgWakings,
    double avgQuality,
    List<SleepEntry> entries,
  ) {
    final recommendations = <String>[];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (avgSleep.inHours < 10) {
      recommendations.add('–£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ –¥–æ 10-12 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏');
      recommendations.add('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—Å—ã–ø–∞–Ω–∏—é
    if (avgTimeToSleep > 30) {
      recommendations.add('–°–æ–∑–¥–∞–π—Ç–µ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π —Ä–∏—Ç—É–∞–ª –ø–µ—Ä–µ–¥ —Å–Ω–æ–º');
      recommendations.add('–£–º–µ–Ω—å—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —á–∞—Å –¥–æ —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–æ—á–Ω—ã–º –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è–º
    if (avgWakings > 2) {
      recommendations.add('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç –≤ —Å–ø–∞–ª—å–Ω–µ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å)');
      recommendations.add('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if (avgQuality < 3.5) {
      recommendations.add('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞');
      recommendations.add('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ–¥–∏–∞—Ç—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    final bedtimeVariation = _calculateBedtimeVariation(entries);
    if (bedtimeVariation > 30) {
      recommendations.add('–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è');
      recommendations.add('–°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ç–∫–∏–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è');
    }
    
    return recommendations;
  }

  static Map<String, int> _analyzeCommonSleepFactors(List<SleepEntry> entries) {
    final factors = <String, int>{};
    
    for (final entry in entries) {
      entry.factors.forEach((key, value) {
        if (value == true || (value is String && value.isNotEmpty)) {
          factors[key] = (factors[key] ?? 0) + 1;
        }
      });
    }
    
    return factors;
  }

  static double _calculateBedtimeVariation(List<SleepEntry> entries) {
    final bedtimes = entries
        .where((e) => e.bedtime != null)
        .map((e) => e.bedtime!.hour * 60 + e.bedtime!.minute)
        .toList();
    
    if (bedtimes.length < 2) return 0;
    
    final avg = bedtimes.fold<double>(0, (sum, t) => sum + t) / bedtimes.length;
    final variance = bedtimes.fold<double>(0, (sum, t) => sum + (t - avg) * (t - avg)) / bedtimes.length;
    
    return sqrt(variance);
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞
  static Future<String> _saveSleepAnalysis(SleepAnalysis analysis) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('sleep_analyses')
          .add(analysis.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã —Å–Ω–∞
  static Stream<List<SleepAnalysis>> getSleepAnalysesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('sleep_analyses')
        .where('childId', isEqualTo: childId)
        .orderBy('startDate', descending: true)
        .limit(10)
        .snapshots()
        .asyncMap((snapshot) async {
          final analyses = <SleepAnalysis>[];
          
          for (final doc in snapshot.docs) {
            final data = doc.data();
            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ —Å–Ω–∞
            final analysis = SleepAnalysis.fromJson(
              {...data, 'id': doc.id},
              [], // sleepEntries –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            );
            analyses.add(analysis);
          }
          
          return analyses;
        });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
  static Future<Map<String, dynamic>> getSleepStats(
    String childId,
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      final entries = await getSleepEntriesForPeriod(childId, startDate, endDate);
      final completeEntries = entries.where((e) => e.isCompleteEntry).toList();
      
      if (completeEntries.isEmpty) {
        return {
          'totalEntries': 0,
          'completeEntries': 0,
          'averageSleepTime': 0,
          'averageQuality': 0,
          'averageWakings': 0,
          'totalNaps': 0,
        };
      }

      final totalSleep = completeEntries.fold<Duration>(
        Duration.zero,
        (sum, entry) => sum + entry.actualSleepTime,
      );
      
      final totalNaps = entries.fold<int>(0, (sum, entry) => sum + entry.naps.length);
      final totalWakings = completeEntries.fold<int>(0, (sum, entry) => sum + entry.nightWakings);
      final totalQuality = completeEntries.fold<int>(0, (sum, entry) => sum + entry.quality.scoreValue);

      return {
        'totalEntries': entries.length,
        'completeEntries': completeEntries.length,
        'averageSleepTime': totalSleep.inMinutes ~/ completeEntries.length,
        'averageQuality': totalQuality / completeEntries.length,
        'averageWakings': totalWakings / completeEntries.length,
        'totalNaps': totalNaps,
        'bestSleepTime': completeEntries.map((e) => e.actualSleepTime.inMinutes).reduce((a, b) => a > b ? a : b),
        'worstSleepTime': completeEntries.map((e) => e.actualSleepTime.inMinutes).reduce((a, b) => a < b ? a : b),
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–∞: ${e.toString()}');
    }
  }

  // ===== –ú–ï–¢–û–î–´ –†–ê–ù–ù–ï–ì–û –†–ê–ó–í–ò–¢–ò–Ø =====

  // ===== –†–ê–ó–í–ò–í–ê–Æ–©–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò =====

  // –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—é—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  static Future<String> createDevelopmentActivity(DevelopmentActivity activity) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('development_activities')
          .add(activity.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  static Stream<List<DevelopmentActivity>> getDevelopmentActivitiesStream() {
    return FirebaseFirestore.instance
        .collection('development_activities')
        .orderBy('area')
        .orderBy('difficulty')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DevelopmentActivity.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
  static Future<List<DevelopmentActivity>> getActivitiesByArea(DevelopmentArea area) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('development_activities')
          .where('area', isEqualTo: area.name)
          .orderBy('difficulty')
          .get();

      return snapshot.docs
          .map((doc) => DevelopmentActivity.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ –æ–±–ª–∞—Å—Ç–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±–µ–Ω–∫–∞
  static Future<List<DevelopmentActivity>> getActivitiesForAge(int ageMonths) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('development_activities')
          .get();

      final activities = snapshot.docs
          .map((doc) => DevelopmentActivity.fromJson({...doc.data(), 'id': doc.id}))
          .where((activity) => activity.isAgeAppropriate(ageMonths))
          .toList();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
      activities.sort((a, b) {
        final ratingComparison = b.rating.compareTo(a.rating);
        if (ratingComparison != 0) return ratingComparison;
        return a.area.name.compareTo(b.area.name);
      });

      return activities;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞: ${e.toString()}');
    }
  }

  // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  static Future<List<DevelopmentActivity>> searchActivities(String searchQuery) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('development_activities')
          .get();

      final query = searchQuery.toLowerCase();
      final activities = snapshot.docs
          .map((doc) => DevelopmentActivity.fromJson({...doc.data(), 'id': doc.id}))
          .where((activity) =>
              activity.title.toLowerCase().contains(query) ||
              activity.description.toLowerCase().contains(query) ||
              activity.tags.any((tag) => tag.toLowerCase().contains(query)))
          .toList();

      return activities;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Future<List<DevelopmentActivity>> getRecommendedActivities(String childId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
      final child = await getChild(childId);
      if (child == null) {
        throw Exception('–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      final ageMonths = DateTime.now().difference(child.birthDate).inDays ~/ 30;

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
      final ageAppropriateActivities = await getActivitiesForAge(ageMonths);

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
      final progressSnapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('development_progress')
          .where('childId', isEqualTo: childId)
          .orderBy('assessmentDate', descending: true)
          .limit(1)
          .get();

      DevelopmentArea? focusArea;
      if (progressSnapshot.docs.isNotEmpty) {
        final latestProgress = DevelopmentProgress.fromJson({
          ...progressSnapshot.docs.first.data(),
          'id': progressSnapshot.docs.first.id
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç—å —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        focusArea = latestProgress.area;
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –Ω—É–∂–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      if (focusArea != null) {
        ageAppropriateActivities.sort((a, b) {
          if (a.area == focusArea && b.area != focusArea) return -1;
          if (a.area != focusArea && b.area == focusArea) return 1;
          return b.rating.compareTo(a.rating);
        });
      }

      return ageAppropriateActivities.take(10).toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  static Future<List<DevelopmentActivity>> getPopularActivities() async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('development_activities')
          .orderBy('rating', descending: true)
          .orderBy('timesCompleted', descending: true)
          .limit(20)
          .get();

      return snapshot.docs
          .map((doc) => DevelopmentActivity.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${e.toString()}');
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –∏–∑–±—Ä–∞–Ω–Ω—É—é
  static Future<void> toggleActivityFavorite(String activityId, bool isFavorite) async {
    try {
      await FirebaseFirestore.instance
          .collection('development_activities')
          .doc(activityId)
          .update({
            'isFavorite': isFavorite,
            'updatedAt': FieldValue.serverTimestamp(),
          });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${e.toString()}');
    }
  }

  // ===== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô =====

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  static Future<String> createActivityCompletion(ActivityCompletion completion) async {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('activity_completions')
          .add(completion.toJson());

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await _updateActivityStats(completion.activityId, completion);

      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  static Stream<List<ActivityCompletion>> getActivityCompletionsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('activity_completions')
        .where('childId', isEqualTo: childId)
        .orderBy('completionDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => ActivityCompletion.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  static Future<Map<String, dynamic>> getActivityStats(String childId) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('activity_completions')
          .where('childId', isEqualTo: childId)
          .get();

      final completions = snapshot.docs
          .map((doc) => ActivityCompletion.fromJson({...doc.data(), 'id': doc.id}))
          .toList();

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º —Ä–∞–∑–≤–∏—Ç–∏—è
      final areaStats = <String, int>{};
      final areaRatings = <String, List<double>>{};
      int totalCompletions = completions.length;
      int completedActivities = completions.where((c) => c.wasCompleted).length;

      for (final completion in completions) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        final activitySnapshot = await FirebaseFirestore.instance
            .collection('development_activities')
            .doc(completion.activityId)
            .get();

        if (activitySnapshot.exists) {
          final activity = DevelopmentActivity.fromJson({
            ...activitySnapshot.data()!,
            'id': activitySnapshot.id
          });

          final areaName = activity.area.displayName;
          areaStats[areaName] = (areaStats[areaName] ?? 0) + 1;
          areaRatings.putIfAbsent(areaName, () => []).add(completion.averageRating);
        }
      }

      // –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –æ–±–ª–∞—Å—Ç—è–º
      final areaAverageRatings = <String, double>{};
      areaRatings.forEach((area, ratings) {
        areaAverageRatings[area] = ratings.reduce((a, b) => a + b) / ratings.length;
      });

      final totalMinutes = completions
          .fold<int>(0, (sum, c) => sum + c.actualDurationMinutes);

      return {
        'totalCompletions': totalCompletions,
        'completedActivities': completedActivities,
        'completionRate': totalCompletions > 0 ? (completedActivities / totalCompletions * 100).round() : 0,
        'areaStats': areaStats,
        'areaAverageRatings': areaAverageRatings,
        'totalMinutesSpent': totalMinutes,
        'averageSessionLength': totalCompletions > 0 ? (totalMinutes / totalCompletions).round() : 0,
        'mostActiveArea': areaStats.isNotEmpty 
            ? areaStats.entries.reduce((a, b) => a.value > b.value ? a : b).key
            : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        'favoriteArea': areaAverageRatings.isNotEmpty
            ? areaAverageRatings.entries.reduce((a, b) => a.value > b.value ? a : b).key
            : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  static Future<void> _updateActivityStats(String activityId, ActivityCompletion completion) async {
    try {
      final activityRef = FirebaseFirestore.instance
          .collection('development_activities')
          .doc(activityId);

      await FirebaseFirestore.instance.runTransaction((transaction) async {
        final activitySnapshot = await transaction.get(activityRef);
        
        if (activitySnapshot.exists) {
          final currentRating = activitySnapshot.data()!['rating'] ?? 0.0;
          final currentTimes = activitySnapshot.data()!['timesCompleted'] ?? 0;
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
          final newTimes = currentTimes + 1;
          final newRating = ((currentRating * currentTimes) + completion.averageRating) / newTimes;
          
          transaction.update(activityRef, {
            'rating': newRating,
            'timesCompleted': newTimes,
            'updatedAt': FieldValue.serverTimestamp(),
          });
        }
      });
    } catch (e) {
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
    }
  }

  // ===== –ü–†–û–ì–†–ï–°–° –†–ê–ó–í–ò–¢–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
  static Future<String> createDevelopmentProgress(DevelopmentProgress progress) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('development_progress')
          .add(progress.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–≤–∏—Ç–∏—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<DevelopmentProgress>> getDevelopmentProgressStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('development_progress')
        .where('childId', isEqualTo: childId)
        .orderBy('assessmentDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DevelopmentProgress.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
  static Future<DevelopmentProgress?> getLatestProgressByArea(String childId, DevelopmentArea area) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('development_progress')
          .where('childId', isEqualTo: childId)
          .where('area', isEqualTo: area.name)
          .orderBy('assessmentDate', descending: true)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        return DevelopmentProgress.fromJson({
          ...snapshot.docs.first.data(),
          'id': snapshot.docs.first.id
        });
      }

      return null;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${e.toString()}');
    }
  }

  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–∏—Ç–∏–∏
  static Future<Map<String, dynamic>> generateDevelopmentReport(String childId) async {
    try {
      final child = await getChild(childId);
      if (child == null) {
        throw Exception('–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      final ageMonths = DateTime.now().difference(child.birthDate).inDays ~/ 30;

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –æ–±–ª–∞—Å—Ç—è–º
      final progressByArea = <DevelopmentArea, DevelopmentProgress?>{};
      for (final area in DevelopmentArea.values) {
        progressByArea[area] = await getLatestProgressByArea(childId, area);
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
      final monthAgo = DateTime.now().subtract(const Duration(days: 30));
      final recentCompletions = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('activity_completions')
          .where('childId', isEqualTo: childId)
          .where('completionDate', isGreaterThan: Timestamp.fromDate(monthAgo))
          .get();

      final completions = recentCompletions.docs
          .map((doc) => ActivityCompletion.fromJson({...doc.data(), 'id': doc.id}))
          .toList();

      // –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
      final areaScores = <String, double>{};
      final recommendations = <String>[];

      progressByArea.forEach((area, progress) {
        if (progress != null) {
          areaScores[area.displayName] = progress.progressScore;
          
          if (progress.progressScore < 60) {
            recommendations.add('–ë–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è ${area.displayName.toLowerCase()}');
          }
        }
      });

      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–∑–≤–∏—Ç—É—é –∏ –Ω–∞–∏–º–µ–Ω–µ–µ —Ä–∞–∑–≤–∏—Ç—É—é –æ–±–ª–∞—Å—Ç–∏
      String? strongestArea;
      String? weakestArea;
      
      if (areaScores.isNotEmpty) {
        strongestArea = areaScores.entries.reduce((a, b) => a.value > b.value ? a : b).key;
        weakestArea = areaScores.entries.reduce((a, b) => a.value < b.value ? a : b).key;
      }

      return {
        'childAge': ageMonths,
        'assessmentDate': DateTime.now().toIso8601String(),
        'areaScores': areaScores,
        'strongestArea': strongestArea,
        'weakestArea': weakestArea,
        'recentActivitiesCount': completions.length,
        'averageRating': completions.isNotEmpty 
            ? completions.map((c) => c.averageRating).reduce((a, b) => a + b) / completions.length
            : 0.0,
        'recommendations': recommendations,
        'totalActivities': await _getTotalActivitiesForAge(ageMonths),
        'completedActivities': completions.where((c) => c.wasCompleted).length,
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
  static Future<int> _getTotalActivitiesForAge(int ageMonths) async {
    try {
      final activities = await getActivitiesForAge(ageMonths);
      return activities.length;
    } catch (e) {
      return 0;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  static Future<void> createDefaultDevelopmentActivities() async {
    try {
      final defaultActivities = [
        // –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        DevelopmentActivity(
          id: '',
          title: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º',
          description: '–£—á–∏–º —Ä–µ–±–µ–Ω–∫–∞ —Ä–∞–∑–ª–∏—á–∞—Ç—å –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ü–≤–µ—Ç–∞–º',
          area: DevelopmentArea.cognitive,
          difficulty: ActivityDifficulty.easy,
          ageRange: AgeRange(minMonths: 18, maxMonths: 36),
          durationMinutes: 15,
          materials: ['–¶–≤–µ—Ç–Ω—ã–µ –∫—É–±–∏–∫–∏', '–ö–æ—Ä–∑–∏–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤'],
          steps: [
            ActivityStep(
              stepNumber: 1,
              instruction: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É–±–∏–∫–∏ —Ç—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤',
              estimatedMinutes: 2,
            ),
            ActivityStep(
              stepNumber: 2,
              instruction: '–ü–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–±–µ–Ω–∫—É, –∫–∞–∫ –∫–ª–∞—Å—Ç—å –∫—É–±–∏–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–∫–∏ —Ç–æ–≥–æ –∂–µ —Ü–≤–µ—Ç–∞',
              estimatedMinutes: 5,
              tip: '–ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞',
            ),
            ActivityStep(
              stepNumber: 3,
              instruction: '–ü—É—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–∞–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
              estimatedMinutes: 8,
            ),
          ],
          tips: ['–•–≤–∞–ª–∏—Ç–µ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä', '–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞'],
          benefits: ['–†–∞–∑–≤–∏—Ç–∏–µ —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏—è', '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', '–ú–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞'],
          variations: ['–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ'],
          imageUrls: [],
          tags: ['—Ü–≤–µ—Ç–∞', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ª–æ–≥–∏–∫–∞'],
          isIndoor: true,
          requiresAdult: true,
          rating: 4.5,
          timesCompleted: 0,
          isFavorite: false,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),

        // –ú–æ—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        DevelopmentActivity(
          id: '',
          title: '–†–∏—Å–æ–≤–∞–Ω–∏–µ –ø–∞–ª—å—á–∏–∫–∞–º–∏',
          description: '–†–∞–∑–≤–∏—Ç–∏–µ –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ',
          area: DevelopmentArea.cognitive,
          difficulty: ActivityDifficulty.easy,
          ageRange: AgeRange(minMonths: 12, maxMonths: 24),
          durationMinutes: 20,
          materials: ['–ü–∞–ª—å—á–∏–∫–æ–≤—ã–µ –∫—Ä–∞—Å–∫–∏', '–ë–æ–ª—å—à–æ–π –ª–∏—Å—Ç –±—É–º–∞–≥–∏', '–í–ª–∞–∂–Ω—ã–µ —Å–∞–ª—Ñ–µ—Ç–∫–∏'],
          steps: [
            ActivityStep(
              stepNumber: 1,
              instruction: '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∏ –∫—Ä–∞—Å–∫–∏',
              estimatedMinutes: 3,
            ),
            ActivityStep(
              stepNumber: 2,
              instruction: '–ü–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–±–µ–Ω–∫—É, –∫–∞–∫ –º–∞–∫–∞—Ç—å –ø–∞–ª—å—á–∏–∫ –≤ –∫—Ä–∞—Å–∫—É',
              estimatedMinutes: 2,
            ),
            ActivityStep(
              stepNumber: 3,
              instruction: '–î–∞–π—Ç–µ —Ä–µ–±–µ–Ω–∫—É —Å–≤–æ–±–æ–¥–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å',
              estimatedMinutes: 15,
              tip: '–ü—É—Å—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å —Ü–≤–µ—Ç–∞–º–∏',
            ),
          ],
          tips: ['–ó–∞—â–∏—Ç–∏—Ç–µ –æ–¥–µ–∂–¥—É', '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
          benefits: ['–ú–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞', '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', '–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è'],
          variations: ['–†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–∏—Å—Ç–æ—á–∫–æ–π', '–û—Ç–ø–µ—á–∞—Ç–∫–∏ –ª–∞–¥–æ—à–µ–∫'],
          imageUrls: [],
          tags: ['—Ä–∏—Å–æ–≤–∞–Ω–∏–µ', '–º–æ—Ç–æ—Ä–∏–∫–∞', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
          isIndoor: true,
          requiresAdult: true,
          rating: 4.8,
          timesCompleted: 0,
          isFavorite: false,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),

        // –†–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        DevelopmentActivity(
          id: '',
          title: '–ß—Ç–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏',
          description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏ –∏ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ —á–µ—Ä–µ–∑ —á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥',
          area: DevelopmentArea.language,
          difficulty: ActivityDifficulty.easy,
          ageRange: AgeRange(minMonths: 6, maxMonths: 36),
          durationMinutes: 10,
          materials: ['–ö–Ω–∏–∂–∫–∏ —Å —è—Ä–∫–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏', '–£–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'],
          steps: [
            ActivityStep(
              stepNumber: 1,
              instruction: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–∂–∫—É —Å —è—Ä–∫–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏',
              estimatedMinutes: 1,
            ),
            ActivityStep(
              stepNumber: 2,
              instruction: '–ß–∏—Ç–∞–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏',
              estimatedMinutes: 7,
              tip: '–ú–µ–Ω—è–π—Ç–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
            ),
            ActivityStep(
              stepNumber: 3,
              instruction: '–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö',
              estimatedMinutes: 2,
            ),
          ],
          tips: ['–ß–∏—Ç–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ', '–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏'],
          benefits: ['–†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è', '–õ—é–±–æ–≤—å –∫ —á—Ç–µ–Ω–∏—é'],
          variations: ['–ü–µ–Ω–∏–µ –ø–µ—Å–µ–Ω–æ–∫', '–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å–∫–∞–∑–æ–∫'],
          imageUrls: [],
          tags: ['—á—Ç–µ–Ω–∏–µ', '—Ä–µ—á—å', '–∫–Ω–∏–≥–∏'],
          isIndoor: true,
          requiresAdult: true,
          rating: 4.9,
          timesCompleted: 0,
          isFavorite: false,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
      ];

      for (final activity in defaultActivities) {
        await createDevelopmentActivity(activity);
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${e.toString()}');
    }
  }

  // ===== –ú–ï–¢–û–î–´ –≠–ö–°–¢–†–ï–ù–ù–´–• –°–ò–¢–£–ê–¶–ò–ô =====

  // ===== –≠–ö–°–¢–†–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´ =====

  // –°–æ–∑–¥–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  static Future<String> createEmergencyContact(EmergencyContact contact) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_contacts')
          .add(contact.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  static Stream<List<EmergencyContact>> getEmergencyContactsStream() {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('emergency_contacts')
        .where('isActive', isEqualTo: true)
        .orderBy('priority')
        .orderBy('type')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => EmergencyContact.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ —Ç–∏–ø—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
  static Future<List<EmergencyContact>> getContactsByType(EmergencyType type) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_contacts')
          .where('isActive', isEqualTo: true)
          .where('type', isEqualTo: type.name)
          .orderBy('priority')
          .get();

      return snapshot.docs
          .map((doc) => EmergencyContact.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç—ã
  static Future<List<EmergencyContact>> getAvailableNowContacts() async {
    try {
      final allContacts = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_contacts')
          .where('isActive', isEqualTo: true)
          .orderBy('priority')
          .get();

      final contacts = allContacts.docs
          .map((doc) => EmergencyContact.fromJson({...doc.data(), 'id': doc.id}))
          .where((contact) => contact.isAvailableNow)
          .toList();

      return contacts;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  static Future<void> updateEmergencyContact(EmergencyContact contact) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_contacts')
          .doc(contact.id)
          .update(contact.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  static Future<void> deleteEmergencyContact(String contactId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_contacts')
          .doc(contactId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${e.toString()}');
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–¥–ª—è –†–æ—Å—Å–∏–∏)
  static Future<void> createDefaultEmergencyContacts(String city) async {
    try {
      final defaultContacts = [
        EmergencyContact(
          id: '',
          name: '–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å',
          phone: '103',
          description: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å',
          type: EmergencyType.other,
          isActive: true,
          isAvailable24h: true,
          country: 'RU',
          city: city,
          priority: 1,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
        EmergencyContact(
          id: '',
          name: '–°–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
          phone: '112',
          description: '–ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±',
          type: EmergencyType.other,
          isActive: true,
          isAvailable24h: true,
          country: 'RU',
          city: city,
          priority: 2,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
        EmergencyContact(
          id: '',
          name: '–ü–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞',
          phone: '101',
          description: '–ü–æ–º–æ—â—å –ø—Ä–∏ –æ–∂–æ–≥–∞—Ö –∏ –ø–æ–∂–∞—Ä–∞—Ö',
          type: EmergencyType.burns,
          isActive: true,
          isAvailable24h: true,
          country: 'RU',
          city: city,
          priority: 3,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
        EmergencyContact(
          id: '',
          name: '–ü–æ–ª–∏—Ü–∏—è',
          phone: '102',
          description: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö',
          type: EmergencyType.injury,
          isActive: true,
          isAvailable24h: true,
          country: 'RU',
          city: city,
          priority: 4,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
        EmergencyContact(
          id: '',
          name: '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–π',
          phone: '8 (495) 628-16-87',
          description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è—Ö',
          type: EmergencyType.poisoning,
          isActive: true,
          isAvailable24h: true,
          country: 'RU',
          city: city,
          priority: 5,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
      ];

      for (final contact in defaultContacts) {
        await createEmergencyContact(contact);
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${e.toString()}');
    }
  }

  // ===== –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–ï–†–í–û–ô –ü–û–ú–û–©–ò =====

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏
  static Future<String> createFirstAidGuide(FirstAidGuide guide) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('first_aid_guides')
          .add(guide.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏
  static Stream<List<FirstAidGuide>> getFirstAidGuidesStream() {
    return FirebaseFirestore.instance
        .collection('first_aid_guides')
        .orderBy('type')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => FirstAidGuide.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ç–∏–ø—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
  static Future<List<FirstAidGuide>> getFirstAidGuidesByType(EmergencyType type) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('first_aid_guides')
          .where('type', isEqualTo: type.name)
          .get();

      return snapshot.docs
          .map((doc) => FirstAidGuide.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±–µ–Ω–∫–∞
  static Future<List<FirstAidGuide>> getFirstAidGuidesForAge(int ageMonths) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('first_aid_guides')
          .get();

      final guides = snapshot.docs
          .map((doc) => FirstAidGuide.fromJson({...doc.data(), 'id': doc.id}))
          .where((guide) => guide.ageRange.isApplicableForAge(ageMonths))
          .toList();

      return guides;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞: ${e.toString()}');
    }
  }

  // ===== –ó–ê–ü–ò–°–ò –≠–ö–°–¢–†–ï–ù–ù–´–• –°–õ–£–ß–ê–ï–í =====

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è
  static Future<String> createEmergencyRecord(EmergencyRecord record) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_records')
          .add(record.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  static Stream<List<EmergencyRecord>> getEmergencyRecordsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('emergency_records')
        .where('childId', isEqualTo: childId)
        .orderBy('incidentDateTime', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => EmergencyRecord.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
  static Future<List<EmergencyRecord>> getEmergencyRecordsByType(
    String childId, 
    EmergencyType type
  ) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_records')
          .where('childId', isEqualTo: childId)
          .where('type', isEqualTo: type.name)
          .orderBy('incidentDateTime', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => EmergencyRecord.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø—É: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è
  static Future<void> updateEmergencyRecord(EmergencyRecord record) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_records')
          .doc(record.id)
          .update(record.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è
  static Future<void> deleteEmergencyRecord(String recordId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_records')
          .doc(recordId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  static Future<Map<String, dynamic>> getEmergencyStats(String childId) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('emergency_records')
          .where('childId', isEqualTo: childId)
          .get();

      final records = snapshot.docs
          .map((doc) => EmergencyRecord.fromJson({...doc.data(), 'id': doc.id}))
          .toList();

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
      final typeStats = <String, int>{};
      for (final record in records) {
        typeStats[record.type.displayName] = (typeStats[record.type.displayName] ?? 0) + 1;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
      final monthlyStats = <String, int>{};
      for (final record in records) {
        final monthKey = '${record.incidentDateTime.year}-${record.incidentDateTime.month.toString().padLeft(2, '0')}';
        monthlyStats[monthKey] = (monthlyStats[monthKey] ?? 0) + 1;
      }

      final hospitalizations = records.where((r) => r.wasHospitalized).length;
      final withMedicalContact = records.where((r) => r.contactsCalled.isNotEmpty).length;

      return {
        'totalRecords': records.length,
        'hospitalizations': hospitalizations,
        'withMedicalContact': withMedicalContact,
        'typeStats': typeStats,
        'monthlyStats': monthlyStats,
        'mostCommonType': typeStats.isNotEmpty 
            ? typeStats.entries.reduce((a, b) => a.value > b.value ? a : b).key
            : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        'lastIncident': records.isNotEmpty 
            ? records.first.formattedIncidentDate 
            : '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π',
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.toString()}');
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏
  static Future<void> createDefaultFirstAidGuides() async {
    try {
      final defaultGuides = [
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏ —É–¥—É—à—å–µ
        FirstAidGuide(
          id: '',
          type: EmergencyType.choking,
          title: '–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ —É–¥—É—à—å–µ —É –¥–µ—Ç–µ–π',
          shortDescription: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π',
          steps: [
            FirstAidStep(
              stepNumber: 1,
              instruction: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ—Ç —Ä–µ–±–µ–Ω–∫–∞ - —É–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–∞–ª—å—Ü–µ–º',
              estimatedSeconds: 10,
              isCritical: true,
              tip: '–ù–ï –∑–∞—Å–æ–≤—ã–≤–∞–π—Ç–µ –ø–∞–ª–µ—Ü —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ',
            ),
            FirstAidStep(
              stepNumber: 2,
              instruction: '–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –ª–∏—Ü–æ–º –≤–Ω–∏–∑, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –≥–æ–ª–æ–≤—É',
              estimatedSeconds: 5,
              isCritical: true,
            ),
            FirstAidStep(
              stepNumber: 3,
              instruction: '–°–¥–µ–ª–∞–π—Ç–µ 5 —É–¥–∞—Ä–æ–≤ –º–µ–∂–¥—É –ª–æ–ø–∞—Ç–∫–∞–º–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –ª–∞–¥–æ–Ω–∏',
              estimatedSeconds: 15,
              isCritical: true,
              tip: '–£–¥–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑–∫–∏–º–∏, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–º–∏',
            ),
            FirstAidStep(
              stepNumber: 4,
              instruction: '–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏ —Å–¥–µ–ª–∞–π—Ç–µ 5 —Ç–æ–ª—á–∫–æ–≤ –≤ –≥—Ä—É–¥—å',
              estimatedSeconds: 15,
              isCritical: true,
            ),
            FirstAidStep(
              stepNumber: 5,
              instruction: '–ù–ï–ú–ï–î–õ–ï–ù–ù–û –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å!',
              estimatedSeconds: 10,
              isCritical: true,
            ),
          ],
          warningsSigns: [
            '–†–µ–±–µ–Ω–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –¥—ã—à–∞—Ç—å –∏–ª–∏ –∫–∞—à–ª—è—Ç—å',
            '–õ–∏—Ü–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–Ω–∏–º',
            '–†–µ–±–µ–Ω–æ–∫ —Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ',
            '–•–≤–∞—Ç–∞–µ—Ç—Å—è –∑–∞ –≥–æ—Ä–ª–æ',
          ],
          doList: [
            '–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
            '–î–µ–π—Å—Ç–≤—É–π—Ç–µ –±—ã—Å—Ç—Ä–æ –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ',
            '–í—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ –ø—Ä–∏–µ–∑–¥–∞ —Å–∫–æ—Ä–æ–π',
          ],
          dontList: [
            '–ù–ï –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏',
            '–ù–ï –∑–∞—Å–æ–≤—ã–≤–∞–π—Ç–µ –ø–∞–ª—å—Ü—ã –≥–ª—É–±–æ–∫–æ –≤ —Ä–æ—Ç',
            '–ù–ï –¥–∞–≤–∞–π—Ç–µ –≤–æ–¥—É',
            '–ù–ï –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ',
          ],
          imageUrls: [],
          ageRange: AgeRange(minMonths: 0, maxMonths: 72),
          isVerifiedByDoctor: true,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),

        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        FirstAidGuide(
          id: '',
          type: EmergencyType.fever,
          title: '–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ',
          shortDescription: '–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤—ã—à–µ 38.5¬∞C —É —Ä–µ–±–µ–Ω–∫–∞',
          steps: [
            FirstAidStep(
              stepNumber: 1,
              instruction: '–ò–∑–º–µ—Ä—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–æ—á–Ω–æ (—Ä–µ–∫—Ç–∞–ª—å–Ω–æ –∏–ª–∏ –≤ —É—Ö–µ)',
              estimatedSeconds: 30,
              isCritical: false,
            ),
            FirstAidStep(
              stepNumber: 2,
              instruction: '–†–∞–∑–¥–µ–Ω—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–æ –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è',
              estimatedSeconds: 60,
              isCritical: false,
              tip: '–ü–µ—Ä–µ–≥—Ä–µ–≤ –æ–ø–∞—Å–µ–Ω –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ',
            ),
            FirstAidStep(
              stepNumber: 3,
              instruction: '–î–∞–π—Ç–µ –∂–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–µ–µ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–µ—Å—É —Ä–µ–±–µ–Ω–∫–∞',
              estimatedSeconds: 120,
              isCritical: true,
              tip: '–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª –∏–ª–∏ –∏–±—É–ø—Ä–æ—Ñ–µ–Ω –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
            ),
            FirstAidStep(
              stepNumber: 4,
              instruction: '–û–±—Ç–∏—Ä–∞–π—Ç–µ —Ç–µ–ª–æ –≤–ª–∞–∂–Ω–æ–π —Ç–∫–∞–Ω—å—é (–Ω–µ –ª–µ–¥—è–Ω–æ–π –≤–æ–¥–æ–π)',
              estimatedSeconds: 300,
              isCritical: false,
            ),
            FirstAidStep(
              stepNumber: 5,
              instruction: '–í—ã–∑–æ–≤–∏—Ç–µ –≤—Ä–∞—á–∞, –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ 39¬∞C –∏–ª–∏ —É –º–∞–ª—ã—à–∞ –¥–æ 3 –º–µ—Å—è—Ü–µ–≤',
              estimatedSeconds: 60,
              isCritical: true,
            ),
          ],
          warningsSigns: [
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ 40¬∞C',
            '–°—É–¥–æ—Ä–æ–≥–∏',
            '–ó–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
            '–†–µ–±–µ–Ω–æ–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç',
            '–°—ã–ø—å –Ω–∞ —Ç–µ–ª–µ',
          ],
          doList: [
            '–î–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∂–∏–¥–∫–æ—Å—Ç–∏',
            '–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É',
            '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–µ–±–µ–Ω–∫–∞',
            '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
          ],
          dontList: [
            '–ù–ï –∫—É—Ç–∞–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞',
            '–ù–ï –æ–±—Ç–∏—Ä–∞–π—Ç–µ —Å–ø–∏—Ä—Ç–æ–º',
            '–ù–ï –¥–∞–≤–∞–π—Ç–µ –∞—Å–ø–∏—Ä–∏–Ω –¥–µ—Ç—è–º',
            '–ù–ï –∫—É–ø–∞–π—Ç–µ –≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–µ',
          ],
          imageUrls: [],
          ageRange: AgeRange(minMonths: 0, maxMonths: 72),
          isVerifiedByDoctor: true,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
      ];

      for (final guide in defaultGuides) {
        await createFirstAidGuide(guide);
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ${e.toString()}');
    }
  }

  // ===== –ú–ï–¢–û–î–´ –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø =====

  // ===== –î–ï–¢–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–†–ï–ù–ò–Ø –†–û–°–¢–ê =====

  // –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  static Future<String> createDetailedGrowthMeasurement(DetailedGrowthMeasurement measurement) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('detailed_growth_measurements')
          .add(measurement.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<DetailedGrowthMeasurement>> getDetailedGrowthMeasurementsStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('detailed_growth_measurements')
        .where('childId', isEqualTo: childId)
        .orderBy('measurementDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DetailedGrowthMeasurement.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
  static Stream<List<DetailedGrowthMeasurement>> getDetailedGrowthMeasurementsByTypeStream(
    String childId, 
    GrowthMeasurementType type
  ) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('detailed_growth_measurements')
        .where('childId', isEqualTo: childId)
        .where('type', isEqualTo: type.name)
        .orderBy('measurementDate', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DetailedGrowthMeasurement.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
  static Future<Map<GrowthMeasurementType, DetailedGrowthMeasurement>> getLatestMeasurements(String childId) async {
    try {
      final result = <GrowthMeasurementType, DetailedGrowthMeasurement>{};
      
      for (final type in GrowthMeasurementType.values) {
        if (type == GrowthMeasurementType.other) continue;
        
        final snapshot = await FirebaseFirestore.instance
            .collection('users')
            .doc(FirebaseService.currentUserId)
            .collection('detailed_growth_measurements')
            .where('childId', isEqualTo: childId)
            .where('type', isEqualTo: type.name)
            .orderBy('measurementDate', descending: true)
            .limit(1)
            .get();
        
        if (snapshot.docs.isNotEmpty) {
          final measurement = DetailedGrowthMeasurement.fromJson({
            ...snapshot.docs.first.data(),
            'id': snapshot.docs.first.id
          });
          result[type] = measurement;
        }
      }
      
      return result;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  static Future<void> updateDetailedGrowthMeasurement(DetailedGrowthMeasurement measurement) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('detailed_growth_measurements')
          .doc(measurement.id)
          .update(measurement.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  static Future<void> deleteDetailedGrowthMeasurement(String measurementId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('detailed_growth_measurements')
          .doc(measurementId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${e.toString()}');
    }
  }

  // ===== –í–ï–•–ò –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –≤–µ—Ö—É —Ä–∞–∑–≤–∏—Ç–∏—è
  static Future<String> createPhysicalMilestone(PhysicalMilestone milestone) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('physical_milestones')
          .add(milestone.toJson());
      
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ö–∏ —Ä–∞–∑–≤–∏—Ç–∏—è: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ö–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Stream<List<PhysicalMilestone>> getPhysicalMilestonesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('physical_milestones')
        .where('childId', isEqualTo: childId)
        .orderBy('typicalAgeMonths', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => PhysicalMilestone.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ö–∏ –ø–æ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
  static Stream<List<PhysicalMilestone>> getPhysicalMilestonesByAreaStream(
    String childId, 
    DevelopmentArea area
  ) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('physical_milestones')
        .where('childId', isEqualTo: childId)
        .where('area', isEqualTo: area.name)
        .orderBy('typicalAgeMonths', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => PhysicalMilestone.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –≤–µ—Ö–∏
  static Stream<List<PhysicalMilestone>> getAchievedMilestonesStream(String childId) {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseService.currentUserId)
        .collection('physical_milestones')
        .where('childId', isEqualTo: childId)
        .where('status', isEqualTo: MilestoneStatus.achieved.name)
        .orderBy('achievedDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => PhysicalMilestone.fromJson({...doc.data(), 'id': doc.id}))
            .toList());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –≤–µ—Ö–∏
  static Future<List<PhysicalMilestone>> getOverdueMilestones(String childId, DateTime birthDate) async {
    try {
      final currentAgeMonths = DateTime.now().difference(birthDate).inDays ~/ 30;
      
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('physical_milestones')
          .where('childId', isEqualTo: childId)
          .where('status', whereIn: [MilestoneStatus.notAchieved.name, MilestoneStatus.inProgress.name])
          .get();

      return snapshot.docs
          .map((doc) => PhysicalMilestone.fromJson({...doc.data(), 'id': doc.id}))
          .where((milestone) => currentAgeMonths > milestone.maxAgeMonths)
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤–µ—Ö: ${e.toString()}');
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤–µ—Ö—É –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—É—é
  static Future<void> markMilestoneAchieved(
    String milestoneId, 
    DateTime achievedDate,
    {String? observedBy, String? notes}
  ) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('physical_milestones')
          .doc(milestoneId)
          .update({
            'status': MilestoneStatus.achieved.name,
            'achievedDate': Timestamp.fromDate(achievedDate),
            'observedBy': observedBy,
            'notes': notes,
            'updatedAt': FieldValue.serverTimestamp(),
          });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–µ—Ö–∏: ${e.toString()}');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ö—É —Ä–∞–∑–≤–∏—Ç–∏—è
  static Future<void> updatePhysicalMilestone(PhysicalMilestone milestone) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('physical_milestones')
          .doc(milestone.id)
          .update(milestone.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ö–∏ —Ä–∞–∑–≤–∏—Ç–∏—è: ${e.toString()}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –≤–µ—Ö—É —Ä–∞–∑–≤–∏—Ç–∏—è
  static Future<void> deletePhysicalMilestone(String milestoneId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseService.currentUserId)
          .collection('physical_milestones')
          .doc(milestoneId)
          .delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ö–∏ —Ä–∞–∑–≤–∏—Ç–∏—è: ${e.toString()}');
    }
  }

  // ===== –ê–ù–ê–õ–ò–ó –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø =====

  // –°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–û–ó –¥–∞–Ω–Ω—ã—Ö
  static Future<GrowthAnalysis> generateGrowthAnalysis(String childId, DateTime birthDate) async {
    try {
      final currentAgeMonths = DateTime.now().difference(birthDate).inDays ~/ 30;
      final child = await getChild(childId);
      
      if (child == null) {
        throw Exception('–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
      final latestMeasurements = await getLatestMeasurements(childId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
      final heightHistory = await getDetailedGrowthMeasurementsByTypeStream(
        childId, 
        GrowthMeasurementType.height
      ).first;
      
      final weightHistory = await getDetailedGrowthMeasurementsByTypeStream(
        childId, 
        GrowthMeasurementType.weight
      ).first;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—Ç–∏–ª–∏
      final currentPercentiles = <GrowthMeasurementType, double>{};
      final recommendations = <String>[];
      final concerns = <String>[];
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WHO –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      
      // –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
      if (latestMeasurements.containsKey(GrowthMeasurementType.height)) {
        final heightMeasurement = latestMeasurements[GrowthMeasurementType.height]!;
        final heightPercentile = _calculatePercentileFromWHO(
          heightMeasurement.value,
          currentAgeMonths,
          child.gender,
          GrowthMeasurementType.height,
        );
        currentPercentiles[GrowthMeasurementType.height] = heightPercentile;
        
        if (heightPercentile < 3) {
          concerns.add('–†–æ—Å—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã');
          recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–µ–¥–∏–∞—Ç—Ä–∞ –ø–æ –ø–æ–≤–æ–¥—É —Ä–æ—Å—Ç–∞');
        } else if (heightPercentile > 97) {
          recommendations.add('–í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç - –æ–±—ã—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–æ—Ä–º—ã');
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–∞
      if (latestMeasurements.containsKey(GrowthMeasurementType.weight)) {
        final weightMeasurement = latestMeasurements[GrowthMeasurementType.weight]!;
        final weightPercentile = _calculatePercentileFromWHO(
          weightMeasurement.value,
          currentAgeMonths,
          child.gender,
          GrowthMeasurementType.weight,
        );
        currentPercentiles[GrowthMeasurementType.weight] = weightPercentile;
        
        if (weightPercentile < 3) {
          concerns.add('–í–µ—Å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã');
          recommendations.add('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ–¥–∏–∞—Ç—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∏—Ç–∞–Ω–∏—è');
        } else if (weightPercentile > 97) {
          concerns.add('–í–µ—Å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –Ω–æ—Ä–º—ã');
          recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é');
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–æ—Å—Ç–∞
      final growthTrends = <GrowthMeasurementType, String>{};
      
      if (heightHistory.length >= 2) {
        final trend = _analyzeGrowthTrend(heightHistory);
        growthTrends[GrowthMeasurementType.height] = trend;
        
        if (trend == 'decreasing') {
          concerns.add('–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞');
          recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ');
        }
      }
      
      if (weightHistory.length >= 2) {
        final trend = _analyzeGrowthTrend(weightHistory);
        growthTrends[GrowthMeasurementType.weight] = trend;
        
        if (trend == 'decreasing') {
          concerns.add('–ü–æ—Ç–µ—Ä—è –≤–µ—Å–∞');
          recommendations.add('–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É');
        }
      }
      
      // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (recommendations.isEmpty && concerns.isEmpty) {
        recommendations.addAll([
          '–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ –Ω–æ—Ä–º–µ',
          '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
          '–û–±–µ—Å–ø–µ—á–∏–≤–∞–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        ]);
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª —Ä–∞–∑–≤–∏—Ç–∏—è
      double overallScore = 70; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—Ç–∏–ª–µ–π
      for (final percentile in currentPercentiles.values) {
        if (percentile >= 15 && percentile <= 85) {
          overallScore += 10; // –í –Ω–æ—Ä–º–µ
        } else if (percentile < 3 || percentile > 97) {
          overallScore -= 20; // –ö—Ä–∞–π–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        } else {
          overallScore -= 5; // –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        }
      }
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
      for (final trend in growthTrends.values) {
        if (trend == 'increasing') {
          overallScore += 5;
        } else if (trend == 'decreasing') {
          overallScore -= 15;
        }
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª –æ—Ç 0 –¥–æ 100
      overallScore = overallScore.clamp(0, 100);
      
      return GrowthAnalysis(
        childId: childId,
        analysisDate: DateTime.now(),
        currentAgeMonths: currentAgeMonths,
        recentMeasurements: latestMeasurements.values.toList(),
        currentPercentiles: currentPercentiles,
        growthTrends: growthTrends,
        recommendations: recommendations,
        concerns: concerns,
        overallGrowthScore: overallScore,
      );
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è: ${e.toString()}');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—Ç–∏–ª—è —á–µ—Ä–µ–∑ WHO –¥–∞–Ω–Ω—ã–µ
  static double _calculatePercentileFromWHO(
    double value,
    int ageMonths,
    String gender,
    GrowthMeasurementType type,
  ) {
    return WHOGrowthStandards.getPercentileForValue(
      value: value,
      ageMonths: ageMonths,
      gender: gender,
      measurementType: type,
    ).toDouble();
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ —Ä–æ—Å—Ç–∞
  static String _analyzeGrowthTrend(List<DetailedGrowthMeasurement> measurements) {
    if (measurements.length < 2) return 'stable';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    measurements.sort((a, b) => a.measurementDate.compareTo(b.measurementDate));
    
    final recent = measurements.take(3).toList();
    if (recent.length < 2) return 'stable';
    
    double trend = 0;
    for (int i = 1; i < recent.length; i++) {
      trend += recent[i].value - recent[i - 1].value;
    }
    
    if (trend > 0) return 'increasing';
    if (trend < 0) return 'decreasing';
    return 'stable';
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–µ—Ö–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
  static Future<void> generateStandardMilestones(String childId) async {
    try {
      final standardMilestones = _getStandardMilestones(childId);
      
      for (final milestone in standardMilestones) {
        await createPhysicalMilestone(milestone);
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–µ—Ö: ${e.toString()}');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–µ—Ö —Ä–∞–∑–≤–∏—Ç–∏—è
  static List<PhysicalMilestone> _getStandardMilestones(String childId) {
    final now = DateTime.now();
    
    return [
      // –ö—Ä—É–ø–Ω–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–î–µ—Ä–∂–∏—Ç –≥–æ–ª–æ–≤—É',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥–æ–ª–æ–≤—É –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 2,
        minAgeMonths: 1,
        maxAgeMonths: 4,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–∞ –Ω–∞ —Å–ø–∏–Ω—É –∏ –æ–±—Ä–∞—Ç–Ω–æ',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 4,
        minAgeMonths: 3,
        maxAgeMonths: 6,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–°–∏–¥–∏—Ç –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç —Å–∏–¥–µ—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 6,
        minAgeMonths: 5,
        maxAgeMonths: 8,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–ü–æ–ª–∑–∞–µ—Ç –Ω–∞ —á–µ—Ç–≤–µ—Ä–µ–Ω—å–∫–∞—Ö',
        description: '–†–µ–±–µ–Ω–æ–∫ –ø–æ–ª–∑–∞–µ—Ç –Ω–∞ —Ä—É–∫–∞—Ö –∏ –∫–æ–ª–µ–Ω—è—Ö',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 8,
        minAgeMonths: 6,
        maxAgeMonths: 10,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–°—Ç–æ–∏—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å, –¥–µ—Ä–∂–∞—Å—å –∑–∞ –æ–ø–æ—Ä—É',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 9,
        minAgeMonths: 7,
        maxAgeMonths: 12,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–•–æ–¥–∏—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ',
        description: '–†–µ–±–µ–Ω–æ–∫ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 12,
        minAgeMonths: 9,
        maxAgeMonths: 18,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      
      // –ú–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–•–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç —Å—Ö–≤–∞—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤—Å–µ–π —Ä—É–∫–æ–π',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 4,
        minAgeMonths: 3,
        maxAgeMonths: 6,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –æ–¥–Ω–æ–π —Ä—É–∫–∏ –≤ –¥—Ä—É–≥—É—é',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 7,
        minAgeMonths: 5,
        maxAgeMonths: 9,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–ü–∏–Ω—Ü–µ—Ç–Ω—ã–π –∑–∞—Ö–≤–∞—Ç',
        description: '–†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –º–µ–ª–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –±–æ–ª—å—à–∏–º –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–∞–º–∏',
        area: DevelopmentArea.motor,
        typicalAgeMonths: 9,
        minAgeMonths: 7,
        maxAgeMonths: 12,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      
      // –†–µ—á—å –∏ —è–∑—ã–∫
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–ü–µ—Ä–≤—ã–µ –∑–≤—É–∫–∏',
        description: '–†–µ–±–µ–Ω–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –ø–µ—Ä–≤—ã–µ –∑–≤—É–∫–∏ –∏ —Å–ª–æ–≥–∏',
        area: DevelopmentArea.language,
        typicalAgeMonths: 3,
        minAgeMonths: 2,
        maxAgeMonths: 5,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–ü–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞',
        description: '–†–µ–±–µ–Ω–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –ø–µ—Ä–≤—ã–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞',
        area: DevelopmentArea.language,
        typicalAgeMonths: 12,
        minAgeMonths: 8,
        maxAgeMonths: 15,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      
      // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —É–ª—ã–±–∫–∞',
        description: '–†–µ–±–µ–Ω–æ–∫ —É–ª—ã–±–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—â–µ–Ω–∏–µ',
        area: DevelopmentArea.social,
        typicalAgeMonths: 2,
        minAgeMonths: 1,
        maxAgeMonths: 3,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
      PhysicalMilestone(
        id: '',
        childId: childId,
        title: '–£–∑–Ω–∞–µ—Ç –±–ª–∏–∑–∫–∏—Ö',
        description: '–†–µ–±–µ–Ω–æ–∫ —É–∑–Ω–∞–µ—Ç –∏ –ø–æ-—Ä–∞–∑–Ω–æ–º—É —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –ª—é–¥–µ–π',
        area: DevelopmentArea.social,
        typicalAgeMonths: 6,
        minAgeMonths: 4,
        maxAgeMonths: 8,
        status: MilestoneStatus.notAchieved,
        photos: [],
        createdAt: now,
        updatedAt: now,
      ),
    ];
  }

  // ==================== –°–û–¶–ò–ê–õ–¨–ù–´–ï –í–ï–•–ò ====================
  
  // –°–æ–∑–¥–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –≤–µ—Ö—É
  Future<void> createSocialMilestone(SocialMilestone milestone) async {
    try {
      final docRef = _firestore.collection('social_milestones').doc();
      final newMilestone = SocialMilestone(
        id: docRef.id,
        childId: milestone.childId,
        title: milestone.title,
        description: milestone.description,
        type: milestone.type,
        socialArea: milestone.socialArea,
        emotionalArea: milestone.emotionalArea,
        typicalAgeMonths: milestone.typicalAgeMonths,
        acceptableRangeStart: milestone.acceptableRangeStart,
        acceptableRangeEnd: milestone.acceptableRangeEnd,
        currentLevel: milestone.currentLevel,
        achievedDate: milestone.achievedDate,
        lastObservedDate: milestone.lastObservedDate,
        observationNotes: milestone.observationNotes,
        supportingActivities: milestone.supportingActivities,
        isDelayed: milestone.isDelayed,
        requiresAttention: milestone.requiresAttention,
        createdAt: milestone.createdAt,
        updatedAt: DateTime.now(),
      );
      
      await docRef.set(newMilestone.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –≤–µ—Ö–∏: ${e.toString()}');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–µ—Ö —Ä–µ–±–µ–Ω–∫–∞
  Stream<List<SocialMilestone>> getSocialMilestonesStream(String childId) {
    return _firestore
        .collection('social_milestones')
        .where('childId', isEqualTo: childId)
        .orderBy('typicalAgeMonths')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => SocialMilestone.fromJson(doc.data()))
            .toList());
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏ –ø–æ —Ç–∏–ø—É
  Stream<List<SocialMilestone>> getSocialMilestonesByType(String childId, MilestoneType type) {
    return _firestore
        .collection('social_milestones')
        .where('childId', isEqualTo: childId)
        .where('type', isEqualTo: type.name)
        .orderBy('typicalAgeMonths')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => SocialMilestone.fromJson(doc.data()))
            .toList());
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏ –ø–æ –æ–±–ª–∞—Å—Ç–∏
  Stream<List<SocialMilestone>> getSocialMilestonesByArea(String childId, {SocialArea? socialArea, EmotionalArea? emotionalArea}) {
    Query query = _firestore
        .collection('social_milestones')
        .where('childId', isEqualTo: childId);
    
    if (socialArea != null) {
      query = query.where('socialArea', isEqualTo: socialArea.name);
    }
    if (emotionalArea != null) {
      query = query.where('emotionalArea', isEqualTo: emotionalArea.name);
    }
    
    return query
        .orderBy('typicalAgeMonths')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .where((doc) => doc.data() != null)
            .map((doc) => SocialMilestone.fromJson(doc.data()! as Map<String, dynamic>))
            .toList());
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏
  Stream<List<SocialMilestone>> getAchievedSocialMilestones(String childId) {
    return _firestore
        .collection('social_milestones')
        .where('childId', isEqualTo: childId)
        .where('currentLevel', whereIn: [AchievementLevel.achieved.name, AchievementLevel.mastered.name])
        .orderBy('achievedDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => SocialMilestone.fromJson(doc.data()))
            .toList());
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏
  Future<List<SocialMilestone>> getDelayedSocialMilestones(String childId) async {
    try {
      final snapshot = await _firestore
          .collection('social_milestones')
          .where('childId', isEqualTo: childId)
          .where('isDelayed', isEqualTo: true)
          .orderBy('typicalAgeMonths')
          .get();
      
      return snapshot.docs
          .map((doc) => SocialMilestone.fromJson(doc.data()))
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –≤–µ—Ö: ${e.toString()}');
    }
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –≤–µ—Ö–∏
  Future<void> updateSocialMilestoneLevel(String milestoneId, AchievementLevel newLevel, {String? notes}) async {
    try {
      final updateData = <String, dynamic>{
        'currentLevel': newLevel.name,
        'updatedAt': FieldValue.serverTimestamp(),
      };
      
      if (newLevel == AchievementLevel.achieved || newLevel == AchievementLevel.mastered) {
        updateData['achievedDate'] = FieldValue.serverTimestamp();
      }
      
      if (notes != null && notes.isNotEmpty) {
        updateData['observationNotes'] = FieldValue.arrayUnion([notes]);
        updateData['lastObservedDate'] = FieldValue.serverTimestamp();
      }
      
      await _firestore
          .collection('social_milestones')
          .doc(milestoneId)
          .update(updateData);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–µ—Ö–∏: ${e.toString()}');
    }
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
  Future<void> createBehaviorObservation(BehaviorObservation observation) async {
    try {
      final docRef = _firestore.collection('behavior_observations').doc();
      final newObservation = BehaviorObservation(
        id: docRef.id,
        childId: observation.childId,
        milestoneId: observation.milestoneId,
        observationDate: observation.observationDate,
        behavior: observation.behavior,
        context: observation.context,
        observedLevel: observation.observedLevel,
        triggers: observation.triggers,
        supportingFactors: observation.supportingFactors,
        observerNotes: observation.observerNotes,
        photoUrls: observation.photoUrls,
        createdAt: DateTime.now(),
      );
      
      await docRef.set(newObservation.toJson());
      
      // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –≤–µ—Ö–µ
      await _firestore
          .collection('social_milestones')
          .doc(observation.milestoneId)
          .update({
            'lastObservedDate': FieldValue.serverTimestamp(),
            'observationNotes': FieldValue.arrayUnion([observation.observerNotes])
          });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: ${e.toString()}');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–µ—Ö–∏
  Stream<List<BehaviorObservation>> getBehaviorObservationsStream(String milestoneId) {
    return _firestore
        .collection('behavior_observations')
        .where('milestoneId', isEqualTo: milestoneId)
        .orderBy('observationDate', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => BehaviorObservation.fromJson(doc.data()))
            .toList());
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
  Stream<List<BehaviorObservation>> getChildBehaviorObservationsStream(String childId) {
    return _firestore
        .collection('behavior_observations')
        .where('childId', isEqualTo: childId)
        .orderBy('observationDate', descending: true)
        .limit(50)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => BehaviorObservation.fromJson(doc.data()))
            .toList());
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
  Future<SocialDevelopmentProgress> generateSocialDevelopmentAnalysis(String childId) async {
    try {
      final milestonesSnapshot = await _firestore
          .collection('social_milestones')
          .where('childId', isEqualTo: childId)
          .get();
      
      final milestones = milestonesSnapshot.docs
          .map((doc) => SocialMilestone.fromJson(doc.data()))
          .toList();
      
      if (milestones.isEmpty) {
        throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –æ–±–ª–∞—Å—Ç—è–º
      final socialAreaScores = <SocialArea, double>{};
      for (final area in SocialArea.values) {
        final areaMilestones = milestones.where((m) => m.socialArea == area).toList();
        if (areaMilestones.isNotEmpty) {
          final achievedCount = areaMilestones.where((m) => 
            m.currentLevel == AchievementLevel.achieved || 
            m.currentLevel == AchievementLevel.mastered
          ).length;
          socialAreaScores[area] = (achievedCount / areaMilestones.length) * 100;
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–±–ª–∞—Å—Ç—è–º
      final emotionalAreaScores = <EmotionalArea, double>{};
      for (final area in EmotionalArea.values) {
        final areaMilestones = milestones.where((m) => m.emotionalArea == area).toList();
        if (areaMilestones.isNotEmpty) {
          final achievedCount = areaMilestones.where((m) => 
            m.currentLevel == AchievementLevel.achieved || 
            m.currentLevel == AchievementLevel.mastered
          ).length;
          emotionalAreaScores[area] = (achievedCount / areaMilestones.length) * 100;
        }
      }
      
      // –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      final totalMilestones = milestones.length;
      final achievedMilestones = milestones.where((m) => 
        m.currentLevel == AchievementLevel.achieved || 
        m.currentLevel == AchievementLevel.mastered
      ).length;
      final delayedMilestones = milestones.where((m) => m.isDelayed).length;
      
      final overallSocialScore = socialAreaScores.values.isNotEmpty 
        ? socialAreaScores.values.reduce((a, b) => a + b) / socialAreaScores.length
        : 0.0;
      final overallEmotionalScore = emotionalAreaScores.values.isNotEmpty
        ? emotionalAreaScores.values.reduce((a, b) => a + b) / emotionalAreaScores.length
        : 0.0;
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
      final strengths = <String>[];
      final areasForDevelopment = <String>[];
      
      socialAreaScores.forEach((area, score) {
        if (score >= 80) {
          strengths.add(_getSocialAreaDisplayName(area));
        } else if (score < 50) {
          areasForDevelopment.add(_getSocialAreaDisplayName(area));
        }
      });
      
      emotionalAreaScores.forEach((area, score) {
        if (score >= 80) {
          strengths.add(_getEmotionalAreaDisplayName(area));
        } else if (score < 50) {
          areasForDevelopment.add(_getEmotionalAreaDisplayName(area));
        }
      });
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final recommendations = _generateSocialRecommendations(
        socialAreaScores, 
        emotionalAreaScores, 
        milestones
      );
      
      // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤–µ—Ö–∏
      final child = await getChild(childId);
      final childAgeMonths = child != null ? _calculateAgeInMonths(child.birthDate) : 0;
      final upcomingMilestones = milestones
          .where((m) => 
            m.currentLevel == AchievementLevel.notStarted &&
            m.typicalAgeMonths <= childAgeMonths + 6)
          .map((m) => m.title)
          .toList();
      
      final analysis = SocialDevelopmentProgress(
        id: '',
        childId: childId,
        analysisDate: DateTime.now(),
        socialAreaScores: socialAreaScores,
        emotionalAreaScores: emotionalAreaScores,
        overallSocialScore: overallSocialScore,
        overallEmotionalScore: overallEmotionalScore,
        strengths: strengths,
        areasForDevelopment: areasForDevelopment,
        recommendations: recommendations,
        totalMilestones: totalMilestones,
        achievedMilestones: achievedMilestones,
        delayedMilestones: delayedMilestones,
        upcomingMilestones: upcomingMilestones,
        createdAt: DateTime.now(),
      );
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
      await _saveSocialDevelopmentAnalysis(analysis);
      
      return analysis;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è: ${e.toString()}');
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
  Future<void> _saveSocialDevelopmentAnalysis(SocialDevelopmentProgress analysis) async {
    try {
      final docRef = _firestore.collection('social_development_analyses').doc();
      final analysisWithId = SocialDevelopmentProgress(
        id: docRef.id,
        childId: analysis.childId,
        analysisDate: analysis.analysisDate,
        socialAreaScores: analysis.socialAreaScores,
        emotionalAreaScores: analysis.emotionalAreaScores,
        overallSocialScore: analysis.overallSocialScore,
        overallEmotionalScore: analysis.overallEmotionalScore,
        strengths: analysis.strengths,
        areasForDevelopment: analysis.areasForDevelopment,
        recommendations: analysis.recommendations,
        totalMilestones: analysis.totalMilestones,
        achievedMilestones: analysis.achievedMilestones,
        delayedMilestones: analysis.delayedMilestones,
        upcomingMilestones: analysis.upcomingMilestones,
        createdAt: analysis.createdAt,
      );
      
      await docRef.set(analysisWithId.toJson());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: ${e.toString()}');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
  Stream<List<SocialDevelopmentProgress>> getSocialDevelopmentAnalysesStream(String childId) {
    return _firestore
        .collection('social_development_analyses')
        .where('childId', isEqualTo: childId)
        .orderBy('analysisDate', descending: true)
        .limit(10)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => SocialDevelopmentProgress.fromJson(doc.data()))
            .toList());
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
  Future<Map<String, dynamic>> getSocialDevelopmentStats(String childId) async {
    try {
      final milestonesSnapshot = await _firestore
          .collection('social_milestones')
          .where('childId', isEqualTo: childId)
          .get();
      
      final milestones = milestonesSnapshot.docs
          .map((doc) => SocialMilestone.fromJson(doc.data()))
          .toList();
      
      final observationsSnapshot = await _firestore
          .collection('behavior_observations')
          .where('childId', isEqualTo: childId)
          .get();
      
      final observations = observationsSnapshot.docs
          .map((doc) => BehaviorObservation.fromJson(doc.data()))
          .toList();
      
      final totalMilestones = milestones.length;
      final achievedMilestones = milestones.where((m) => 
        m.currentLevel == AchievementLevel.achieved || 
        m.currentLevel == AchievementLevel.mastered
      ).length;
      final totalObservations = observations.length;
      final recentObservations = observations.where((o) => 
        o.observationDate.isAfter(DateTime.now().subtract(const Duration(days: 30)))
      ).length;
      
      return {
        'totalMilestones': totalMilestones,
        'achievedMilestones': achievedMilestones,
        'progressPercentage': totalMilestones > 0 ? (achievedMilestones / totalMilestones) * 100 : 0,
        'totalObservations': totalObservations,
        'recentObservations': recentObservations,
        'delayedMilestones': milestones.where((m) => m.isDelayed).length,
        'attentionRequired': milestones.where((m) => m.requiresAttention).length,
      };
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.toString()}');
    }
  }
  
  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏
  Future<void> createStandardSocialMilestones(String childId) async {
    try {
      final standardMilestones = _getStandardSocialMilestones(childId);
      
      for (final milestone in standardMilestones) {
        await createSocialMilestone(milestone);
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–µ—Ö: ${e.toString()}');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏
  List<SocialMilestone> _getStandardSocialMilestones(String childId) {
    final now = DateTime.now();
    
    return [
      // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏ - –û–±—â–µ–Ω–∏–µ
      SocialMilestone(
        id: '',
        childId: childId,
        title: '–£–ª—ã–±–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç',
        description: '–†–µ–±–µ–Ω–æ–∫ —É–ª—ã–±–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —É–ª—ã–±–∫—É –≤–∑—Ä–æ—Å–ª–æ–≥–æ',
        type: MilestoneType.social,
        socialArea: SocialArea.communication,
        emotionalArea: null,
        typicalAgeMonths: 2,
        acceptableRangeStart: 1,
        acceptableRangeEnd: 4,
        currentLevel: AchievementLevel.notStarted,
        observationNotes: [],
        supportingActivities: ['–ò–≥—Ä—ã —Å –º–∏–º–∏–∫–æ–π', '–ü–µ—Å–µ–Ω–∫–∏', '–û–±—â–µ–Ω–∏–µ –ª–∏—Ü–æ–º –∫ –ª–∏—Ü—É'],
        isDelayed: false,
        requiresAttention: false,
        createdAt: now,
        updatedAt: now,
      ),
      SocialMilestone(
        id: '',
        childId: childId,
        title: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å',
        description: '–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ',
        type: MilestoneType.social,
        socialArea: SocialArea.communication,
        emotionalArea: null,
        typicalAgeMonths: 3,
        acceptableRangeStart: 2,
        acceptableRangeEnd: 5,
        currentLevel: AchievementLevel.notStarted,
        observationNotes: [],
        supportingActivities: ['–†–∞–∑–≥–æ–≤–æ—Ä—ã —Å —Ä–µ–±–µ–Ω–∫–æ–º', '–ü–µ–Ω–∏–µ –∫–æ–ª—ã–±–µ–ª—å–Ω—ã—Ö', '–ß—Ç–µ–Ω–∏–µ –≤—Å–ª—É—Ö'],
        isDelayed: false,
        requiresAttention: false,
        createdAt: now,
        updatedAt: now,
      ),
      
      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏ - –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ
      SocialMilestone(
        id: '',
        childId: childId,
        title: '–£–∑–Ω–∞–µ—Ç —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–µ',
        description: '–ü—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–≤–æ–µ–º—É –æ—Ç—Ä–∞–∂–µ–Ω–∏—é',
        type: MilestoneType.emotional,
        socialArea: null,
        emotionalArea: EmotionalArea.selfAwareness,
        typicalAgeMonths: 18,
        acceptableRangeStart: 15,
        acceptableRangeEnd: 24,
        currentLevel: AchievementLevel.notStarted,
        observationNotes: [],
        supportingActivities: ['–ò–≥—Ä—ã —Å –∑–µ—Ä–∫–∞–ª–æ–º', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–±–µ–Ω–∫–∞', '–ù–∞–∑—ã–≤–∞–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞'],
        isDelayed: false,
        requiresAttention: false,
        createdAt: now,
        updatedAt: now,
      ),
      
      // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ö–∏
      SocialMilestone(
        id: '',
        childId: childId,
        title: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º–ø–∞—Ç–∏—é',
        description: '–£—Ç–µ—à–∞–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–π –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∫–æ–≥–¥–∞ –æ–Ω–∏ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã',
        type: MilestoneType.combined,
        socialArea: SocialArea.empathy,
        emotionalArea: EmotionalArea.empathy,
        typicalAgeMonths: 24,
        acceptableRangeStart: 18,
        acceptableRangeEnd: 36,
        currentLevel: AchievementLevel.notStarted,
        observationNotes: [],
        supportingActivities: ['–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –æ–± —ç–º–æ—Ü–∏—è—Ö', '–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤'],
        isDelayed: false,
        requiresAttention: false,
        createdAt: now,
        updatedAt: now,
      ),
    ];
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  int _calculateAgeInMonths(DateTime birthDate) {
    final now = DateTime.now();
    final difference = now.difference(birthDate);
    return (difference.inDays / 30.44).round(); // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
  }

  String _getSocialAreaDisplayName(SocialArea area) {
    switch (area) {
      case SocialArea.communication:
        return '–û–±—â–µ–Ω–∏–µ';
      case SocialArea.cooperation:
        return '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ';
      case SocialArea.empathy:
        return '–≠–º–ø–∞—Ç–∏—è';
      case SocialArea.independence:
        return '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
      case SocialArea.friendship:
        return '–î—Ä—É–∂–±–∞';
      case SocialArea.familyBonds:
        return '–°–µ–º–µ–π–Ω—ã–µ —Å–≤—è–∑–∏';
      case SocialArea.publicBehavior:
        return '–ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ';
    }
  }
  
  String _getEmotionalAreaDisplayName(EmotionalArea area) {
    switch (area) {
      case EmotionalArea.selfAwareness:
        return '–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ';
      case EmotionalArea.emotionRecognition:
        return '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π';
      case EmotionalArea.emotionRegulation:
        return '–ö–æ–Ω—Ç—Ä–æ–ª—å —ç–º–æ—Ü–∏–π';
      case EmotionalArea.empathy:
        return '–≠–º–ø–∞—Ç–∏—è';
      case EmotionalArea.selfControl:
        return '–°–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å';
      case EmotionalArea.socialSkills:
        return '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏';
      case EmotionalArea.resilience:
        return '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å';
    }
  }
  
  List<String> _generateSocialRecommendations(
    Map<SocialArea, double> socialScores,
    Map<EmotionalArea, double> emotionalScores,
    List<SocialMilestone> milestones,
  ) {
    final recommendations = <String>[];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∏–∑–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    socialScores.forEach((area, score) {
      if (score < 50) {
        switch (area) {
          case SocialArea.communication:
            recommendations.add('–ë–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º, —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏, –ø–æ–π—Ç–µ –ø–µ—Å–Ω–∏');
            break;
          case SocialArea.cooperation:
            recommendations.add('–ò–≥—Ä–∞–π—Ç–µ –≤ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã, —É—á–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∏–≥—Ä—É—à–∫–∞–º–∏');
            break;
          case SocialArea.empathy:
            recommendations.add('–û–±—Å—É–∂–¥–∞–π—Ç–µ —ç–º–æ—Ü–∏–∏, —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –æ —á—É–≤—Å—Ç–≤–∞—Ö');
            break;
          case SocialArea.independence:
            recommendations.add('–ü–æ–æ—â—Ä—è–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö');
            break;
          case SocialArea.friendship:
            recommendations.add('–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ—Ç—å–º–∏');
            break;
          case SocialArea.familyBonds:
            recommendations.add('–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –±–æ–ª—å—à–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
            break;
          case SocialArea.publicBehavior:
            recommendations.add('–ß–∞—â–µ –±—ã–≤–∞–π—Ç–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö');
            break;
        }
      }
    });
    
    emotionalScores.forEach((area, score) {
      if (score < 50) {
        switch (area) {
          case EmotionalArea.selfAwareness:
            recommendations.add('–ò–≥—Ä–∞–π—Ç–µ —Å –∑–µ—Ä–∫–∞–ª–æ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ä–µ–±–µ–Ω–∫–∞');
            break;
          case EmotionalArea.emotionRecognition:
            recommendations.add('–ò–∑—É—á–∞–π—Ç–µ —ç–º–æ—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö, –≤ –∫–Ω–∏–≥–∞—Ö');
            break;
          case EmotionalArea.emotionRegulation:
            recommendations.add('–£—á–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∞–º —É—Å–ø–æ–∫–æ–µ–Ω–∏—è, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º');
            break;
          case EmotionalArea.empathy:
            recommendations.add('–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∏–≥—Ä—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏');
            break;
          case EmotionalArea.selfControl:
            recommendations.add('–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –æ–∂–∏–¥–∞–Ω–∏–µ, —É—á–∏—Ç–µ —Ç–µ—Ä–ø–µ–Ω–∏—é');
            break;
          case EmotionalArea.socialSkills:
            recommendations.add('–ú–æ–¥–µ–ª–∏—Ä—É–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ');
            break;
          case EmotionalArea.resilience:
            recommendations.add('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö, —É—á–∏—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏');
            break;
        }
      }
    });
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendations.isEmpty) {
      recommendations.addAll([
        '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ',
        '–ß–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –∏ –æ–±—Å—É–∂–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è',
        '–•–≤–∞–ª–∏—Ç–µ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ',
      ]);
    }
    
    return recommendations;
  }
}

// ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

// ==================== –ú–û–î–ï–õ–ò –°–û–¶–ò–ê–õ–¨–ù–´–• –í–ï–• ====================

// –û–±–ª–∞—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
enum SocialArea {
  communication,
  cooperation,
  empathy,
  independence,
  friendship,
  familyBonds,
  publicBehavior
}

// –û–±–ª–∞—Å—Ç–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
enum EmotionalArea {
  selfAwareness,
  emotionRecognition,
  emotionRegulation,
  empathy,
  selfControl,
  socialSkills,
  resilience
}

// –¢–∏–ø –≤–µ—Ö–∏
enum MilestoneType {
  social,
  emotional,
  combined
}

// –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
enum AchievementLevel {
  notStarted,
  beginning,
  developing,
  achieved,
  mastered
}

// –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ö–∞
class SocialMilestone {
  final String id;
  final String childId;
  final String title;
  final String description;
  final MilestoneType type;
  final SocialArea? socialArea;
  final EmotionalArea? emotionalArea;
  final int typicalAgeMonths;
  final int acceptableRangeStart;
  final int acceptableRangeEnd;
  final AchievementLevel currentLevel;
  final DateTime? achievedDate;
  final DateTime? lastObservedDate;
  final List<String> observationNotes;
  final List<String> supportingActivities;
  final bool isDelayed;
  final bool requiresAttention;
  final DateTime createdAt;
  final DateTime updatedAt;

  SocialMilestone({
    required this.id,
    required this.childId,
    required this.title,
    required this.description,
    required this.type,
    this.socialArea,
    this.emotionalArea,
    required this.typicalAgeMonths,
    required this.acceptableRangeStart,
    required this.acceptableRangeEnd,
    required this.currentLevel,
    this.achievedDate,
    this.lastObservedDate,
    required this.observationNotes,
    required this.supportingActivities,
    required this.isDelayed,
    required this.requiresAttention,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'childId': childId,
    'title': title,
    'description': description,
    'type': type.name,
    'socialArea': socialArea?.name,
    'emotionalArea': emotionalArea?.name,
    'typicalAgeMonths': typicalAgeMonths,
    'acceptableRangeStart': acceptableRangeStart,
    'acceptableRangeEnd': acceptableRangeEnd,
    'currentLevel': currentLevel.name,
    'achievedDate': achievedDate?.toIso8601String(),
    'lastObservedDate': lastObservedDate?.toIso8601String(),
    'observationNotes': observationNotes,
    'supportingActivities': supportingActivities,
    'isDelayed': isDelayed,
    'requiresAttention': requiresAttention,
    'createdAt': createdAt.toIso8601String(),
    'updatedAt': updatedAt.toIso8601String(),
  };

  factory SocialMilestone.fromJson(Map<String, dynamic> json) => SocialMilestone(
    id: json['id'],
    childId: json['childId'],
    title: json['title'],
    description: json['description'],
    type: MilestoneType.values.firstWhere((e) => e.name == json['type']),
    socialArea: json['socialArea'] != null 
      ? SocialArea.values.firstWhere((e) => e.name == json['socialArea']) 
      : null,
    emotionalArea: json['emotionalArea'] != null 
      ? EmotionalArea.values.firstWhere((e) => e.name == json['emotionalArea']) 
      : null,
    typicalAgeMonths: json['typicalAgeMonths'],
    acceptableRangeStart: json['acceptableRangeStart'],
    acceptableRangeEnd: json['acceptableRangeEnd'],
    currentLevel: AchievementLevel.values.firstWhere((e) => e.name == json['currentLevel']),
    achievedDate: json['achievedDate'] != null ? DateTime.parse(json['achievedDate']) : null,
    lastObservedDate: json['lastObservedDate'] != null ? DateTime.parse(json['lastObservedDate']) : null,
    observationNotes: List<String>.from(json['observationNotes'] ?? []),
    supportingActivities: List<String>.from(json['supportingActivities'] ?? []),
    isDelayed: json['isDelayed'] ?? false,
    requiresAttention: json['requiresAttention'] ?? false,
    createdAt: DateTime.parse(json['createdAt']),
    updatedAt: DateTime.parse(json['updatedAt']),
  );

  String get ageRangeText => '$acceptableRangeStart-$acceptableRangeEnd –º–µ—Å.';
  String get typicalAgeText => '$typicalAgeMonths –º–µ—Å.';
  
  String get levelText {
    switch (currentLevel) {
      case AchievementLevel.notStarted:
        return '–ù–µ –Ω–∞—á–∞—Ç–æ';
      case AchievementLevel.beginning:
        return '–ù–∞—á–∞–ª—å–Ω—ã–π';
      case AchievementLevel.developing:
        return '–†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è';
      case AchievementLevel.achieved:
        return '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ';
      case AchievementLevel.mastered:
        return '–û—Å–≤–æ–µ–Ω–æ';
    }
  }
  
  int get levelColorHex {
    switch (currentLevel) {
      case AchievementLevel.notStarted:
        return 0xFF9E9E9E;
      case AchievementLevel.beginning:
        return 0xFFFF9800;
      case AchievementLevel.developing:
        return 0xFF2196F3;
      case AchievementLevel.achieved:
        return 0xFF4CAF50;
      case AchievementLevel.mastered:
        return 0xFF8BC34A;
    }
  }
  
  String get areaDisplayName {
    if (socialArea != null) {
      switch (socialArea!) {
        case SocialArea.communication:
          return '–û–±—â–µ–Ω–∏–µ';
        case SocialArea.cooperation:
          return '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ';
        case SocialArea.empathy:
          return '–≠–º–ø–∞—Ç–∏—è';
        case SocialArea.independence:
          return '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
        case SocialArea.friendship:
          return '–î—Ä—É–∂–±–∞';
        case SocialArea.familyBonds:
          return '–°–µ–º–µ–π–Ω—ã–µ —Å–≤—è–∑–∏';
        case SocialArea.publicBehavior:
          return '–ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ';
      }
    }
    if (emotionalArea != null) {
      switch (emotionalArea!) {
        case EmotionalArea.selfAwareness:
          return '–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ';
        case EmotionalArea.emotionRecognition:
          return '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π';
        case EmotionalArea.emotionRegulation:
          return '–ö–æ–Ω—Ç—Ä–æ–ª—å —ç–º–æ—Ü–∏–π';
        case EmotionalArea.empathy:
          return '–≠–º–ø–∞—Ç–∏—è';
        case EmotionalArea.selfControl:
          return '–°–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å';
        case EmotionalArea.socialSkills:
          return '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏';
        case EmotionalArea.resilience:
          return '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å';
      }
    }
    return '–û–±—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
  }
  
  String get areaEmoji {
    if (socialArea != null) {
      switch (socialArea!) {
        case SocialArea.communication:
          return 'üí¨';
        case SocialArea.cooperation:
          return 'ü§ù';
        case SocialArea.empathy:
          return '‚ù§Ô∏è';
        case SocialArea.independence:
          return 'üéØ';
        case SocialArea.friendship:
          return 'üë´';
        case SocialArea.familyBonds:
          return 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶';
        case SocialArea.publicBehavior:
          return 'üåç';
      }
    }
    if (emotionalArea != null) {
      switch (emotionalArea!) {
        case EmotionalArea.selfAwareness:
          return 'üß†';
        case EmotionalArea.emotionRecognition:
          return 'üëÅÔ∏è';
        case EmotionalArea.emotionRegulation:
          return '‚öñÔ∏è';
        case EmotionalArea.empathy:
          return 'üíù';
        case EmotionalArea.selfControl:
          return 'üéõÔ∏è';
        case EmotionalArea.socialSkills:
          return 'üåü';
        case EmotionalArea.resilience:
          return 'üí™';
      }
    }
    return 'üé≠';
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
class BehaviorObservation {
  final String id;
  final String childId;
  final String milestoneId;
  final DateTime observationDate;
  final String behavior;
  final String context;
  final AchievementLevel observedLevel;
  final List<String> triggers;
  final List<String> supportingFactors;
  final String observerNotes;
  final List<String> photoUrls;
  final DateTime createdAt;

  BehaviorObservation({
    required this.id,
    required this.childId,
    required this.milestoneId,
    required this.observationDate,
    required this.behavior,
    required this.context,
    required this.observedLevel,
    required this.triggers,
    required this.supportingFactors,
    required this.observerNotes,
    required this.photoUrls,
    required this.createdAt,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'childId': childId,
    'milestoneId': milestoneId,
    'observationDate': observationDate.toIso8601String(),
    'behavior': behavior,
    'context': context,
    'observedLevel': observedLevel.name,
    'triggers': triggers,
    'supportingFactors': supportingFactors,
    'observerNotes': observerNotes,
    'photoUrls': photoUrls,
    'createdAt': createdAt.toIso8601String(),
  };

  factory BehaviorObservation.fromJson(Map<String, dynamic> json) => BehaviorObservation(
    id: json['id'],
    childId: json['childId'],
    milestoneId: json['milestoneId'],
    observationDate: DateTime.parse(json['observationDate']),
    behavior: json['behavior'],
    context: json['context'],
    observedLevel: AchievementLevel.values.firstWhere((e) => e.name == json['observedLevel']),
    triggers: List<String>.from(json['triggers'] ?? []),
    supportingFactors: List<String>.from(json['supportingFactors'] ?? []),
    observerNotes: json['observerNotes'],
    photoUrls: List<String>.from(json['photoUrls'] ?? []),
    createdAt: DateTime.parse(json['createdAt']),
  );
  
  String get formattedDate => DateFormat('dd.MM.yyyy –≤ HH:mm', 'ru').format(observationDate);
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
class SocialDevelopmentProgress {
  final String id;
  final String childId;
  final DateTime analysisDate;
  final Map<SocialArea, double> socialAreaScores;
  final Map<EmotionalArea, double> emotionalAreaScores;
  final double overallSocialScore;
  final double overallEmotionalScore;
  final List<String> strengths;
  final List<String> areasForDevelopment;
  final List<String> recommendations;
  final int totalMilestones;
  final int achievedMilestones;
  final int delayedMilestones;
  final List<String> upcomingMilestones;
  final DateTime createdAt;

  SocialDevelopmentProgress({
    required this.id,
    required this.childId,
    required this.analysisDate,
    required this.socialAreaScores,
    required this.emotionalAreaScores,
    required this.overallSocialScore,
    required this.overallEmotionalScore,
    required this.strengths,
    required this.areasForDevelopment,
    required this.recommendations,
    required this.totalMilestones,
    required this.achievedMilestones,
    required this.delayedMilestones,
    required this.upcomingMilestones,
    required this.createdAt,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'childId': childId,
    'analysisDate': analysisDate.toIso8601String(),
    'socialAreaScores': socialAreaScores.map((k, v) => MapEntry(k.name, v)),
    'emotionalAreaScores': emotionalAreaScores.map((k, v) => MapEntry(k.name, v)),
    'overallSocialScore': overallSocialScore,
    'overallEmotionalScore': overallEmotionalScore,
    'strengths': strengths,
    'areasForDevelopment': areasForDevelopment,
    'recommendations': recommendations,
    'totalMilestones': totalMilestones,
    'achievedMilestones': achievedMilestones,
    'delayedMilestones': delayedMilestones,
    'upcomingMilestones': upcomingMilestones,
    'createdAt': createdAt.toIso8601String(),
  };

  factory SocialDevelopmentProgress.fromJson(Map<String, dynamic> json) => SocialDevelopmentProgress(
    id: json['id'],
    childId: json['childId'],
    analysisDate: DateTime.parse(json['analysisDate']),
    socialAreaScores: Map<SocialArea, double>.fromEntries(
      (json['socialAreaScores'] as Map<String, dynamic>).entries.map(
        (e) => MapEntry(SocialArea.values.firstWhere((area) => area.name == e.key), e.value.toDouble())
      )
    ),
    emotionalAreaScores: Map<EmotionalArea, double>.fromEntries(
      (json['emotionalAreaScores'] as Map<String, dynamic>).entries.map(
        (e) => MapEntry(EmotionalArea.values.firstWhere((area) => area.name == e.key), e.value.toDouble())
      )
    ),
    overallSocialScore: json['overallSocialScore'].toDouble(),
    overallEmotionalScore: json['overallEmotionalScore'].toDouble(),
    strengths: List<String>.from(json['strengths'] ?? []),
    areasForDevelopment: List<String>.from(json['areasForDevelopment'] ?? []),
    recommendations: List<String>.from(json['recommendations'] ?? []),
    totalMilestones: json['totalMilestones'],
    achievedMilestones: json['achievedMilestones'],
    delayedMilestones: json['delayedMilestones'],
    upcomingMilestones: List<String>.from(json['upcomingMilestones'] ?? []),
    createdAt: DateTime.parse(json['createdAt']),
  );
  
  String get formattedDate => DateFormat('dd.MM.yyyy', 'ru').format(analysisDate);
  double get progressPercentage => totalMilestones > 0 ? (achievedMilestones / totalMilestones) * 100 : 0;
}

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile {
  final String uid;
  final String email;
  final String displayName;
  final String? photoURL;
  final int level;
  final int xp;
  final String subscription;
  final DateTime createdAt;
  final DateTime lastLogin;
  final String provider;
  final String? activeChildId;

  UserProfile({
    required this.uid,
    required this.email,
    required this.displayName,
    this.photoURL,
    required this.level,
    required this.xp,
    required this.subscription,
    required this.createdAt,
    required this.lastLogin,
    required this.provider,
    this.activeChildId,
  });

  factory UserProfile.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return UserProfile(
      uid: doc.id,
      email: data['email'] ?? '',
      displayName: data['displayName'] ?? '–†–æ–¥–∏—Ç–µ–ª—å',
      photoURL: data['photoURL'],
      level: data['level'] ?? 1,
      xp: data['xp'] ?? 0,
      subscription: data['subscription'] ?? 'free',
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      lastLogin: (data['lastLogin'] as Timestamp?)?.toDate() ?? DateTime.now(),
      provider: data['provider'] ?? 'email',
      activeChildId: data['activeChildId'],
    );
  }

  int get xpForNextLevel => level * 1000;
  int get xpProgress => xp % 1000;
  double get levelProgress => xpProgress / 1000;
}

// –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞
class ChildProfile {
  final String id;
  final String name;
  final DateTime birthDate;
  final String gender;
  final double height;
  final double weight;
  final String? photoURL;
  final String petName;
  final String petType;
  final Map<String, int> petStats;
  final Map<String, dynamic> milestones;
  final int vocabularySize;
  final DateTime createdAt;
  final DateTime updatedAt;

  ChildProfile({
    required this.id,
    required this.name,
    required this.birthDate,
    required this.gender,
    required this.height,
    required this.weight,
    this.photoURL,
    required this.petName,
    required this.petType,
    required this.petStats,
    required this.milestones,
    required this.vocabularySize,
    required this.createdAt,
    required this.updatedAt,
  });

  factory ChildProfile.fromFirestore(Map<String, dynamic> data, String id) {
    return ChildProfile(
      id: id,
      name: data['name'] ?? '',
      birthDate: (data['birthDate'] as Timestamp).toDate(),
      gender: data['gender'] ?? 'male',
      height: (data['height'] ?? 0).toDouble(),
      weight: (data['weight'] ?? 0).toDouble(),
      photoURL: data['photoURL'],
      petName: data['petName'] ?? '–ï–¥–∏–Ω–æ—Ä–æ–≥',
      petType: data['petType'] ?? 'ü¶Ñ',
      petStats: Map<String, int>.from(data['petStats'] ?? {
        'happiness': 50,
        'energy': 50,
        'knowledge': 50,
      }),
      milestones: data['milestones'] ?? {},
      vocabularySize: data['vocabularySize'] ?? 0,
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
    );
  }

  int get ageInMonths {
    final now = DateTime.now();
    final months = (now.year - birthDate.year) * 12 + now.month - birthDate.month;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    if (now.day < birthDate.day) {
      return months - 1;
    }
    
    return months;
  }

  int get ageInDays {
    final now = DateTime.now();
    final difference = now.difference(birthDate);
    return difference.inDays;
  }

  int get ageInYears {
    return ageInMonths ~/ 12;
  }

  String get ageFormatted {
    final days = ageInDays;
    final months = ageInMonths;
    final years = months ~/ 12;
    final remainingMonths = months % 12;

    // –î–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö (–º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏)
    if (days < 7) {
      if (days == 0) {
        return '–°–µ–≥–æ–¥–Ω—è —Ä–æ–¥–∏–ª—Å—è';
      } else if (days == 1) {
        return '1 –¥–µ–Ω—å';
      } else if (days >= 2 && days <= 4) {
        return '$days –¥–Ω—è';
      } else {
        return '$days –¥–Ω–µ–π';
      }
    }
    // –î–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ –º–µ—Å—è—Ü–∞
    else if (days < 30) {
      final weeks = days ~/ 7;
      if (weeks == 1) {
        return '1 –Ω–µ–¥–µ–ª—è';
      } else {
        return '$weeks –Ω–µ–¥–µ–ª–∏';
      }
    }
    // –î–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ –≥–æ–¥–∞
    else if (years == 0) {
      if (remainingMonths == 1) {
        return '1 –º–µ—Å—è—Ü';
      } else if (remainingMonths >= 2 && remainingMonths <= 4) {
        return '$remainingMonths –º–µ—Å—è—Ü–∞';
      } else {
        return '$remainingMonths –º–µ—Å—è—Ü–µ–≤';
      }
    }
    // –î–ª—è –¥–µ—Ç–µ–π —Å—Ç–∞—Ä—à–µ –≥–æ–¥–∞
    else {
      String yearStr;
      if (years == 1) {
        yearStr = '1 –≥–æ–¥';
      } else if (years >= 2 && years <= 4) {
        yearStr = '$years –≥–æ–¥–∞';
      } else {
        yearStr = '$years –ª–µ—Ç';
      }
      
      if (remainingMonths == 0) {
        return yearStr;
      } else if (remainingMonths == 1) {
        return '$yearStr 1 –º–µ—Å.';
      } else {
        return '$yearStr $remainingMonths –º–µ—Å.';
      }
    }
  }
  
  // –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è UI
  String get ageFormattedShort {
    final months = ageInMonths;
    final years = months ~/ 12;
    
    if (years == 0) {
      return '$months –º–µ—Å.';
    } else if (years == 1) {
      return '1 –≥–æ–¥';
    } else if (years >= 2 && years <= 4) {
      return '$years –≥–æ–¥–∞';
    } else {
      return '$years –ª–µ—Ç';
    }
  }
}

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
class Achievement {
  final String id;
  final String title;
  final String description;
  final String icon;
  final bool unlocked;
  final DateTime? unlockedAt;
  final int progress;
  final int maxProgress;

  Achievement({
    required this.id,
    required this.title,
    required this.description,
    required this.icon,
    required this.unlocked,
    this.unlockedAt,
    required this.progress,
    required this.maxProgress,
  });

  factory Achievement.fromFirestore(Map<String, dynamic> data, String id) {
    return Achievement(
      id: id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      icon: data['icon'] ?? 'üèÜ',
      unlocked: data['unlocked'] ?? false,
      unlockedAt: data['unlockedAt'] != null
          ? (data['unlockedAt'] as Timestamp).toDate()
          : null,
      progress: data['progress'] ?? 0,
      maxProgress: data['maxProgress'] ?? 1,
    );
  }
}

// –ò—Å—Ç–æ—Ä–∏—è
class StoryData {
  final String id;
  final String childId;
  final String theme;
  final String story;
  final String? imageUrl;
  final bool isFavorite;
  final DateTime createdAt;

  StoryData({
    required this.id,
    required this.childId,
    required this.theme,
    required this.story,
    this.imageUrl,
    required this.isFavorite,
    required this.createdAt,
  });

  factory StoryData.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return StoryData(
      id: doc.id,
      childId: data['childId'] ?? '',
      theme: data['theme'] ?? '',
      story: data['story'] ?? '',
      imageUrl: data['imageUrl'],
      isFavorite: data['isFavorite'] ?? false,
      createdAt: (data['createdAt'] as Timestamp).toDate(),
    );
  }
}

// ===== –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

// –¢–∏–ø—ã –ø—Ä–∏–≤–∏–≤–æ–∫
enum VaccinationType {
  hepatitisB,
  tuberculosis,
  diphtheria,
  pertussis,
  tetanus,
  polio,
  pneumococcal,
  haemophilus,
  measles,
  mumps,
  rubella,
  chickenpox,
  meningococcal,
  rotavirus,
  influenza,
  covid19,
  other
}

// –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∏–≤–∫–∏
enum VaccinationStatus {
  scheduled,    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
  overdue,      // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
  completed,    // –í—ã–ø–æ–ª–Ω–µ–Ω–∞
  postponed,    // –û—Ç–ª–æ–∂–µ–Ω–∞
  contraindicated // –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∞
}

// –ú–æ–¥–µ–ª—å –ø—Ä–∏–≤–∏–≤–∫–∏
class Vaccination {
  final String id;
  final String childId;
  final VaccinationType type;
  final String name;
  final DateTime scheduledDate;
  final DateTime? actualDate;
  final VaccinationStatus status;
  final String? doctorName;
  final String? clinic;
  final String? batchNumber;
  final String? manufacturer;
  final String? reaction;
  final String? notes;
  final List<String> attachments; // —Ñ–æ—Ç–æ —Å–ø—Ä–∞–≤–æ–∫, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  final DateTime createdAt;
  final DateTime updatedAt;

  Vaccination({
    required this.id,
    required this.childId,
    required this.type,
    required this.name,
    required this.scheduledDate,
    this.actualDate,
    required this.status,
    this.doctorName,
    this.clinic,
    this.batchNumber,
    this.manufacturer,
    this.reaction,
    this.notes,
    required this.attachments,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'type': type.name,
      'name': name,
      'scheduledDate': Timestamp.fromDate(scheduledDate),
      'actualDate': actualDate != null ? Timestamp.fromDate(actualDate!) : null,
      'status': status.name,
      'doctorName': doctorName,
      'clinic': clinic,
      'batchNumber': batchNumber,
      'manufacturer': manufacturer,
      'reaction': reaction,
      'notes': notes,
      'attachments': attachments,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static Vaccination fromJson(Map<String, dynamic> json) {
    return Vaccination(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      type: VaccinationType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => VaccinationType.other,
      ),
      name: json['name'] ?? '',
      scheduledDate: (json['scheduledDate'] as Timestamp).toDate(),
      actualDate: json['actualDate'] != null 
          ? (json['actualDate'] as Timestamp).toDate() 
          : null,
      status: VaccinationStatus.values.firstWhere(
        (e) => e.name == json['status'],
        orElse: () => VaccinationStatus.scheduled,
      ),
      doctorName: json['doctorName'],
      clinic: json['clinic'],
      batchNumber: json['batchNumber'],
      manufacturer: json['manufacturer'],
      reaction: json['reaction'],
      notes: json['notes'],
      attachments: List<String>.from(json['attachments'] ?? []),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  bool get isOverdue => status == VaccinationStatus.scheduled && 
                       DateTime.now().isAfter(scheduledDate);
  
  bool get isUpcoming => status == VaccinationStatus.scheduled && 
                        DateTime.now().isBefore(scheduledDate) &&
                        scheduledDate.difference(DateTime.now()).inDays <= 30;

  String get statusDisplayName {
    switch (status) {
      case VaccinationStatus.scheduled:
        return isOverdue ? '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞' : '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
      case VaccinationStatus.overdue:
        return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞';
      case VaccinationStatus.completed:
        return '–í—ã–ø–æ–ª–Ω–µ–Ω–∞';
      case VaccinationStatus.postponed:
        return '–û—Ç–ª–æ–∂–µ–Ω–∞';
      case VaccinationStatus.contraindicated:
        return '–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∞';
    }
  }
}

// –¢–∏–ø—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
enum MedicalRecordType {
  checkup,        // –ü–ª–∞–Ω–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä
  illness,        // –ë–æ–ª–µ–∑–Ω—å
  emergency,      // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
  consultation,   // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
  hospitalization, // –ì–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
  surgery,        // –û–ø–µ—Ä–∞—Ü–∏—è
  allergy,        // –ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è
  other
}

// –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–ø–∏—Å—å
class MedicalRecord {
  final String id;
  final String childId;
  final MedicalRecordType type;
  final String title;
  final String description;
  final DateTime date;
  final String? doctorName;
  final String? doctorSpecialty;
  final String? clinic;
  final String? diagnosis;
  final List<String> symptoms;
  final List<Prescription> prescriptions;
  final List<String> recommendations;
  final double? temperature;
  final double? weight;
  final double? height;
  final String? notes;
  final List<String> attachments; // —Ñ–æ—Ç–æ —Å–ø—Ä–∞–≤–æ–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤
  final DateTime createdAt;
  final DateTime updatedAt;

  MedicalRecord({
    required this.id,
    required this.childId,
    required this.type,
    required this.title,
    required this.description,
    required this.date,
    this.doctorName,
    this.doctorSpecialty,
    this.clinic,
    this.diagnosis,
    required this.symptoms,
    required this.prescriptions,
    required this.recommendations,
    this.temperature,
    this.weight,
    this.height,
    this.notes,
    required this.attachments,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'type': type.name,
      'title': title,
      'description': description,
      'date': Timestamp.fromDate(date),
      'doctorName': doctorName,
      'doctorSpecialty': doctorSpecialty,
      'clinic': clinic,
      'diagnosis': diagnosis,
      'symptoms': symptoms,
      'prescriptions': prescriptions.map((p) => p.toJson()).toList(),
      'recommendations': recommendations,
      'temperature': temperature,
      'weight': weight,
      'height': height,
      'notes': notes,
      'attachments': attachments,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static MedicalRecord fromJson(Map<String, dynamic> json) {
    return MedicalRecord(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      type: MedicalRecordType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => MedicalRecordType.other,
      ),
      title: json['title'] ?? '',
      description: json['description'] ?? '',
      date: (json['date'] as Timestamp).toDate(),
      doctorName: json['doctorName'],
      doctorSpecialty: json['doctorSpecialty'],
      clinic: json['clinic'],
      diagnosis: json['diagnosis'],
      symptoms: List<String>.from(json['symptoms'] ?? []),
      prescriptions: (json['prescriptions'] as List?)
          ?.map((p) => Prescription.fromJson(p as Map<String, dynamic>))
          .toList() ?? [],
      recommendations: List<String>.from(json['recommendations'] ?? []),
      temperature: json['temperature']?.toDouble(),
      weight: json['weight']?.toDouble(),
      height: json['height']?.toDouble(),
      notes: json['notes'],
      attachments: List<String>.from(json['attachments'] ?? []),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  String get typeDisplayName {
    switch (type) {
      case MedicalRecordType.checkup:
        return '–ü–ª–∞–Ω–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä';
      case MedicalRecordType.illness:
        return '–ë–æ–ª–µ–∑–Ω—å';
      case MedicalRecordType.emergency:
        return '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ';
      case MedicalRecordType.consultation:
        return '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è';
      case MedicalRecordType.hospitalization:
        return '–ì–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è';
      case MedicalRecordType.surgery:
        return '–û–ø–µ—Ä–∞—Ü–∏—è';
      case MedicalRecordType.allergy:
        return '–ê–ª–ª–µ—Ä–≥–∏—è';
      case MedicalRecordType.other:
        return '–î—Ä—É–≥–æ–µ';
    }
  }
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—Ä–µ—Ü–µ–ø—Ç
class Prescription {
  final String medicationName;
  final String dosage;
  final String frequency;
  final String duration;
  final String instructions;
  final DateTime startDate;
  final DateTime? endDate;
  final bool isCompleted;

  Prescription({
    required this.medicationName,
    required this.dosage,
    required this.frequency,
    required this.duration,
    required this.instructions,
    required this.startDate,
    this.endDate,
    required this.isCompleted,
  });

  Map<String, dynamic> toJson() {
    return {
      'medicationName': medicationName,
      'dosage': dosage,
      'frequency': frequency,
      'duration': duration,
      'instructions': instructions,
      'startDate': Timestamp.fromDate(startDate),
      'endDate': endDate != null ? Timestamp.fromDate(endDate!) : null,
      'isCompleted': isCompleted,
    };
  }

  static Prescription fromJson(Map<String, dynamic> json) {
    return Prescription(
      medicationName: json['medicationName'] ?? '',
      dosage: json['dosage'] ?? '',
      frequency: json['frequency'] ?? '',
      duration: json['duration'] ?? '',
      instructions: json['instructions'] ?? '',
      startDate: (json['startDate'] as Timestamp).toDate(),
      endDate: json['endDate'] != null 
          ? (json['endDate'] as Timestamp).toDate() 
          : null,
      isCompleted: json['isCompleted'] ?? false,
    );
  }
}

// –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–≤–∏–≤–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
class VaccinationSchedule {
  static List<VaccinationTemplate> getScheduleForAge(int ageInMonths) {
    final templates = <VaccinationTemplate>[];
    
    // –ù–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ (0-1 –º–µ—Å—è—Ü)
    if (ageInMonths <= 1) {
      templates.addAll([
        VaccinationTemplate(
          type: VaccinationType.hepatitisB,
          name: '–ì–µ–ø–∞—Ç–∏—Ç B (1-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 0,
          description: '–ü–µ—Ä–≤–∞—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –≥–µ–ø–∞—Ç–∏—Ç–∞ B –≤ —Ä–æ–¥–¥–æ–º–µ',
        ),
        VaccinationTemplate(
          type: VaccinationType.tuberculosis,
          name: '–ë–¶–ñ',
          recommendedAgeMonths: 0,
          description: '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç —Ç—É–±–µ—Ä–∫—É–ª–µ–∑–∞',
        ),
      ]);
    }
    
    // 1 –º–µ—Å—è—Ü
    if (ageInMonths >= 1 && ageInMonths <= 2) {
      templates.add(VaccinationTemplate(
        type: VaccinationType.hepatitisB,
        name: '–ì–µ–ø–∞—Ç–∏—Ç B (2-—è –¥–æ–∑–∞)',
        recommendedAgeMonths: 1,
        description: '–í—Ç–æ—Ä–∞—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –≥–µ–ø–∞—Ç–∏—Ç–∞ B',
      ));
    }
    
    // 2 –º–µ—Å—è—Ü–∞
    if (ageInMonths >= 2 && ageInMonths <= 3) {
      templates.addAll([
        VaccinationTemplate(
          type: VaccinationType.diphtheria,
          name: '–ê–ö–î–° (1-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 2,
          description: '–ö–æ–∫–ª—é—à, –¥–∏—Ñ—Ç–µ—Ä–∏—è, —Å—Ç–æ–ª–±–Ω—è–∫ - –ø–µ—Ä–≤–∞—è –¥–æ–∑–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.polio,
          name: '–ü–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç (1-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 2,
          description: '–ü–µ—Ä–≤–∞—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –ø–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.pneumococcal,
          name: '–ü–Ω–µ–≤–º–æ–∫–æ–∫–∫–æ–≤–∞—è (1-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 2,
          description: '–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–Ω–µ–≤–º–æ–∫–æ–∫–∫–æ–≤—ã—Ö –∏–Ω—Ñ–µ–∫—Ü–∏–π',
        ),
      ]);
    }
    
    // 4.5 –º–µ—Å—è—Ü–∞
    if (ageInMonths >= 4 && ageInMonths <= 5) {
      templates.addAll([
        VaccinationTemplate(
          type: VaccinationType.diphtheria,
          name: '–ê–ö–î–° (2-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 4,
          description: '–ö–æ–∫–ª—é—à, –¥–∏—Ñ—Ç–µ—Ä–∏—è, —Å—Ç–æ–ª–±–Ω—è–∫ - –≤—Ç–æ—Ä–∞—è –¥–æ–∑–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.polio,
          name: '–ü–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç (2-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 4,
          description: '–í—Ç–æ—Ä–∞—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –ø–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.pneumococcal,
          name: '–ü–Ω–µ–≤–º–æ–∫–æ–∫–∫–æ–≤–∞—è (2-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 4,
          description: '–í—Ç–æ—Ä–∞—è –¥–æ–∑–∞ –ø–Ω–µ–≤–º–æ–∫–æ–∫–∫–æ–≤–æ–π –≤–∞–∫—Ü–∏–Ω—ã',
        ),
      ]);
    }
    
    // 6 –º–µ—Å—è—Ü–µ–≤
    if (ageInMonths >= 6 && ageInMonths <= 7) {
      templates.addAll([
        VaccinationTemplate(
          type: VaccinationType.diphtheria,
          name: '–ê–ö–î–° (3-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 6,
          description: '–ö–æ–∫–ª—é—à, –¥–∏—Ñ—Ç–µ—Ä–∏—è, —Å—Ç–æ–ª–±–Ω—è–∫ - —Ç—Ä–µ—Ç—å—è –¥–æ–∑–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.polio,
          name: '–ü–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç (3-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 6,
          description: '–¢—Ä–µ—Ç—å—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –ø–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.hepatitisB,
          name: '–ì–µ–ø–∞—Ç–∏—Ç B (3-—è –¥–æ–∑–∞)',
          recommendedAgeMonths: 6,
          description: '–¢—Ä–µ—Ç—å—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –≥–µ–ø–∞—Ç–∏—Ç–∞ B',
        ),
      ]);
    }
    
    // 12 –º–µ—Å—è—Ü–µ–≤
    if (ageInMonths >= 12 && ageInMonths <= 13) {
      templates.addAll([
        VaccinationTemplate(
          type: VaccinationType.measles,
          name: '–ö–æ—Ä—å, –∫—Ä–∞—Å–Ω—É—Ö–∞, –ø–∞—Ä–æ—Ç–∏—Ç',
          recommendedAgeMonths: 12,
          description: '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –∫–æ—Ä–∏, –∫—Ä–∞—Å–Ω—É—Ö–∏ –∏ –ø–∞—Ä–æ—Ç–∏—Ç–∞',
        ),
        VaccinationTemplate(
          type: VaccinationType.pneumococcal,
          name: '–ü–Ω–µ–≤–º–æ–∫–æ–∫–∫–æ–≤–∞—è (—Ä–µ–≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è)',
          recommendedAgeMonths: 12,
          description: '–†–µ–≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø–Ω–µ–≤–º–æ–∫–æ–∫–∫–æ–≤–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏',
        ),
      ]);
    }
    
    return templates;
  }
  
  static List<VaccinationTemplate> getAllSchedule() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–≤–∏–≤–æ–∫ –æ—Ç 0 –¥–æ 18 –ª–µ—Ç
    return [
      // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–ª–Ω—ã–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    ];
  }
}

// –®–∞–±–ª–æ–Ω –ø—Ä–∏–≤–∏–≤–∫–∏
class VaccinationTemplate {
  final VaccinationType type;
  final String name;
  final int recommendedAgeMonths;
  final String description;
  final bool isRequired;

  VaccinationTemplate({
    required this.type,
    required this.name,
    required this.recommendedAgeMonths,
    required this.description,
    this.isRequired = true,
  });
}

// ===== –ú–û–î–ï–õ–ò –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø =====

// –¢–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞
enum GrowthMeasurementType {
  height,      // –†–æ—Å—Ç
  weight,      // –í–µ—Å  
  headCircumference, // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≥–æ–ª–æ–≤—ã
  chestCircumference, // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≥—Ä—É–¥–∏
  armCircumference,   // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ä—É–∫–∏
  waistCircumference, // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏
  other
}

// –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
class DetailedGrowthMeasurement {
  final String id;
  final String childId;
  final GrowthMeasurementType type;
  final double value;
  final String unit; // —Å–º, –∫–≥, –∏ —Ç.–¥.
  final DateTime measurementDate;
  final String? measuredBy; // –∫—Ç–æ –∏–∑–º–µ—Ä—è–ª (–≤—Ä–∞—á, —Ä–æ–¥–∏—Ç–µ–ª—å)
  final String? location; // –≥–¥–µ –∏–∑–º–µ—Ä—è–ª–∏ (–¥–æ–º, –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞)
  final String? notes;
  final DateTime createdAt;
  final DateTime updatedAt;

  DetailedGrowthMeasurement({
    required this.id,
    required this.childId,
    required this.type,
    required this.value,
    required this.unit,
    required this.measurementDate,
    this.measuredBy,
    this.location,
    this.notes,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'type': type.name,
      'value': value,
      'unit': unit,
      'measurementDate': Timestamp.fromDate(measurementDate),
      'measuredBy': measuredBy,
      'location': location,
      'notes': notes,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static DetailedGrowthMeasurement fromJson(Map<String, dynamic> json) {
    return DetailedGrowthMeasurement(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      type: GrowthMeasurementType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => GrowthMeasurementType.other,
      ),
      value: (json['value'] ?? 0).toDouble(),
      unit: json['unit'] ?? '',
      measurementDate: (json['measurementDate'] as Timestamp).toDate(),
      measuredBy: json['measuredBy'],
      location: json['location'],
      notes: json['notes'],
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get typeDisplayName {
    switch (type) {
      case GrowthMeasurementType.height:
        return '–†–æ—Å—Ç';
      case GrowthMeasurementType.weight:
        return '–í–µ—Å';
      case GrowthMeasurementType.headCircumference:
        return '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≥–æ–ª–æ–≤—ã';
      case GrowthMeasurementType.chestCircumference:
        return '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≥—Ä—É–¥–∏';
      case GrowthMeasurementType.armCircumference:
        return '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ä—É–∫–∏';
      case GrowthMeasurementType.waistCircumference:
        return '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏';
      case GrowthMeasurementType.other:
        return '–î—Ä—É–≥–æ–µ';
    }
  }

  String get formattedValue => '$value $unit';
}

// –û–±–ª–∞—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª —Ä–∞–Ω–Ω–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)

// –°—Ç–∞—Ç—É—Å –≤–µ—Ö–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
enum MilestoneStatus {
  notAchieved,   // –ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
  inProgress,    // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
  achieved,       // –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
  delayed,        // –ó–∞–¥–µ—Ä–∂–∫–∞
  advanced,       // –û–ø–µ—Ä–µ–∂–∞–µ—Ç –Ω–æ—Ä–º—É
}

// –í–µ—Ö–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
class PhysicalMilestone {
  final String id;
  final String childId;
  final String title;
  final String description;
  final DevelopmentArea area;
  final int typicalAgeMonths; // –¢–∏–ø–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö
  final int minAgeMonths;     // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–æ—Ä–º—ã
  final int maxAgeMonths;     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–æ—Ä–º—ã
  final MilestoneStatus status;
  final DateTime? achievedDate;
  final String? observedBy;   // –ö—Ç–æ –Ω–∞–±–ª—é–¥–∞–ª (—Ä–æ–¥–∏—Ç–µ–ª—å, –≤—Ä–∞—á)
  final String? notes;
  final List<String> photos;  // –§–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  final DateTime createdAt;
  final DateTime updatedAt;

  PhysicalMilestone({
    required this.id,
    required this.childId,
    required this.title,
    required this.description,
    required this.area,
    required this.typicalAgeMonths,
    required this.minAgeMonths,
    required this.maxAgeMonths,
    required this.status,
    this.achievedDate,
    this.observedBy,
    this.notes,
    required this.photos,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'title': title,
      'description': description,
      'area': area.name,
      'typicalAgeMonths': typicalAgeMonths,
      'minAgeMonths': minAgeMonths,
      'maxAgeMonths': maxAgeMonths,
      'status': status.name,
      'achievedDate': achievedDate != null ? Timestamp.fromDate(achievedDate!) : null,
      'observedBy': observedBy,
      'notes': notes,
      'photos': photos,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static PhysicalMilestone fromJson(Map<String, dynamic> json) {
    return PhysicalMilestone(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      title: json['title'] ?? '',
      description: json['description'] ?? '',
      area: DevelopmentArea.values.firstWhere(
        (e) => e.name == json['area'],
        orElse: () => DevelopmentArea.cognitive,
      ),
      typicalAgeMonths: json['typicalAgeMonths'] ?? 0,
      minAgeMonths: json['minAgeMonths'] ?? 0,
      maxAgeMonths: json['maxAgeMonths'] ?? 0,
      status: MilestoneStatus.values.firstWhere(
        (e) => e.name == json['status'],
        orElse: () => MilestoneStatus.notAchieved,
      ),
      achievedDate: json['achievedDate'] != null 
          ? (json['achievedDate'] as Timestamp).toDate() 
          : null,
      observedBy: json['observedBy'],
      notes: json['notes'],
      photos: List<String>.from(json['photos'] ?? []),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get areaDisplayName {
    switch (area) {
      case DevelopmentArea.motor:
        return '–ú–æ—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.cognitive:
        return '–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.language:
        return '–†–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.social:
        return '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.creative:
        return '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.sensory:
        return '–°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.emotional:
        return '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
    }
  }

  String get statusDisplayName {
    switch (status) {
      case MilestoneStatus.notAchieved:
        return '–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞';
      case MilestoneStatus.inProgress:
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case MilestoneStatus.achieved:
        return '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞';
      case MilestoneStatus.delayed:
        return '–ó–∞–¥–µ—Ä–∂–∫–∞';
      case MilestoneStatus.advanced:
        return '–û–ø–µ—Ä–µ–∂–∞–µ—Ç –Ω–æ—Ä–º—É';
    }
  }

  bool get isOnTime {
    if (achievedDate == null) return true;
    
    final childAge = DateTime.now().difference(achievedDate!).inDays ~/ 30;
    return childAge >= minAgeMonths && childAge <= maxAgeMonths;
  }

  bool get isDelayed {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)
    return status == MilestoneStatus.delayed;
  }

  bool get isAdvanced {
    return status == MilestoneStatus.advanced;
  }

  String get ageRangeText {
    if (minAgeMonths == maxAgeMonths) {
      return '$typicalAgeMonths –º–µ—Å.';
    }
    return '$minAgeMonths-$maxAgeMonths –º–µ—Å. (–Ω–æ—Ä–º–∞: $typicalAgeMonths –º–µ—Å.)';
  }
}

// –¶–µ–Ω—Ç–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –í–û–ó
class WHOPercentileData {
  final int ageMonths;
  final String gender; // 'male' –∏–ª–∏ 'female'
  final GrowthMeasurementType measurementType;
  final double p3;   // 3-–π —Ü–µ–Ω—Ç–∏–ª—å
  final double p15;  // 15-–π —Ü–µ–Ω—Ç–∏–ª—å
  final double p50;  // 50-–π —Ü–µ–Ω—Ç–∏–ª—å (–º–µ–¥–∏–∞–Ω–∞)
  final double p85;  // 85-–π —Ü–µ–Ω—Ç–∏–ª—å
  final double p97;  // 97-–π —Ü–µ–Ω—Ç–∏–ª—å

  WHOPercentileData({
    required this.ageMonths,
    required this.gender,
    required this.measurementType,
    required this.p3,
    required this.p15,
    required this.p50,
    required this.p85,
    required this.p97,
  });

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –∫–∞–∫–æ–π —Ü–µ–Ω—Ç–∏–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
  String getPercentileRange(double value) {
    if (value < p3) return '–ù–∏–∂–µ 3-–≥–æ —Ü–µ–Ω—Ç–∏–ª—è';
    if (value < p15) return '3-15 —Ü–µ–Ω—Ç–∏–ª—å';
    if (value < p50) return '15-50 —Ü–µ–Ω—Ç–∏–ª—å';
    if (value < p85) return '50-85 —Ü–µ–Ω—Ç–∏–ª—å';
    if (value < p97) return '85-97 —Ü–µ–Ω—Ç–∏–ª—å';
    return '–í—ã—à–µ 97-–≥–æ —Ü–µ–Ω—Ç–∏–ª—è';
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ü–µ–Ω—Ç–∏–ª—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
  int getPercentile(double value) {
    if (value < p3) return 1;
    if (value < p15) return 9;  // —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É 3 –∏ 15
    if (value < p50) return 32; // —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É 15 –∏ 50
    if (value < p85) return 67; // —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É 50 –∏ 85
    if (value < p97) return 91; // —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É 85 –∏ 97
    return 99;
  }

  // –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
  String getAssessment(double value) {
    final percentile = getPercentile(value);
    
    if (percentile < 3) return '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã';
    if (percentile < 15) return '–ù–∏–∂–µ –Ω–æ—Ä–º—ã';
    if (percentile >= 15 && percentile <= 85) return '–ù–æ—Ä–º–∞';
    if (percentile > 85 && percentile <= 97) return '–í—ã—à–µ –Ω–æ—Ä–º—ã';
    return '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –Ω–æ—Ä–º—ã';
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
class GrowthAnalysis {
  final String childId;
  final DateTime analysisDate;
  final int currentAgeMonths;
  final List<DetailedGrowthMeasurement> recentMeasurements;
  final Map<GrowthMeasurementType, double> currentPercentiles;
  final Map<GrowthMeasurementType, String> growthTrends; // 'increasing', 'stable', 'decreasing'
  final List<String> recommendations;
  final List<String> concerns;
  final double overallGrowthScore; // 0-100

  GrowthAnalysis({
    required this.childId,
    required this.analysisDate,
    required this.currentAgeMonths,
    required this.recentMeasurements,
    required this.currentPercentiles,
    required this.growthTrends,
    required this.recommendations,
    required this.concerns,
    required this.overallGrowthScore,
  });

  String get overallAssessment {
    if (overallGrowthScore >= 85) return '–û—Ç–ª–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
    if (overallGrowthScore >= 70) return '–•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
    if (overallGrowthScore >= 50) return '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
    if (overallGrowthScore >= 30) return '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è';
    return '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞';
  }

  bool get hasConcerns => concerns.isNotEmpty;
}

// ===== –ú–û–î–ï–õ–ò –ü–ò–¢–ê–ù–ò–Ø =====

// –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è
enum FoodCategory {
  fruits,          // –§—Ä—É–∫—Ç—ã
  vegetables,      // –û–≤–æ—â–∏
  grains,          // –ó–ª–∞–∫–∏ –∏ –∫—Ä—É–ø—ã
  protein,         // –ë–µ–ª–∫–∏ (–º—è—Å–æ, —Ä—ã–±–∞, –±–æ–±–æ–≤—ã–µ)
  dairy,           // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  fats,            // –ñ–∏—Ä—ã –∏ –º–∞—Å–ª–∞
  beverages,       // –ù–∞–ø–∏—Ç–∫–∏
  snacks,          // –ü–µ—Ä–µ–∫—É—Å—ã
  babyFood,        // –î–µ—Ç—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
  supplements,     // –í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏
}

// –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
enum MeasurementUnit {
  grams,           // –ì—Ä–∞–º–º—ã
  milliliters,     // –ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã
  pieces,          // –®—Ç—É–∫–∏
  cups,            // –ß–∞—à–∫–∏
  tablespoons,     // –°—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏
  teaspoons,       // –ß–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏
}

// –ü—Ä–æ–¥—É–∫—Ç –ø–∏—Ç–∞–Ω–∏—è
class FoodItem {
  final String id;
  final String name;
  final String description;
  final FoodCategory category;
  final MeasurementUnit defaultUnit;
  
  // –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100–≥/100–º–ª
  final double caloriesPer100g;
  final double proteinPer100g;     // –ë–µ–ª–∫–∏ (–≥)
  final double fatsPer100g;        // –ñ–∏—Ä—ã (–≥)
  final double carbsPer100g;       // –£–≥–ª–µ–≤–æ–¥—ã (–≥)
  final double fiberPer100g;       // –ö–ª–µ—Ç—á–∞—Ç–∫–∞ (–≥)
  final double sugarPer100g;       // –°–∞—Ö–∞—Ä (–≥)
  final double sodiumPer100g;      // –ù–∞—Ç—Ä–∏–π (–º–≥)
  
  // –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã –Ω–∞ 100–≥/100–º–ª
  final double vitaminAPer100g;    // –í–∏—Ç–∞–º–∏–Ω A (–º–∫–≥)
  final double vitaminCPer100g;    // –í–∏—Ç–∞–º–∏–Ω C (–º–≥)
  final double vitaminDPer100g;    // –í–∏—Ç–∞–º–∏–Ω D (–º–∫–≥)
  final double calciumPer100g;     // –ö–∞–ª—å—Ü–∏–π (–º–≥)
  final double ironPer100g;        // –ñ–µ–ª–µ–∑–æ (–º–≥)
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  final List<String> allergens;     // –°–ø–∏—Å–æ–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
  final int minAgeMonths;          // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è
  final bool isOrganic;            // –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç
  final String? brand;             // –ë—Ä–µ–Ω–¥ (–¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
  final String? barcode;           // –®—Ç—Ä–∏—Ö–∫–æ–¥
  final DateTime createdAt;
  final DateTime updatedAt;

  FoodItem({
    required this.id,
    required this.name,
    required this.description,
    required this.category,
    required this.defaultUnit,
    required this.caloriesPer100g,
    required this.proteinPer100g,
    required this.fatsPer100g,
    required this.carbsPer100g,
    required this.fiberPer100g,
    required this.sugarPer100g,
    required this.sodiumPer100g,
    required this.vitaminAPer100g,
    required this.vitaminCPer100g,
    required this.vitaminDPer100g,
    required this.calciumPer100g,
    required this.ironPer100g,
    required this.allergens,
    required this.minAgeMonths,
    required this.isOrganic,
    this.brand,
    this.barcode,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'category': category.name,
      'defaultUnit': defaultUnit.name,
      'caloriesPer100g': caloriesPer100g,
      'proteinPer100g': proteinPer100g,
      'fatsPer100g': fatsPer100g,
      'carbsPer100g': carbsPer100g,
      'fiberPer100g': fiberPer100g,
      'sugarPer100g': sugarPer100g,
      'sodiumPer100g': sodiumPer100g,
      'vitaminAPer100g': vitaminAPer100g,
      'vitaminCPer100g': vitaminCPer100g,
      'vitaminDPer100g': vitaminDPer100g,
      'calciumPer100g': calciumPer100g,
      'ironPer100g': ironPer100g,
      'allergens': allergens,
      'minAgeMonths': minAgeMonths,
      'isOrganic': isOrganic,
      'brand': brand,
      'barcode': barcode,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static FoodItem fromJson(Map<String, dynamic> json) {
    return FoodItem(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      description: json['description'] ?? '',
      category: FoodCategory.values.firstWhere(
        (e) => e.name == json['category'],
        orElse: () => FoodCategory.fruits,
      ),
      defaultUnit: MeasurementUnit.values.firstWhere(
        (e) => e.name == json['defaultUnit'],
        orElse: () => MeasurementUnit.grams,
      ),
      caloriesPer100g: (json['caloriesPer100g'] ?? 0).toDouble(),
      proteinPer100g: (json['proteinPer100g'] ?? 0).toDouble(),
      fatsPer100g: (json['fatsPer100g'] ?? 0).toDouble(),
      carbsPer100g: (json['carbsPer100g'] ?? 0).toDouble(),
      fiberPer100g: (json['fiberPer100g'] ?? 0).toDouble(),
      sugarPer100g: (json['sugarPer100g'] ?? 0).toDouble(),
      sodiumPer100g: (json['sodiumPer100g'] ?? 0).toDouble(),
      vitaminAPer100g: (json['vitaminAPer100g'] ?? 0).toDouble(),
      vitaminCPer100g: (json['vitaminCPer100g'] ?? 0).toDouble(),
      vitaminDPer100g: (json['vitaminDPer100g'] ?? 0).toDouble(),
      calciumPer100g: (json['calciumPer100g'] ?? 0).toDouble(),
      ironPer100g: (json['ironPer100g'] ?? 0).toDouble(),
      allergens: List<String>.from(json['allergens'] ?? []),
      minAgeMonths: json['minAgeMonths'] ?? 0,
      isOrganic: json['isOrganic'] ?? false,
      brand: json['brand'],
      barcode: json['barcode'],
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get categoryDisplayName {
    switch (category) {
      case FoodCategory.fruits:
        return '–§—Ä—É–∫—Ç—ã';
      case FoodCategory.vegetables:
        return '–û–≤–æ—â–∏';
      case FoodCategory.grains:
        return '–ó–ª–∞–∫–∏ –∏ –∫—Ä—É–ø—ã';
      case FoodCategory.protein:
        return '–ë–µ–ª–∫–∏';
      case FoodCategory.dairy:
        return '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã';
      case FoodCategory.fats:
        return '–ñ–∏—Ä—ã –∏ –º–∞—Å–ª–∞';
      case FoodCategory.beverages:
        return '–ù–∞–ø–∏—Ç–∫–∏';
      case FoodCategory.snacks:
        return '–ü–µ—Ä–µ–∫—É—Å—ã';
      case FoodCategory.babyFood:
        return '–î–µ—Ç—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ';
      case FoodCategory.supplements:
        return '–í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏';
    }
  }

  String get unitDisplayName {
    switch (defaultUnit) {
      case MeasurementUnit.grams:
        return '–≥';
      case MeasurementUnit.milliliters:
        return '–º–ª';
      case MeasurementUnit.pieces:
        return '—à—Ç';
      case MeasurementUnit.cups:
        return '—á–∞—à–∫–∏';
      case MeasurementUnit.tablespoons:
        return '—Å—Ç.–ª.';
      case MeasurementUnit.teaspoons:
        return '—á.–ª.';
    }
  }

  bool get hasAllergens => allergens.isNotEmpty;
  
  bool isAllowedForAge(int ageMonths) => ageMonths >= minAgeMonths;
}

// –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
enum MealType {
  breakfast,    // –ó–∞–≤—Ç—Ä–∞–∫
  morningSnack, // –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–∫—É—Å
  lunch,        // –û–±–µ–¥
  afternoonSnack, // –ü–æ–ª–¥–Ω–∏–∫
  dinner,       // –£–∂–∏–Ω
  eveningSnack, // –í–µ—á–µ—Ä–Ω–∏–π –ø–µ—Ä–µ–∫—É—Å
  nightFeeding, // –ù–æ—á–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
}

// –ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
class NutritionEntry {
  final String id;
  final String childId;
  final String foodItemId;
  final String foodName;        // –î—É–±–ª–∏–∫–∞—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  final MealType mealType;
  final double amount;          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ
  final MeasurementUnit unit;   // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  final DateTime mealTime;
  final String? notes;          // –ó–∞–º–µ—Ç–∫–∏ (—Ä–µ–∞–∫—Ü–∏—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
  final List<String> photos;    // –§–æ—Ç–æ –µ–¥—ã
  final bool wasFinished;       // –°—ä–µ–ª –ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
  final int appetite;           // –ê–ø–ø–µ—Ç–∏—Ç 1-5
  final DateTime createdAt;
  final DateTime updatedAt;

  NutritionEntry({
    required this.id,
    required this.childId,
    required this.foodItemId,
    required this.foodName,
    required this.mealType,
    required this.amount,
    required this.unit,
    required this.mealTime,
    this.notes,
    required this.photos,
    required this.wasFinished,
    required this.appetite,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'foodItemId': foodItemId,
      'foodName': foodName,
      'mealType': mealType.name,
      'amount': amount,
      'unit': unit.name,
      'mealTime': Timestamp.fromDate(mealTime),
      'notes': notes,
      'photos': photos,
      'wasFinished': wasFinished,
      'appetite': appetite,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static NutritionEntry fromJson(Map<String, dynamic> json) {
    return NutritionEntry(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      foodItemId: json['foodItemId'] ?? '',
      foodName: json['foodName'] ?? '',
      mealType: MealType.values.firstWhere(
        (e) => e.name == json['mealType'],
        orElse: () => MealType.breakfast,
      ),
      amount: (json['amount'] ?? 0).toDouble(),
      unit: MeasurementUnit.values.firstWhere(
        (e) => e.name == json['unit'],
        orElse: () => MeasurementUnit.grams,
      ),
      mealTime: (json['mealTime'] as Timestamp).toDate(),
      notes: json['notes'],
      photos: List<String>.from(json['photos'] ?? []),
      wasFinished: json['wasFinished'] ?? false,
      appetite: json['appetite'] ?? 3,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get mealTypeDisplayName {
    switch (mealType) {
      case MealType.breakfast:
        return '–ó–∞–≤—Ç—Ä–∞–∫';
      case MealType.morningSnack:
        return '–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–∫—É—Å';
      case MealType.lunch:
        return '–û–±–µ–¥';
      case MealType.afternoonSnack:
        return '–ü–æ–ª–¥–Ω–∏–∫';
      case MealType.dinner:
        return '–£–∂–∏–Ω';
      case MealType.eveningSnack:
        return '–í–µ—á–µ—Ä–Ω–∏–π –ø–µ—Ä–µ–∫—É—Å';
      case MealType.nightFeeding:
        return '–ù–æ—á–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ';
    }
  }

  String get appetiteDescription {
    switch (appetite) {
      case 1:
        return '–û—Ç–∫–∞–∑–∞–ª—Å—è';
      case 2:
        return '–ü–ª–æ—Ö–æ–π –∞–ø–ø–µ—Ç–∏—Ç';
      case 3:
        return '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π';
      case 4:
        return '–•–æ—Ä–æ—à–∏–π –∞–ø–ø–µ—Ç–∏—Ç';
      case 5:
        return '–û—Ç–ª–∏—á–Ω—ã–π –∞–ø–ø–µ—Ç–∏—Ç';
      default:
        return '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π';
    }
  }
}

// –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Ä–µ—Ü–µ–ø—Ç–∞
class RecipeIngredient {
  final String foodItemId;
  final String foodName;
  final double amount;
  final MeasurementUnit unit;
  final bool isOptional;
  final String? notes;

  RecipeIngredient({
    required this.foodItemId,
    required this.foodName,
    required this.amount,
    required this.unit,
    required this.isOptional,
    this.notes,
  });

  Map<String, dynamic> toJson() {
    return {
      'foodItemId': foodItemId,
      'foodName': foodName,
      'amount': amount,
      'unit': unit.name,
      'isOptional': isOptional,
      'notes': notes,
    };
  }

  static RecipeIngredient fromJson(Map<String, dynamic> json) {
    return RecipeIngredient(
      foodItemId: json['foodItemId'] ?? '',
      foodName: json['foodName'] ?? '',
      amount: (json['amount'] ?? 0).toDouble(),
      unit: MeasurementUnit.values.firstWhere(
        (e) => e.name == json['unit'],
        orElse: () => MeasurementUnit.grams,
      ),
      isOptional: json['isOptional'] ?? false,
      notes: json['notes'],
    );
  }
}

// –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–∞
enum RecipeDifficulty {
  veryEasy,   // –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ
  easy,       // –ü—Ä–æ—Å—Ç–æ
  medium,     // –°—Ä–µ–¥–Ω–µ
  hard,       // –°–ª–æ–∂–Ω–æ
  veryHard,   // –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ
}

// –†–µ—Ü–µ–ø—Ç
class Recipe {
  final String id;
  final String name;
  final String description;
  final List<RecipeIngredient> ingredients;
  final List<String> instructions;    // –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  final int prepTimeMinutes;         // –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  final int cookTimeMinutes;         // –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏
  final int servings;               // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
  final RecipeDifficulty difficulty;
  final int minAgeMonths;           // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
  final List<String> tags;          // –¢–µ–≥–∏ (–∑–¥–æ—Ä–æ–≤–æ–µ, –±—ã—Å—Ç—Ä–æ–µ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–¥.)
  final List<String> allergens;     // –ê–ª–ª–µ—Ä–≥–µ–Ω—ã –≤ —Ä–µ—Ü–µ–ø—Ç–µ
  final List<String> photos;        // –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞
  final double rating;              // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
  final int ratingsCount;           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
  final String authorId;            // –ê–≤—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞
  final bool isPremium;             // –ü—Ä–µ–º–∏—É–º —Ä–µ—Ü–µ–ø—Ç
  final DateTime createdAt;
  final DateTime updatedAt;

  Recipe({
    required this.id,
    required this.name,
    required this.description,
    required this.ingredients,
    required this.instructions,
    required this.prepTimeMinutes,
    required this.cookTimeMinutes,
    required this.servings,
    required this.difficulty,
    required this.minAgeMonths,
    required this.tags,
    required this.allergens,
    required this.photos,
    required this.rating,
    required this.ratingsCount,
    required this.authorId,
    required this.isPremium,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'ingredients': ingredients.map((i) => i.toJson()).toList(),
      'instructions': instructions,
      'prepTimeMinutes': prepTimeMinutes,
      'cookTimeMinutes': cookTimeMinutes,
      'servings': servings,
      'difficulty': difficulty.name,
      'minAgeMonths': minAgeMonths,
      'tags': tags,
      'allergens': allergens,
      'photos': photos,
      'rating': rating,
      'ratingsCount': ratingsCount,
      'authorId': authorId,
      'isPremium': isPremium,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static Recipe fromJson(Map<String, dynamic> json) {
    return Recipe(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      description: json['description'] ?? '',
      ingredients: (json['ingredients'] as List<dynamic>? ?? [])
          .map((i) => RecipeIngredient.fromJson(i))
          .toList(),
      instructions: List<String>.from(json['instructions'] ?? []),
      prepTimeMinutes: json['prepTimeMinutes'] ?? 0,
      cookTimeMinutes: json['cookTimeMinutes'] ?? 0,
      servings: json['servings'] ?? 1,
      difficulty: RecipeDifficulty.values.firstWhere(
        (e) => e.name == json['difficulty'],
        orElse: () => RecipeDifficulty.easy,
      ),
      minAgeMonths: json['minAgeMonths'] ?? 0,
      tags: List<String>.from(json['tags'] ?? []),
      allergens: List<String>.from(json['allergens'] ?? []),
      photos: List<String>.from(json['photos'] ?? []),
      rating: (json['rating'] ?? 0).toDouble(),
      ratingsCount: json['ratingsCount'] ?? 0,
      authorId: json['authorId'] ?? '',
      isPremium: json['isPremium'] ?? false,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get difficultyDisplayName {
    switch (difficulty) {
      case RecipeDifficulty.veryEasy:
        return '–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ';
      case RecipeDifficulty.easy:
        return '–ü—Ä–æ—Å—Ç–æ';
      case RecipeDifficulty.medium:
        return '–°—Ä–µ–¥–Ω–µ';
      case RecipeDifficulty.hard:
        return '–°–ª–æ–∂–Ω–æ';
      case RecipeDifficulty.veryHard:
        return '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ';
    }
  }

  int get totalTimeMinutes => prepTimeMinutes + cookTimeMinutes;
  
  bool get hasAllergens => allergens.isNotEmpty;
  
  bool isAllowedForAge(int ageMonths) => ageMonths >= minAgeMonths;
  
  String get formattedRating => rating.toStringAsFixed(1);
}

// –¢–∏–ø –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏
enum AllergyReactionType {
  mild,        // –õ–µ–≥–∫–∞—è
  moderate,    // –°—Ä–µ–¥–Ω—è—è
  severe,      // –¢—è–∂–µ–ª–∞—è
  anaphylaxis; // –ê–Ω–∞—Ñ–∏–ª–∞–∫—Å–∏—è
  
  String get displayName {
    switch (this) {
      case AllergyReactionType.mild:
        return '–õ–µ–≥–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è';
      case AllergyReactionType.moderate:
        return '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è';
      case AllergyReactionType.severe:
        return '–¢—è–∂–µ–ª–∞—è —Ä–µ–∞–∫—Ü–∏—è';
      case AllergyReactionType.anaphylaxis:
        return '–ê–Ω–∞—Ñ–∏–ª–∞–∫—Å–∏—è';
    }
  }
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏
class AllergyInfo {
  final String id;
  final String childId;
  final String allergen;                    // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–∞
  final AllergyReactionType reactionType;   // –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
  final List<String> symptoms;             // –°–∏–º–ø—Ç–æ–º—ã
  final DateTime firstReactionDate;        // –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏
  final DateTime? lastReactionDate;        // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∞–∫—Ü–∏–∏
  final bool isConfirmedByDoctor;         // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤—Ä–∞—á–æ–º
  final String? doctorNotes;              // –ó–∞–º–µ—Ç–∫–∏ –≤—Ä–∞—á–∞
  final List<String> avoidFoods;          // –ü—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å
  final String? emergencyMedication;      // –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏
  final bool isActive;                    // –ê–∫—Ç–∏–≤–Ω–∞—è –∞–ª–ª–µ—Ä–≥–∏—è
  final DateTime createdAt;
  final DateTime updatedAt;

  AllergyInfo({
    required this.id,
    required this.childId,
    required this.allergen,
    required this.reactionType,
    required this.symptoms,
    required this.firstReactionDate,
    this.lastReactionDate,
    required this.isConfirmedByDoctor,
    this.doctorNotes,
    required this.avoidFoods,
    this.emergencyMedication,
    required this.isActive,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'allergen': allergen,
      'reactionType': reactionType.name,
      'symptoms': symptoms,
      'firstReactionDate': Timestamp.fromDate(firstReactionDate),
      'lastReactionDate': lastReactionDate != null 
          ? Timestamp.fromDate(lastReactionDate!) 
          : null,
      'isConfirmedByDoctor': isConfirmedByDoctor,
      'doctorNotes': doctorNotes,
      'avoidFoods': avoidFoods,
      'emergencyMedication': emergencyMedication,
      'isActive': isActive,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static AllergyInfo fromJson(Map<String, dynamic> json) {
    return AllergyInfo(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      allergen: json['allergen'] ?? '',
      reactionType: AllergyReactionType.values.firstWhere(
        (e) => e.name == json['reactionType'],
        orElse: () => AllergyReactionType.mild,
      ),
      symptoms: List<String>.from(json['symptoms'] ?? []),
      firstReactionDate: (json['firstReactionDate'] as Timestamp).toDate(),
      lastReactionDate: json['lastReactionDate'] != null
          ? (json['lastReactionDate'] as Timestamp).toDate()
          : null,
      isConfirmedByDoctor: json['isConfirmedByDoctor'] ?? false,
      doctorNotes: json['doctorNotes'],
      avoidFoods: List<String>.from(json['avoidFoods'] ?? []),
      emergencyMedication: json['emergencyMedication'],
      isActive: json['isActive'] ?? true,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get reactionTypeDisplayName {
    switch (reactionType) {
      case AllergyReactionType.mild:
        return '–õ–µ–≥–∫–∞—è';
      case AllergyReactionType.moderate:
        return '–°—Ä–µ–¥–Ω—è—è';
      case AllergyReactionType.severe:
        return '–¢—è–∂–µ–ª–∞—è';
      case AllergyReactionType.anaphylaxis:
        return '–ê–Ω–∞—Ñ–∏–ª–∞–∫—Å–∏—è';
    }
  }

  int get reactionTypeColorHex {
    switch (reactionType) {
      case AllergyReactionType.mild:
        return 0xFFFFEB3B; // yellow
      case AllergyReactionType.moderate:
        return 0xFFFF9800; // orange
      case AllergyReactionType.severe:
        return 0xFFF44336; // red
      case AllergyReactionType.anaphylaxis:
        return 0xFFB71C1C; // dark red
    }
  }

  bool get isEmergency => 
      reactionType == AllergyReactionType.severe ||
      reactionType == AllergyReactionType.anaphylaxis;
}

// –¶–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è
class NutritionGoals {
  final String id;
  final String childId;
  final int ageMonths;              // –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞
  final double targetCalories;      // –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å
  final double targetProtein;       // –¶–µ–ª–µ–≤–æ–π –±–µ–ª–æ–∫ (–≥)
  final double targetFats;          // –¶–µ–ª–µ–≤—ã–µ –∂–∏—Ä—ã (–≥)
  final double targetCarbs;         // –¶–µ–ª–µ–≤—ã–µ —É–≥–ª–µ–≤–æ–¥—ã (–≥)
  final double targetFiber;         // –¶–µ–ª–µ–≤–∞—è –∫–ª–µ—Ç—á–∞—Ç–∫–∞ (–≥)
  final double targetVitaminA;      // –¶–µ–ª–µ–≤–æ–π –≤–∏—Ç–∞–º–∏–Ω A (–º–∫–≥)
  final double targetVitaminC;      // –¶–µ–ª–µ–≤–æ–π –≤–∏—Ç–∞–º–∏–Ω C (–º–≥)
  final double targetVitaminD;      // –¶–µ–ª–µ–≤–æ–π –≤–∏—Ç–∞–º–∏–Ω D (–º–∫–≥)
  final double targetCalcium;       // –¶–µ–ª–µ–≤–æ–π –∫–∞–ª—å—Ü–∏–π (–º–≥)
  final double targetIron;          // –¶–µ–ª–µ–≤–æ–µ –∂–µ–ª–µ–∑–æ (–º–≥)
  final double targetWater;         // –¶–µ–ª–µ–≤–∞—è –≤–æ–¥–∞ (–º–ª)
  final bool isCustom;              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏
  final DateTime validFrom;         // –î–µ–π—Å—Ç–≤—É–µ—Ç —Å
  final DateTime? validUntil;       // –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ
  final DateTime createdAt;
  final DateTime updatedAt;

  NutritionGoals({
    required this.id,
    required this.childId,
    required this.ageMonths,
    required this.targetCalories,
    required this.targetProtein,
    required this.targetFats,
    required this.targetCarbs,
    required this.targetFiber,
    required this.targetVitaminA,
    required this.targetVitaminC,
    required this.targetVitaminD,
    required this.targetCalcium,
    required this.targetIron,
    required this.targetWater,
    required this.isCustom,
    required this.validFrom,
    this.validUntil,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'ageMonths': ageMonths,
      'targetCalories': targetCalories,
      'targetProtein': targetProtein,
      'targetFats': targetFats,
      'targetCarbs': targetCarbs,
      'targetFiber': targetFiber,
      'targetVitaminA': targetVitaminA,
      'targetVitaminC': targetVitaminC,
      'targetVitaminD': targetVitaminD,
      'targetCalcium': targetCalcium,
      'targetIron': targetIron,
      'targetWater': targetWater,
      'isCustom': isCustom,
      'validFrom': Timestamp.fromDate(validFrom),
      'validUntil': validUntil != null ? Timestamp.fromDate(validUntil!) : null,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static NutritionGoals fromJson(Map<String, dynamic> json) {
    return NutritionGoals(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      ageMonths: json['ageMonths'] ?? 0,
      targetCalories: (json['targetCalories'] ?? 0).toDouble(),
      targetProtein: (json['targetProtein'] ?? 0).toDouble(),
      targetFats: (json['targetFats'] ?? 0).toDouble(),
      targetCarbs: (json['targetCarbs'] ?? 0).toDouble(),
      targetFiber: (json['targetFiber'] ?? 0).toDouble(),
      targetVitaminA: (json['targetVitaminA'] ?? 0).toDouble(),
      targetVitaminC: (json['targetVitaminC'] ?? 0).toDouble(),
      targetVitaminD: (json['targetVitaminD'] ?? 0).toDouble(),
      targetCalcium: (json['targetCalcium'] ?? 0).toDouble(),
      targetIron: (json['targetIron'] ?? 0).toDouble(),
      targetWater: (json['targetWater'] ?? 0).toDouble(),
      isCustom: json['isCustom'] ?? false,
      validFrom: (json['validFrom'] as Timestamp).toDate(),
      validUntil: json['validUntil'] != null 
          ? (json['validUntil'] as Timestamp).toDate() 
          : null,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –í–û–ó)
  static NutritionGoals createStandardGoals(String childId, int ageMonths) {
    final now = DateTime.now();
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    double calories, protein, fats, carbs, fiber, vitA, vitC, vitD, calcium, iron, water;
    
    if (ageMonths < 6) {
      // 0-6 –º–µ—Å—è—Ü–µ–≤ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ/—Å–º–µ—Å—å)
      calories = 600;
      protein = 9;
      fats = 31;
      carbs = 65;
      fiber = 0;
      vitA = 400;
      vitC = 40;
      vitD = 10;
      calcium = 200;
      iron = 0.27;
      water = 700;
    } else if (ageMonths < 12) {
      // 6-12 –º–µ—Å—è—Ü–µ–≤ (–≤–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞)
      calories = 700;
      protein = 11;
      fats = 30;
      carbs = 95;
      fiber = 5;
      vitA = 500;
      vitC = 50;
      vitD = 10;
      calcium = 260;
      iron = 11;
      water = 800;
    } else if (ageMonths < 24) {
      // 1-2 –≥–æ–¥–∞
      calories = 1000;
      protein = 13;
      fats = 30;
      carbs = 130;
      fiber = 19;
      vitA = 300;
      vitC = 15;
      vitD = 15;
      calcium = 700;
      iron = 7;
      water = 1300;
    } else if (ageMonths < 36) {
      // 2-3 –≥–æ–¥–∞
      calories = 1200;
      protein = 16;
      fats = 35;
      carbs = 130;
      fiber = 25;
      vitA = 400;
      vitC = 25;
      vitD = 15;
      calcium = 1000;
      iron = 10;
      water = 1300;
    } else {
      // 3+ –≥–æ–¥–∞
      calories = 1400;
      protein = 20;
      fats = 40;
      carbs = 130;
      fiber = 30;
      vitA = 500;
      vitC = 30;
      vitD = 15;
      calcium = 1000;
      iron = 10;
      water = 1700;
    }

    return NutritionGoals(
      id: '',
      childId: childId,
      ageMonths: ageMonths,
      targetCalories: calories,
      targetProtein: protein,
      targetFats: fats,
      targetCarbs: carbs,
      targetFiber: fiber,
      targetVitaminA: vitA,
      targetVitaminC: vitC,
      targetVitaminD: vitD,
      targetCalcium: calcium,
      targetIron: iron,
      targetWater: water,
      isCustom: false,
      validFrom: now,
      validUntil: null,
      createdAt: now,
      updatedAt: now,
    );
  }
}

// ===== –î–ù–ï–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ü–ò–¢–ê–ù–ò–Ø =====
class DailyNutritionAnalysis {
  final String id;
  final String childId;
  final DateTime analysisDate;
  final List<NutritionEntry> nutritionEntries;
  final NutritionGoals goals;
  
  // –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
  final double actualCalories;
  final double actualProtein;
  final double actualFats;
  final double actualCarbs;
  final double actualFiber;
  final double actualVitaminA;
  final double actualVitaminC;
  final double actualVitaminD;
  final double actualCalcium;
  final double actualIron;
  final double actualWater;
  
  // –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
  final Map<String, double> goalCompletion;
  
  // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
  final double overallScore;        // 0-100
  final List<String> achievements;  // –ß—Ç–æ —Ö–æ—Ä–æ—à–æ
  final List<String> concerns;      // –ß—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
  final List<String> recommendations; // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
  final int totalMeals;
  final double averageAppetite;
  final int mealsFinished;
  final Map<MealType, int> mealDistribution;
  
  final DateTime createdAt;

  DailyNutritionAnalysis({
    required this.id,
    required this.childId,
    required this.analysisDate,
    required this.nutritionEntries,
    required this.goals,
    required this.actualCalories,
    required this.actualProtein,
    required this.actualFats,
    required this.actualCarbs,
    required this.actualFiber,
    required this.actualVitaminA,
    required this.actualVitaminC,
    required this.actualVitaminD,
    required this.actualCalcium,
    required this.actualIron,
    required this.actualWater,
    required this.goalCompletion,
    required this.overallScore,
    required this.achievements,
    required this.concerns,
    required this.recommendations,
    required this.totalMeals,
    required this.averageAppetite,
    required this.mealsFinished,
    required this.mealDistribution,
    required this.createdAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'analysisDate': Timestamp.fromDate(analysisDate),
      'actualCalories': actualCalories,
      'actualProtein': actualProtein,
      'actualFats': actualFats,
      'actualCarbs': actualCarbs,
      'actualFiber': actualFiber,
      'actualVitaminA': actualVitaminA,
      'actualVitaminC': actualVitaminC,
      'actualVitaminD': actualVitaminD,
      'actualCalcium': actualCalcium,
      'actualIron': actualIron,
      'actualWater': actualWater,
      'goalCompletion': goalCompletion,
      'overallScore': overallScore,
      'achievements': achievements,
      'concerns': concerns,
      'recommendations': recommendations,
      'totalMeals': totalMeals,
      'averageAppetite': averageAppetite,
      'mealsFinished': mealsFinished,
      'mealDistribution': mealDistribution.map((k, v) => MapEntry(k.name, v)),
      'createdAt': Timestamp.fromDate(createdAt),
    };
  }

  static DailyNutritionAnalysis fromJson(Map<String, dynamic> json, {
    required List<NutritionEntry> nutritionEntries,
    required NutritionGoals goals,
  }) {
    return DailyNutritionAnalysis(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      analysisDate: (json['analysisDate'] as Timestamp).toDate(),
      nutritionEntries: nutritionEntries,
      goals: goals,
      actualCalories: (json['actualCalories'] ?? 0).toDouble(),
      actualProtein: (json['actualProtein'] ?? 0).toDouble(),
      actualFats: (json['actualFats'] ?? 0).toDouble(),
      actualCarbs: (json['actualCarbs'] ?? 0).toDouble(),
      actualFiber: (json['actualFiber'] ?? 0).toDouble(),
      actualVitaminA: (json['actualVitaminA'] ?? 0).toDouble(),
      actualVitaminC: (json['actualVitaminC'] ?? 0).toDouble(),
      actualVitaminD: (json['actualVitaminD'] ?? 0).toDouble(),
      actualCalcium: (json['actualCalcium'] ?? 0).toDouble(),
      actualIron: (json['actualIron'] ?? 0).toDouble(),
      actualWater: (json['actualWater'] ?? 0).toDouble(),
      goalCompletion: Map<String, double>.from(json['goalCompletion'] ?? {}),
      overallScore: (json['overallScore'] ?? 0).toDouble(),
      achievements: List<String>.from(json['achievements'] ?? []),
      concerns: List<String>.from(json['concerns'] ?? []),
      recommendations: List<String>.from(json['recommendations'] ?? []),
      totalMeals: json['totalMeals'] ?? 0,
      averageAppetite: (json['averageAppetite'] ?? 0).toDouble(),
      mealsFinished: json['mealsFinished'] ?? 0,
      mealDistribution: (json['mealDistribution'] as Map<String, dynamic>? ?? {})
          .map((k, v) => MapEntry(
                MealType.values.firstWhere(
                  (e) => e.name == k,
                  orElse: () => MealType.breakfast,
                ),
                v as int,
              )),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  String get overallAssessment {
    if (overallScore >= 90) return '–û—Ç–ª–∏—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ';
    if (overallScore >= 80) return '–•–æ—Ä–æ—à–µ–µ –ø–∏—Ç–∞–Ω–∏–µ';
    if (overallScore >= 70) return '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ';
    if (overallScore >= 60) return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
    return '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è';
  }

  double get calorieCompletion => goalCompletion['calories'] ?? 0;
  double get proteinCompletion => goalCompletion['protein'] ?? 0;
  double get vitaminCCompletion => goalCompletion['vitaminC'] ?? 0;
  
  bool get hasDeficiencies => concerns.isNotEmpty;
  bool get hasAchievements => achievements.isNotEmpty;
  
  double get finishedMealsPercentage => 
      totalMeals > 0 ? (mealsFinished / totalMeals) * 100 : 0;
}

// ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• –°–ù–ê =====

// –¢–∏–ø —Å–æ–±—ã—Ç–∏—è —Å–Ω–∞
enum SleepEventType {
  bedtime,        // –í—Ä–µ–º—è —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
  fallAsleep,     // –ó–∞—Å—ã–ø–∞–Ω–∏–µ
  nightWaking,    // –ù–æ—á–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
  morningWakeup,  // –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
  nap,           // –î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω
}

// –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
enum SleepQuality {
  excellent,  // –û—Ç–ª–∏—á–Ω–æ–µ
  good,       // –•–æ—Ä–æ—à–µ–µ  
  fair,       // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
  poor,       // –ü–ª–æ—Ö–æ–µ
  terrible;   // –£–∂–∞—Å–Ω–æ–µ
  
  String get displayName {
    switch (this) {
      case SleepQuality.excellent:
        return '–û—Ç–ª–∏—á–Ω–æ–µ';
      case SleepQuality.good:
        return '–•–æ—Ä–æ—à–µ–µ';
      case SleepQuality.fair:
        return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ';
      case SleepQuality.poor:
        return '–ü–ª–æ—Ö–æ–µ';
      case SleepQuality.terrible:
        return '–£–∂–∞—Å–Ω–æ–µ';
    }
  }
  
  int get scoreValue {
    switch (this) {
      case SleepQuality.excellent:
        return 5;
      case SleepQuality.good:
        return 4;
      case SleepQuality.fair:
        return 3;
      case SleepQuality.poor:
        return 2;
      case SleepQuality.terrible:
        return 1;
    }
  }
  
  int get colorHex {
    switch (this) {
      case SleepQuality.excellent:
        return 0xFF4CAF50; // green
      case SleepQuality.good:
        return 0xFF8BC34A; // light green
      case SleepQuality.fair:
        return 0xFFFFC107; // amber
      case SleepQuality.poor:
        return 0xFFFF9800; // orange
      case SleepQuality.terrible:
        return 0xFFF44336; // red
    }
  }
}

// –ó–∞–ø–∏—Å—å –æ —Å–Ω–µ
class SleepEntry {
  final String id;
  final String childId;
  final DateTime date;               // –î–∞—Ç–∞ —Å–Ω–∞
  final DateTime? bedtime;           // –í—Ä–µ–º—è —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
  final DateTime? fallAsleepTime;    // –í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
  final DateTime? wakeupTime;        // –í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
  final Duration? totalSleepTime;    // –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞
  final Duration? timeToFallAsleep;  // –í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è (–æ—Ç —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è)
  final List<SleepInterruption> interruptions; // –ù–æ—á–Ω—ã–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
  final List<Nap> naps;             // –î–Ω–µ–≤–Ω—ã–µ —Å–Ω—ã
  final SleepQuality quality;        // –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
  final String? notes;               // –ó–∞–º–µ—Ç–∫–∏
  final Map<String, dynamic> factors; // –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è (–µ–¥–∞, –±–æ–ª–µ–∑–Ω—å, –∑—É–±—ã –∏ —Ç.–¥.)
  final DateTime createdAt;
  final DateTime updatedAt;

  SleepEntry({
    required this.id,
    required this.childId,
    required this.date,
    this.bedtime,
    this.fallAsleepTime,
    this.wakeupTime,
    this.totalSleepTime,
    this.timeToFallAsleep,
    required this.interruptions,
    required this.naps,
    required this.quality,
    this.notes,
    required this.factors,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'date': Timestamp.fromDate(date),
      'bedtime': bedtime != null ? Timestamp.fromDate(bedtime!) : null,
      'fallAsleepTime': fallAsleepTime != null ? Timestamp.fromDate(fallAsleepTime!) : null,
      'wakeupTime': wakeupTime != null ? Timestamp.fromDate(wakeupTime!) : null,
      'totalSleepTime': totalSleepTime?.inMinutes,
      'timeToFallAsleep': timeToFallAsleep?.inMinutes,
      'interruptions': interruptions.map((i) => i.toJson()).toList(),
      'naps': naps.map((n) => n.toJson()).toList(),
      'quality': quality.name,
      'notes': notes,
      'factors': factors,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static SleepEntry fromJson(Map<String, dynamic> json) {
    return SleepEntry(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      date: (json['date'] as Timestamp).toDate(),
      bedtime: json['bedtime'] != null ? (json['bedtime'] as Timestamp).toDate() : null,
      fallAsleepTime: json['fallAsleepTime'] != null ? (json['fallAsleepTime'] as Timestamp).toDate() : null,
      wakeupTime: json['wakeupTime'] != null ? (json['wakeupTime'] as Timestamp).toDate() : null,
      totalSleepTime: json['totalSleepTime'] != null ? Duration(minutes: json['totalSleepTime']) : null,
      timeToFallAsleep: json['timeToFallAsleep'] != null ? Duration(minutes: json['timeToFallAsleep']) : null,
      interruptions: (json['interruptions'] as List? ?? [])
          .map((i) => SleepInterruption.fromJson(i))
          .toList(),
      naps: (json['naps'] as List? ?? [])
          .map((n) => Nap.fromJson(n))
          .toList(),
      quality: SleepQuality.values.firstWhere(
        (q) => q.name == json['quality'],
        orElse: () => SleepQuality.fair,
      ),
      notes: json['notes'],
      factors: Map<String, dynamic>.from(json['factors'] ?? {}),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  Duration get actualSleepTime {
    if (totalSleepTime != null) return totalSleepTime!;
    
    if (fallAsleepTime != null && wakeupTime != null) {
      final grossSleep = wakeupTime!.difference(fallAsleepTime!);
      final interruptionTime = interruptions.fold<Duration>(
        Duration.zero,
        (sum, interruption) => sum + interruption.duration,
      );
      return grossSleep - interruptionTime;
    }
    
    return Duration.zero;
  }

  Duration get totalNapTime {
    return naps.fold<Duration>(
      Duration.zero,
      (sum, nap) => sum + nap.duration,
    );
  }

  Duration get totalDailySleep => actualSleepTime + totalNapTime;

  int get nightWakings => interruptions.length;

  bool get isCompleteEntry {
    return bedtime != null && 
           fallAsleepTime != null && 
           wakeupTime != null;
  }

  String get formattedSleepTime {
    final sleep = actualSleepTime;
    final hours = sleep.inHours;
    final minutes = sleep.inMinutes.remainder(60);
    return '${hours}—á ${minutes}–º';
  }

  String get bedtimeString {
    if (bedtime == null) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return '${bedtime!.hour.toString().padLeft(2, '0')}:${bedtime!.minute.toString().padLeft(2, '0')}';
  }

  String get wakeupString {
    if (wakeupTime == null) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return '${wakeupTime!.hour.toString().padLeft(2, '0')}:${wakeupTime!.minute.toString().padLeft(2, '0')}';
  }
}

// –ù–æ—á–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
class SleepInterruption {
  final DateTime startTime;
  final DateTime? endTime;
  final String? reason;        // –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
  final String? intervention;  // –ß—Ç–æ –¥–µ–ª–∞–ª–∏ –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è

  SleepInterruption({
    required this.startTime,
    this.endTime,
    this.reason,
    this.intervention,
  });

  Duration get duration {
    if (endTime == null) return Duration.zero;
    return endTime!.difference(startTime);
  }

  Map<String, dynamic> toJson() {
    return {
      'startTime': Timestamp.fromDate(startTime),
      'endTime': endTime != null ? Timestamp.fromDate(endTime!) : null,
      'reason': reason,
      'intervention': intervention,
    };
  }

  static SleepInterruption fromJson(Map<String, dynamic> json) {
    return SleepInterruption(
      startTime: (json['startTime'] as Timestamp).toDate(),
      endTime: json['endTime'] != null ? (json['endTime'] as Timestamp).toDate() : null,
      reason: json['reason'],
      intervention: json['intervention'],
    );
  }
}

// –î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω
class Nap {
  final DateTime startTime;
  final DateTime? endTime;
  final String? location;  // –ì–¥–µ —Å–ø–∞–ª (–∫—Ä–æ–≤–∞—Ç–∫–∞, –∫–æ–ª—è—Å–∫–∞, –Ω–∞ —Ä—É–∫–∞—Ö)
  final SleepQuality quality;

  Nap({
    required this.startTime,
    this.endTime,
    this.location,
    required this.quality,
  });

  Duration get duration {
    if (endTime == null) return Duration.zero;
    return endTime!.difference(startTime);
  }

  String get formattedDuration {
    final d = duration;
    final hours = d.inHours;
    final minutes = d.inMinutes.remainder(60);
    if (hours > 0) {
      return '${hours}—á ${minutes}–º';
    } else {
      return '${minutes}–º';
    }
  }

  Map<String, dynamic> toJson() {
    return {
      'startTime': Timestamp.fromDate(startTime),
      'endTime': endTime != null ? Timestamp.fromDate(endTime!) : null,
      'location': location,
      'quality': quality.name,
    };
  }

  static Nap fromJson(Map<String, dynamic> json) {
    return Nap(
      startTime: (json['startTime'] as Timestamp).toDate(),
      endTime: json['endTime'] != null ? (json['endTime'] as Timestamp).toDate() : null,
      location: json['location'],
      quality: SleepQuality.values.firstWhere(
        (q) => q.name == json['quality'],
        orElse: () => SleepQuality.fair,
      ),
    );
  }
}

// –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
class SleepAnalysis {
  final String id;
  final String childId;
  final DateTime startDate;
  final DateTime endDate;
  final List<SleepEntry> sleepEntries;
  
  // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  final Duration averageNightSleep;
  final Duration averageDaytimeSleep;
  final Duration averageTotalSleep;
  final double averageBedtime;        // –í –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –ø–æ–ª—É–Ω–æ—á–∏
  final double averageWakeupTime;     // –í –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –ø–æ–ª—É–Ω–æ—á–∏
  final double averageTimeToFallAsleep; // –í –º–∏–Ω—É—Ç–∞—Ö
  final double averageNightWakings;
  final double averageSleepQuality;   // 1-5
  
  // –¢—Ä–µ–Ω–¥—ã
  final SleepTrend sleepTimeTrend;
  final SleepTrend qualityTrend;
  final SleepTrend bedtimeTrend;
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã
  final Map<String, dynamic> sleepPatterns;
  final List<String> insights;        // –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
  final List<String> recommendations; // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  final Map<String, int> commonFactors; // –ß–∞—Å—Ç—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è
  
  final DateTime createdAt;

  SleepAnalysis({
    required this.id,
    required this.childId,
    required this.startDate,
    required this.endDate,
    required this.sleepEntries,
    required this.averageNightSleep,
    required this.averageDaytimeSleep,
    required this.averageTotalSleep,
    required this.averageBedtime,
    required this.averageWakeupTime,
    required this.averageTimeToFallAsleep,
    required this.averageNightWakings,
    required this.averageSleepQuality,
    required this.sleepTimeTrend,
    required this.qualityTrend,
    required this.bedtimeTrend,
    required this.sleepPatterns,
    required this.insights,
    required this.recommendations,
    required this.commonFactors,
    required this.createdAt,
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
  String get averageBedtimeString {
    final minutes = averageBedtime.toInt();
    final hour = (minutes ~/ 60) % 24;
    final minute = minutes % 60;
    return '${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
  }

  String get averageWakeupTimeString {
    final minutes = averageWakeupTime.toInt();
    final hour = (minutes ~/ 60) % 24;
    final minute = minutes % 60;
    return '${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
  }

  String get formattedNightSleep {
    final hours = averageNightSleep.inHours;
    final minutes = averageNightSleep.inMinutes.remainder(60);
    return '${hours}—á ${minutes}–º';
  }

  String get formattedTotalSleep {
    final hours = averageTotalSleep.inHours;
    final minutes = averageTotalSleep.inMinutes.remainder(60);
    return '${hours}—á ${minutes}–º';
  }

  String get qualityAssessment {
    if (averageSleepQuality >= 4.5) return '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞';
    if (averageSleepQuality >= 3.5) return '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞';
    if (averageSleepQuality >= 2.5) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    if (averageSleepQuality >= 1.5) return '–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞';
    return '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞';
  }

  bool get hasGoodSleepHygiene {
    // –•–æ—Ä–æ—à–∞—è –≥–∏–≥–∏–µ–Ω–∞ —Å–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç:
    // 1. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è (—Ä–∞–∑–±—Ä–æ—Å < 30 –º–∏–Ω)
    // 2. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
    // 3. –ë—ã—Å—Ç—Ä–æ–µ –∑–∞—Å—ã–ø–∞–Ω–∏–µ (< 20 –º–∏–Ω)
    // 4. –ú–∞–ª–æ –Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π (< 2)
    
    return averageTimeToFallAsleep < 20 && 
           averageNightWakings < 2 &&
           averageSleepQuality >= 3.5;
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'startDate': Timestamp.fromDate(startDate),
      'endDate': Timestamp.fromDate(endDate),
      'averageNightSleep': averageNightSleep.inMinutes,
      'averageDaytimeSleep': averageDaytimeSleep.inMinutes,
      'averageTotalSleep': averageTotalSleep.inMinutes,
      'averageBedtime': averageBedtime,
      'averageWakeupTime': averageWakeupTime,
      'averageTimeToFallAsleep': averageTimeToFallAsleep,
      'averageNightWakings': averageNightWakings,
      'averageSleepQuality': averageSleepQuality,
      'sleepTimeTrend': sleepTimeTrend.name,
      'qualityTrend': qualityTrend.name,
      'bedtimeTrend': bedtimeTrend.name,
      'sleepPatterns': sleepPatterns,
      'insights': insights,
      'recommendations': recommendations,
      'commonFactors': commonFactors,
      'createdAt': Timestamp.fromDate(createdAt),
    };
  }

  static SleepAnalysis fromJson(Map<String, dynamic> json, List<SleepEntry> sleepEntries) {
    return SleepAnalysis(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      startDate: (json['startDate'] as Timestamp).toDate(),
      endDate: (json['endDate'] as Timestamp).toDate(),
      sleepEntries: sleepEntries,
      averageNightSleep: Duration(minutes: json['averageNightSleep'] ?? 0),
      averageDaytimeSleep: Duration(minutes: json['averageDaytimeSleep'] ?? 0),
      averageTotalSleep: Duration(minutes: json['averageTotalSleep'] ?? 0),
      averageBedtime: (json['averageBedtime'] ?? 0).toDouble(),
      averageWakeupTime: (json['averageWakeupTime'] ?? 0).toDouble(),
      averageTimeToFallAsleep: (json['averageTimeToFallAsleep'] ?? 0).toDouble(),
      averageNightWakings: (json['averageNightWakings'] ?? 0).toDouble(),
      averageSleepQuality: (json['averageSleepQuality'] ?? 0).toDouble(),
      sleepTimeTrend: SleepTrend.values.firstWhere(
        (t) => t.name == json['sleepTimeTrend'],
        orElse: () => SleepTrend.stable,
      ),
      qualityTrend: SleepTrend.values.firstWhere(
        (t) => t.name == json['qualityTrend'],
        orElse: () => SleepTrend.stable,
      ),
      bedtimeTrend: SleepTrend.values.firstWhere(
        (t) => t.name == json['bedtimeTrend'],
        orElse: () => SleepTrend.stable,
      ),
      sleepPatterns: Map<String, dynamic>.from(json['sleepPatterns'] ?? {}),
      insights: List<String>.from(json['insights'] ?? []),
      recommendations: List<String>.from(json['recommendations'] ?? []),
      commonFactors: Map<String, int>.from(json['commonFactors'] ?? {}),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
    );
  }
}

// –¢—Ä–µ–Ω–¥ —Å–Ω–∞
enum SleepTrend {
  improving,    // –£–ª—É—á—à–∞–µ—Ç—Å—è
  stable,       // –°—Ç–∞–±–∏–ª—å–Ω–æ
  declining,    // –£—Ö—É–¥—à–∞–µ—Ç—Å—è
  inconsistent; // –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ
  
  String get displayName {
    switch (this) {
      case SleepTrend.improving:
        return '–£–ª—É—á—à–∞–µ—Ç—Å—è';
      case SleepTrend.stable:
        return '–°—Ç–∞–±–∏–ª—å–Ω–æ';
      case SleepTrend.declining:
        return '–£—Ö—É–¥—à–∞–µ—Ç—Å—è';
      case SleepTrend.inconsistent:
        return '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ';
    }
  }
  
  int get colorHex {
    switch (this) {
      case SleepTrend.improving:
        return 0xFF4CAF50; // green
      case SleepTrend.stable:
        return 0xFF2196F3; // blue
      case SleepTrend.declining:
        return 0xFFF44336; // red
      case SleepTrend.inconsistent:
        return 0xFFFF9800; // orange
    }
  }
}

// ===== –ú–û–î–ï–õ–ò –≠–ö–°–¢–†–ï–ù–ù–´–• –°–ò–¢–£–ê–¶–ò–ô =====

// –¢–∏–ø —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
enum EmergencyType {
  choking,        // –£–¥—É—à—å–µ
  poisoning,      // –û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ
  injury,         // –¢—Ä–∞–≤–º–∞
  fever,          // –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
  allergic,       // –ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è
  breathing,      // –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º
  seizure,        // –°—É–¥–æ—Ä–æ–≥–∏
  unconscious,    // –ü–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è
  burns,          // –û–∂–æ–≥–∏
  other;          // –î—Ä—É–≥–æ–µ
  
  String get displayName {
    switch (this) {
      case EmergencyType.choking:
        return '–£–¥—É—à—å–µ';
      case EmergencyType.poisoning:
        return '–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ';
      case EmergencyType.injury:
        return '–¢—Ä–∞–≤–º–∞';
      case EmergencyType.fever:
        return '–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
      case EmergencyType.allergic:
        return '–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è';
      case EmergencyType.breathing:
        return '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º';
      case EmergencyType.seizure:
        return '–°—É–¥–æ—Ä–æ–≥–∏';
      case EmergencyType.unconscious:
        return '–ü–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è';
      case EmergencyType.burns:
        return '–û–∂–æ–≥–∏';
      case EmergencyType.other:
        return '–î—Ä—É–≥–æ–µ';
    }
  }
  
  String get iconEmoji {
    switch (this) {
      case EmergencyType.choking:
        return 'ü´Å';
      case EmergencyType.poisoning:
        return '‚ò†Ô∏è';
      case EmergencyType.injury:
        return 'ü©π';
      case EmergencyType.fever:
        return 'üå°Ô∏è';
      case EmergencyType.allergic:
        return 'üö®';
      case EmergencyType.breathing:
        return 'üí®';
      case EmergencyType.seizure:
        return '‚ö°';
      case EmergencyType.unconscious:
        return 'üòµ';
      case EmergencyType.burns:
        return 'üî•';
      case EmergencyType.other:
        return '‚ùó';
    }
  }
  
  int get priorityLevel {
    switch (this) {
      case EmergencyType.choking:
      case EmergencyType.unconscious:
      case EmergencyType.breathing:
        return 1; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
      case EmergencyType.poisoning:
      case EmergencyType.allergic:
      case EmergencyType.seizure:
        return 2; // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π
      case EmergencyType.fever:
      case EmergencyType.burns:
        return 3; // –í—ã—Å–æ–∫–∏–π
      case EmergencyType.injury:
        return 4; // –£–º–µ—Ä–µ–Ω–Ω—ã–π
      case EmergencyType.other:
        return 5; // –ù–∏–∑–∫–∏–π
    }
  }
  
  int get colorHex {
    switch (priorityLevel) {
      case 1:
        return 0xFFD32F2F; // –ö—Ä–∞—Å–Ω—ã–π - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
      case 2:
        return 0xFFFF5722; // –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π
      case 3:
        return 0xFFFF9800; // –û—Ä–∞–Ω–∂–µ–≤—ã–π - –≤—ã—Å–æ–∫–∏–π
      case 4:
        return 0xFFFFC107; // –ñ–µ–ª—Ç—ã–π - —É–º–µ—Ä–µ–Ω–Ω—ã–π
      case 5:
        return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π - –Ω–∏–∑–∫–∏–π
      default:
        return 0xFFD32F2F;
    }
  }
}

// –ö–æ–Ω—Ç–∞–∫—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã
class EmergencyContact {
  final String id;
  final String name;              // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª—É–∂–±—ã
  final String phone;             // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  final String description;       // –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª—É–∂–±—ã
  final EmergencyType type;       // –ö –∫–∞–∫–æ–º—É —Ç–∏–ø—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
  final bool isActive;            // –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  final String? address;          // –ê–¥—Ä–µ—Å (–¥–ª—è –±–æ–ª—å–Ω–∏—Ü, –∫–ª–∏–Ω–∏–∫)
  final String? workingHours;     // –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã
  final bool isAvailable24h;      // –†–∞–±–æ—Ç–∞–µ—Ç 24/7
  final String country;           // –°—Ç—Ä–∞–Ω–∞
  final String city;              // –ì–æ—Ä–æ–¥
  final int priority;             // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1 - –Ω–∞–∏–≤—ã—Å—à–∏–π)
  final DateTime createdAt;
  final DateTime updatedAt;

  EmergencyContact({
    required this.id,
    required this.name,
    required this.phone,
    required this.description,
    required this.type,
    required this.isActive,
    this.address,
    this.workingHours,
    required this.isAvailable24h,
    required this.country,
    required this.city,
    required this.priority,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'phone': phone,
      'description': description,
      'type': type.name,
      'isActive': isActive,
      'address': address,
      'workingHours': workingHours,
      'isAvailable24h': isAvailable24h,
      'country': country,
      'city': city,
      'priority': priority,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static EmergencyContact fromJson(Map<String, dynamic> json) {
    return EmergencyContact(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      phone: json['phone'] ?? '',
      description: json['description'] ?? '',
      type: EmergencyType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => EmergencyType.other,
      ),
      isActive: json['isActive'] ?? true,
      address: json['address'],
      workingHours: json['workingHours'],
      isAvailable24h: json['isAvailable24h'] ?? false,
      country: json['country'] ?? 'RU',
      city: json['city'] ?? '',
      priority: json['priority'] ?? 999,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  String get formattedPhone {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if (country == 'RU' && phone.length >= 10) {
      final cleaned = phone.replaceAll(RegExp(r'[^\d]'), '');
      if (cleaned.length == 11 && cleaned.startsWith('8')) {
        return '+7 ${cleaned.substring(1, 4)} ${cleaned.substring(4, 7)}-${cleaned.substring(7, 9)}-${cleaned.substring(9)}';
      } else if (cleaned.length == 11 && cleaned.startsWith('7')) {
        return '+${cleaned.substring(0, 1)} ${cleaned.substring(1, 4)} ${cleaned.substring(4, 7)}-${cleaned.substring(7, 9)}-${cleaned.substring(9)}';
      }
    }
    return phone;
  }

  bool get isAvailableNow {
    if (isAvailable24h) return true;
    
    if (workingHours == null) return true;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    final now = DateTime.now();
    final currentHour = now.hour;
    
    // –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤: "9:00-18:00", "08:00-20:00"
    final regex = RegExp(r'(\d{1,2}):(\d{2})-(\d{1,2}):(\d{2})');
    final match = regex.firstMatch(workingHours!);
    
    if (match != null) {
      final startHour = int.parse(match.group(1)!);
      final endHour = int.parse(match.group(3)!);
      
      return currentHour >= startHour && currentHour < endHour;
    }
    
    return true; // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º
  }
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏
class FirstAidGuide {
  final String id;
  final EmergencyType type;       // –¢–∏–ø —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
  final String title;             // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  final String shortDescription;  // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  final List<FirstAidStep> steps; // –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  final List<String> warningsSigns; // –ü—Ä–∏–∑–Ω–∞–∫–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  final List<String> doList;      // –ß—Ç–æ –î–ï–õ–ê–¢–¨
  final List<String> dontList;    // –ß—Ç–æ –ù–ï –î–ï–õ–ê–¢–¨
  final String? videoUrl;         // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ
  final List<String> imageUrls;   // –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  final AgeRange ageRange;        // –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
  final bool isVerifiedByDoctor;  // –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—Ä–∞—á–æ–º
  final DateTime createdAt;
  final DateTime updatedAt;

  FirstAidGuide({
    required this.id,
    required this.type,
    required this.title,
    required this.shortDescription,
    required this.steps,
    required this.warningsSigns,
    required this.doList,
    required this.dontList,
    this.videoUrl,
    required this.imageUrls,
    required this.ageRange,
    required this.isVerifiedByDoctor,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'type': type.name,
      'title': title,
      'shortDescription': shortDescription,
      'steps': steps.map((s) => s.toJson()).toList(),
      'warningsSigns': warningsSigns,
      'doList': doList,
      'dontList': dontList,
      'videoUrl': videoUrl,
      'imageUrls': imageUrls,
      'ageRange': ageRange.toJson(),
      'isVerifiedByDoctor': isVerifiedByDoctor,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static FirstAidGuide fromJson(Map<String, dynamic> json) {
    return FirstAidGuide(
      id: json['id'] ?? '',
      type: EmergencyType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => EmergencyType.other,
      ),
      title: json['title'] ?? '',
      shortDescription: json['shortDescription'] ?? '',
      steps: (json['steps'] as List? ?? [])
          .map((s) => FirstAidStep.fromJson(s))
          .toList(),
      warningsSigns: List<String>.from(json['warningsSigns'] ?? []),
      doList: List<String>.from(json['doList'] ?? []),
      dontList: List<String>.from(json['dontList'] ?? []),
      videoUrl: json['videoUrl'],
      imageUrls: List<String>.from(json['imageUrls'] ?? []),
      ageRange: AgeRange.fromJson(json['ageRange'] ?? {}),
      isVerifiedByDoctor: json['isVerifiedByDoctor'] ?? false,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  int get estimatedDuration {
    // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    return steps.fold<int>(0, (sum, step) => sum + step.estimatedSeconds);
  }

  String get formattedDuration {
    final minutes = estimatedDuration ~/ 60;
    final seconds = estimatedDuration % 60;
    
    if (minutes > 0) {
      return '${minutes}–º ${seconds}—Å';
    } else {
      return '${seconds}—Å';
    }
  }
}

// –®–∞–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏
class FirstAidStep {
  final int stepNumber;           // –ù–æ–º–µ—Ä —à–∞–≥–∞
  final String instruction;       // –¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  final String? imageUrl;         // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞
  final int estimatedSeconds;     // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  final bool isCritical;          // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–≥
  final String? tip;              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞

  FirstAidStep({
    required this.stepNumber,
    required this.instruction,
    this.imageUrl,
    required this.estimatedSeconds,
    required this.isCritical,
    this.tip,
  });

  Map<String, dynamic> toJson() {
    return {
      'stepNumber': stepNumber,
      'instruction': instruction,
      'imageUrl': imageUrl,
      'estimatedSeconds': estimatedSeconds,
      'isCritical': isCritical,
      'tip': tip,
    };
  }

  static FirstAidStep fromJson(Map<String, dynamic> json) {
    return FirstAidStep(
      stepNumber: json['stepNumber'] ?? 1,
      instruction: json['instruction'] ?? '',
      imageUrl: json['imageUrl'],
      estimatedSeconds: json['estimatedSeconds'] ?? 30,
      isCritical: json['isCritical'] ?? false,
      tip: json['tip'],
    );
  }
}

// –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
class AgeRange {
  final int minMonths;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö
  final int maxMonths;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö

  AgeRange({
    required this.minMonths,
    required this.maxMonths,
  });

  Map<String, dynamic> toJson() {
    return {
      'minMonths': minMonths,
      'maxMonths': maxMonths,
    };
  }

  static AgeRange fromJson(Map<String, dynamic> json) {
    return AgeRange(
      minMonths: json['minMonths'] ?? 0,
      maxMonths: json['maxMonths'] ?? 72, // 6 –ª–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    );
  }

  String get displayName {
    final minYears = minMonths ~/ 12;
    final minRemainingMonths = minMonths % 12;
    final maxYears = maxMonths ~/ 12;
    final maxRemainingMonths = maxMonths % 12;

    String formatAge(int years, int months) {
      if (years == 0) {
        return '${months}–º–µ—Å';
      } else if (months == 0) {
        return '${years}–≥';
      } else {
        return '${years}–≥ ${months}–º–µ—Å';
      }
    }

    return '${formatAge(minYears, minRemainingMonths)} - ${formatAge(maxYears, maxRemainingMonths)}';
  }

  bool isApplicableForAge(int ageMonths) {
    return ageMonths >= minMonths && ageMonths <= maxMonths;
  }
}

// –ó–∞–ø–∏—Å—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è
class EmergencyRecord {
  final String id;
  final String childId;
  final EmergencyType type;       // –¢–∏–ø —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
  final DateTime incidentDateTime; // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è
  final String description;       // –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
  final List<String> actionsTaken; // –ü—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  final List<String> contactsCalled; // –ö–∞–∫–∏–µ —Å–ª—É–∂–±—ã –≤—ã–∑—ã–≤–∞–ª–∏—Å—å
  final String? outcome;          // –ò—Å—Ö–æ–¥ —Å–∏—Ç—É–∞—Ü–∏–∏
  final bool wasHospitalized;     // –ë—ã–ª–∞ –ª–∏ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
  final String? hospitalName;     // –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å–Ω–∏—Ü—ã
  final List<String> symptoms;    // –°–∏–º–ø—Ç–æ–º—ã
  final String? doctorNotes;      // –ó–∞–º–µ—Ç–∫–∏ –≤—Ä–∞—á–∞
  final List<String> imageUrls;   // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
  final Map<String, dynamic> additionalInfo; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  final DateTime createdAt;
  final DateTime updatedAt;

  EmergencyRecord({
    required this.id,
    required this.childId,
    required this.type,
    required this.incidentDateTime,
    required this.description,
    required this.actionsTaken,
    required this.contactsCalled,
    this.outcome,
    required this.wasHospitalized,
    this.hospitalName,
    required this.symptoms,
    this.doctorNotes,
    required this.imageUrls,
    required this.additionalInfo,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'type': type.name,
      'incidentDateTime': Timestamp.fromDate(incidentDateTime),
      'description': description,
      'actionsTaken': actionsTaken,
      'contactsCalled': contactsCalled,
      'outcome': outcome,
      'wasHospitalized': wasHospitalized,
      'hospitalName': hospitalName,
      'symptoms': symptoms,
      'doctorNotes': doctorNotes,
      'imageUrls': imageUrls,
      'additionalInfo': additionalInfo,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static EmergencyRecord fromJson(Map<String, dynamic> json) {
    return EmergencyRecord(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      type: EmergencyType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => EmergencyType.other,
      ),
      incidentDateTime: (json['incidentDateTime'] as Timestamp).toDate(),
      description: json['description'] ?? '',
      actionsTaken: List<String>.from(json['actionsTaken'] ?? []),
      contactsCalled: List<String>.from(json['contactsCalled'] ?? []),
      outcome: json['outcome'],
      wasHospitalized: json['wasHospitalized'] ?? false,
      hospitalName: json['hospitalName'],
      symptoms: List<String>.from(json['symptoms'] ?? []),
      doctorNotes: json['doctorNotes'],
      imageUrls: List<String>.from(json['imageUrls'] ?? []),
      additionalInfo: Map<String, dynamic>.from(json['additionalInfo'] ?? {}),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  String get formattedIncidentDate {
    return '${incidentDateTime.day}.${incidentDateTime.month}.${incidentDateTime.year} ${incidentDateTime.hour.toString().padLeft(2, '0')}:${incidentDateTime.minute.toString().padLeft(2, '0')}';
  }

  String get severityLevel {
    if (wasHospitalized) return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
    if (contactsCalled.isNotEmpty) return '–°–µ—Ä—å–µ–∑–Ω—ã–π';
    return '–£–º–µ—Ä–µ–Ω–Ω—ã–π';
  }

  int get severityColorHex {
    if (wasHospitalized) return 0xFFD32F2F; // –ö—Ä–∞—Å–Ω—ã–π
    if (contactsCalled.isNotEmpty) return 0xFFFF9800; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    return 0xFFFFC107; // –ñ–µ–ª—Ç—ã–π
  }
}

// ===== –ú–û–î–ï–õ–ò –†–ê–ù–ù–ï–ì–û –†–ê–ó–í–ò–¢–ò–Ø =====

// –û–±–ª–∞—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è
enum DevelopmentArea {
  cognitive,      // –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
  motor,          // –ú–æ—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ  
  language,       // –†–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
  social,         // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
  emotional,      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
  creative,       // –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
  sensory;        // –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ

  String get displayName {
    switch (this) {
      case DevelopmentArea.cognitive:
        return '–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.motor:
        return '–ú–æ—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.language:
        return '–†–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.social:
        return '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.emotional:
        return '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.creative:
        return '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
      case DevelopmentArea.sensory:
        return '–°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ';
    }
  }

  String get iconEmoji {
    switch (this) {
      case DevelopmentArea.cognitive:
        return 'üß†';
      case DevelopmentArea.motor:
        return 'üèÉ';
      case DevelopmentArea.language:
        return 'üó£Ô∏è';
      case DevelopmentArea.social:
        return 'üë•';
      case DevelopmentArea.emotional:
        return 'üòä';
      case DevelopmentArea.creative:
        return 'üé®';
      case DevelopmentArea.sensory:
        return 'üëÅÔ∏è';
    }
  }

  int get colorHex {
    switch (this) {
      case DevelopmentArea.cognitive:
        return 0xFF9C27B0; // purple
      case DevelopmentArea.motor:
        return 0xFF4CAF50; // green
      case DevelopmentArea.language:
        return 0xFF2196F3; // blue
      case DevelopmentArea.social:
        return 0xFFFF9800; // orange
      case DevelopmentArea.emotional:
        return 0xFFE91E63; // pink
      case DevelopmentArea.creative:
        return 0xFFFF5722; // deep orange
      case DevelopmentArea.sensory:
        return 0xFF607D8B; // blue grey
    }
  }

  String get description {
    switch (this) {
      case DevelopmentArea.cognitive:
        return '–†–∞–∑–≤–∏—Ç–∏–µ –º—ã—à–ª–µ–Ω–∏—è, –ø–∞–º—è—Ç–∏, –≤–Ω–∏–º–∞–Ω–∏—è, –ª–æ–≥–∏–∫–∏';
      case DevelopmentArea.motor:
        return '–†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä—É–ø–Ω–æ–π –∏ –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏';
      case DevelopmentArea.language:
        return '–†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏, —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏';
      case DevelopmentArea.social:
        return '–ù–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏';
      case DevelopmentArea.emotional:
        return '–ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π, —ç–º–ø–∞—Ç–∏—è, —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å';
      case DevelopmentArea.creative:
        return '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–∫—É—Å—Å—Ç–≤–æ';
      case DevelopmentArea.sensory:
        return '–†–∞–∑–≤–∏—Ç–∏–µ –æ—Ä–≥–∞–Ω–æ–≤ —á—É–≤—Å—Ç–≤ –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è';
    }
  }
}

// –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
enum ActivityDifficulty {
  easy,           // –õ–µ–≥–∫–∞—è
  medium,         // –°—Ä–µ–¥–Ω—è—è
  hard;           // –°–ª–æ–∂–Ω–∞—è

  String get displayName {
    switch (this) {
      case ActivityDifficulty.easy:
        return '–õ–µ–≥–∫–∞—è';
      case ActivityDifficulty.medium:
        return '–°—Ä–µ–¥–Ω—è—è';
      case ActivityDifficulty.hard:
        return '–°–ª–æ–∂–Ω–∞—è';
    }
  }

  int get colorHex {
    switch (this) {
      case ActivityDifficulty.easy:
        return 0xFF4CAF50; // green
      case ActivityDifficulty.medium:
        return 0xFFFF9800; // orange
      case ActivityDifficulty.hard:
        return 0xFFF44336; // red
    }
  }

  int get value {
    switch (this) {
      case ActivityDifficulty.easy:
        return 1;
      case ActivityDifficulty.medium:
        return 2;
      case ActivityDifficulty.hard:
        return 3;
    }
  }
}

// –†–∞–∑–≤–∏–≤–∞—é—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
class DevelopmentActivity {
  final String id;
  final String title;                    // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  final String description;              // –û–ø–∏—Å–∞–Ω–∏–µ
  final DevelopmentArea area;            // –û–±–ª–∞—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è
  final ActivityDifficulty difficulty;   // –°–ª–æ–∂–Ω–æ—Å—Ç—å
  final AgeRange ageRange;              // –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
  final int durationMinutes;            // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
  final List<String> materials;        // –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  final List<ActivityStep> steps;      // –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  final List<String> tips;             // –°–æ–≤–µ—Ç—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  final List<String> benefits;         // –ü–æ–ª—å–∑–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  final List<String> variations;       // –í–∞—Ä–∏–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  final String? videoUrl;              // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ
  final List<String> imageUrls;        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  final List<String> tags;             // –¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  final bool isIndoor;                 // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏
  final bool requiresAdult;            // –ù—É–∂–Ω–æ —É—á–∞—Å—Ç–∏–µ –≤–∑—Ä–æ—Å–ª–æ–≥–æ
  final double rating;                 // –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  final int timesCompleted;            // –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
  final bool isFavorite;               // –ò–∑–±—Ä–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  final DateTime createdAt;
  final DateTime updatedAt;

  DevelopmentActivity({
    required this.id,
    required this.title,
    required this.description,
    required this.area,
    required this.difficulty,
    required this.ageRange,
    required this.durationMinutes,
    required this.materials,
    required this.steps,
    required this.tips,
    required this.benefits,
    required this.variations,
    this.videoUrl,
    required this.imageUrls,
    required this.tags,
    required this.isIndoor,
    required this.requiresAdult,
    required this.rating,
    required this.timesCompleted,
    required this.isFavorite,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'area': area.name,
      'difficulty': difficulty.name,
      'ageRange': ageRange.toJson(),
      'durationMinutes': durationMinutes,
      'materials': materials,
      'steps': steps.map((s) => s.toJson()).toList(),
      'tips': tips,
      'benefits': benefits,
      'variations': variations,
      'videoUrl': videoUrl,
      'imageUrls': imageUrls,
      'tags': tags,
      'isIndoor': isIndoor,
      'requiresAdult': requiresAdult,
      'rating': rating,
      'timesCompleted': timesCompleted,
      'isFavorite': isFavorite,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static DevelopmentActivity fromJson(Map<String, dynamic> json) {
    return DevelopmentActivity(
      id: json['id'] ?? '',
      title: json['title'] ?? '',
      description: json['description'] ?? '',
      area: DevelopmentArea.values.firstWhere(
        (e) => e.name == json['area'],
        orElse: () => DevelopmentArea.cognitive,
      ),
      difficulty: ActivityDifficulty.values.firstWhere(
        (e) => e.name == json['difficulty'],
        orElse: () => ActivityDifficulty.easy,
      ),
      ageRange: AgeRange.fromJson(json['ageRange'] ?? {}),
      durationMinutes: json['durationMinutes'] ?? 15,
      materials: List<String>.from(json['materials'] ?? []),
      steps: (json['steps'] as List? ?? [])
          .map((s) => ActivityStep.fromJson(s))
          .toList(),
      tips: List<String>.from(json['tips'] ?? []),
      benefits: List<String>.from(json['benefits'] ?? []),
      variations: List<String>.from(json['variations'] ?? []),
      videoUrl: json['videoUrl'],
      imageUrls: List<String>.from(json['imageUrls'] ?? []),
      tags: List<String>.from(json['tags'] ?? []),
      isIndoor: json['isIndoor'] ?? true,
      requiresAdult: json['requiresAdult'] ?? true,
      rating: (json['rating'] ?? 0.0).toDouble(),
      timesCompleted: json['timesCompleted'] ?? 0,
      isFavorite: json['isFavorite'] ?? false,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  String get formattedDuration {
    if (durationMinutes < 60) {
      return '${durationMinutes}–º–∏–Ω';
    } else {
      final hours = durationMinutes ~/ 60;
      final minutes = durationMinutes % 60;
      return '${hours}—á ${minutes}–º–∏–Ω';
    }
  }

  int get estimatedTotalTime {
    // –í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ + –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ + –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏
    return (durationMinutes * 1.3).round(); // +30% –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
  }

  String get formattedTotalTime {
    if (estimatedTotalTime < 60) {
      return '${estimatedTotalTime}–º–∏–Ω';
    } else {
      final hours = estimatedTotalTime ~/ 60;
      final minutes = estimatedTotalTime % 60;
      return '${hours}—á ${minutes}–º–∏–Ω';
    }
  }

  bool isAgeAppropriate(int ageMonths) {
    return ageRange.isApplicableForAge(ageMonths);
  }

  String get ratingText {
    if (rating >= 4.5) return '–û—Ç–ª–∏—á–Ω–æ';
    if (rating >= 4.0) return '–•–æ—Ä–æ—à–æ';
    if (rating >= 3.0) return '–°—Ä–µ–¥–Ω–µ';
    if (rating >= 2.0) return '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ';
    return '–ü–ª–æ—Ö–æ';
  }
}

// –®–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
class ActivityStep {
  final int stepNumber;          // –ù–æ–º–µ—Ä —à–∞–≥–∞
  final String instruction;      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  final String? imageUrl;        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞
  final int estimatedMinutes;    // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  final String? tip;             // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞

  ActivityStep({
    required this.stepNumber,
    required this.instruction,
    this.imageUrl,
    required this.estimatedMinutes,
    this.tip,
  });

  Map<String, dynamic> toJson() {
    return {
      'stepNumber': stepNumber,
      'instruction': instruction,
      'imageUrl': imageUrl,
      'estimatedMinutes': estimatedMinutes,
      'tip': tip,
    };
  }

  static ActivityStep fromJson(Map<String, dynamic> json) {
    return ActivityStep(
      stepNumber: json['stepNumber'] ?? 1,
      instruction: json['instruction'] ?? '',
      imageUrl: json['imageUrl'],
      estimatedMinutes: json['estimatedMinutes'] ?? 5,
      tip: json['tip'],
    );
  }
}

// –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
class ActivityCompletion {
  final String id;
  final String childId;
  final String activityId;           // ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  final DateTime completionDate;     // –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  final int actualDurationMinutes;   // –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  final double childRating;          // –û—Ü–µ–Ω–∫–∞ —Ä–µ–±–µ–Ω–∫–∞ (1-5)
  final double parentRating;         // –û—Ü–µ–Ω–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è (1-5)
  final String? childFeedback;       // –û—Ç–∑—ã–≤ —Ä–µ–±–µ–Ω–∫–∞
  final String? parentFeedback;      // –û—Ç–∑—ã–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
  final List<String> difficulties;   // –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
  final List<String> enjoyedAspects; // –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å
  final List<String> photoUrls;      // –§–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  final Map<String, dynamic> skillsProgress; // –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–≤—ã–∫–æ–≤
  final bool wasCompleted;           // –ë—ã–ª–∞ –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  final String? nextSuggestions;     // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
  final DateTime createdAt;
  final DateTime updatedAt;

  ActivityCompletion({
    required this.id,
    required this.childId,
    required this.activityId,
    required this.completionDate,
    required this.actualDurationMinutes,
    required this.childRating,
    required this.parentRating,
    this.childFeedback,
    this.parentFeedback,
    required this.difficulties,
    required this.enjoyedAspects,
    required this.photoUrls,
    required this.skillsProgress,
    required this.wasCompleted,
    this.nextSuggestions,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'activityId': activityId,
      'completionDate': Timestamp.fromDate(completionDate),
      'actualDurationMinutes': actualDurationMinutes,
      'childRating': childRating,
      'parentRating': parentRating,
      'childFeedback': childFeedback,
      'parentFeedback': parentFeedback,
      'difficulties': difficulties,
      'enjoyedAspects': enjoyedAspects,
      'photoUrls': photoUrls,
      'skillsProgress': skillsProgress,
      'wasCompleted': wasCompleted,
      'nextSuggestions': nextSuggestions,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static ActivityCompletion fromJson(Map<String, dynamic> json) {
    return ActivityCompletion(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      activityId: json['activityId'] ?? '',
      completionDate: (json['completionDate'] as Timestamp).toDate(),
      actualDurationMinutes: json['actualDurationMinutes'] ?? 0,
      childRating: (json['childRating'] ?? 0.0).toDouble(),
      parentRating: (json['parentRating'] ?? 0.0).toDouble(),
      childFeedback: json['childFeedback'],
      parentFeedback: json['parentFeedback'],
      difficulties: List<String>.from(json['difficulties'] ?? []),
      enjoyedAspects: List<String>.from(json['enjoyedAspects'] ?? []),
      photoUrls: List<String>.from(json['photoUrls'] ?? []),
      skillsProgress: Map<String, dynamic>.from(json['skillsProgress'] ?? {}),
      wasCompleted: json['wasCompleted'] ?? false,
      nextSuggestions: json['nextSuggestions'],
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  String get formattedDate {
    return '${completionDate.day}.${completionDate.month}.${completionDate.year}';
  }

  String get formattedDuration {
    if (actualDurationMinutes < 60) {
      return '${actualDurationMinutes}–º–∏–Ω';
    } else {
      final hours = actualDurationMinutes ~/ 60;
      final minutes = actualDurationMinutes % 60;
      return '${hours}—á ${minutes}–º–∏–Ω';
    }
  }

  double get averageRating {
    return (childRating + parentRating) / 2;
  }

  String get successLevel {
    if (!wasCompleted) return '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
    if (averageRating >= 4.5) return '–û—Ç–ª–∏—á–Ω–æ';
    if (averageRating >= 4.0) return '–•–æ—Ä–æ—à–æ';
    if (averageRating >= 3.0) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
    return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
  }

  int get successColorHex {
    if (!wasCompleted) return 0xFF9E9E9E; // grey
    if (averageRating >= 4.5) return 0xFF4CAF50; // green
    if (averageRating >= 4.0) return 0xFF8BC34A; // light green
    if (averageRating >= 3.0) return 0xFFFF9800; // orange
    return 0xFFF44336; // red
  }
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–≤–∏—Ç–∏—è
class DevelopmentProgress {
  final String id;
  final String childId;
  final DevelopmentArea area;           // –û–±–ª–∞—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è
  final DateTime assessmentDate;        // –î–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏
  final double progressScore;           // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (0-100)
  final Map<String, double> skillLevels; // –£—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤
  final List<String> achievedSkills;    // –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –Ω–∞–≤—ã–∫–∏
  final List<String> workingOnSkills;   // –ù–∞–≤—ã–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
  final List<String> nextMilestones;    // –°–ª–µ–¥—É—é—â–∏–µ –≤–µ—Ö–∏
  final String? notes;                  // –ó–∞–º–µ—Ç–∫–∏
  final List<String> recommendedActivities; // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  final DateTime createdAt;
  final DateTime updatedAt;

  DevelopmentProgress({
    required this.id,
    required this.childId,
    required this.area,
    required this.assessmentDate,
    required this.progressScore,
    required this.skillLevels,
    required this.achievedSkills,
    required this.workingOnSkills,
    required this.nextMilestones,
    this.notes,
    required this.recommendedActivities,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'area': area.name,
      'assessmentDate': Timestamp.fromDate(assessmentDate),
      'progressScore': progressScore,
      'skillLevels': skillLevels,
      'achievedSkills': achievedSkills,
      'workingOnSkills': workingOnSkills,
      'nextMilestones': nextMilestones,
      'notes': notes,
      'recommendedActivities': recommendedActivities,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  static DevelopmentProgress fromJson(Map<String, dynamic> json) {
    return DevelopmentProgress(
      id: json['id'] ?? '',
      childId: json['childId'] ?? '',
      area: DevelopmentArea.values.firstWhere(
        (e) => e.name == json['area'],
        orElse: () => DevelopmentArea.cognitive,
      ),
      assessmentDate: (json['assessmentDate'] as Timestamp).toDate(),
      progressScore: (json['progressScore'] ?? 0.0).toDouble(),
      skillLevels: Map<String, double>.from(json['skillLevels'] ?? {}),
      achievedSkills: List<String>.from(json['achievedSkills'] ?? []),
      workingOnSkills: List<String>.from(json['workingOnSkills'] ?? []),
      nextMilestones: List<String>.from(json['nextMilestones'] ?? []),
      notes: json['notes'],
      recommendedActivities: List<String>.from(json['recommendedActivities'] ?? []),
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
    );
  }

  String get formattedDate {
    return '${assessmentDate.day}.${assessmentDate.month}.${assessmentDate.year}';
  }

  String get progressLevel {
    if (progressScore >= 90) return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ';
    if (progressScore >= 80) return '–û—Ç–ª–∏—á–Ω–æ';
    if (progressScore >= 70) return '–•–æ—Ä–æ—à–æ';
    if (progressScore >= 60) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
    if (progressScore >= 50) return '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ';
    return '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è';
  }

  int get progressColorHex {
    if (progressScore >= 90) return 0xFF4CAF50; // green
    if (progressScore >= 80) return 0xFF8BC34A; // light green
    if (progressScore >= 70) return 0xFFCDDC39; // lime
    if (progressScore >= 60) return 0xFFFF9800; // orange
    if (progressScore >= 50) return 0xFFFF5722; // deep orange
    return 0xFFF44336; // red
  }

  double get averageSkillLevel {
    if (skillLevels.isEmpty) return 0.0;
    return skillLevels.values.reduce((a, b) => a + b) / skillLevels.length;
  }
}
