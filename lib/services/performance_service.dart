// lib/services/performance_service.dart
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:shared_preferences/shared_preferences.dart';

class PerformanceService {
  static const String _keyAppStartTime = 'app_start_time';
  static const String _keyLastPerformanceCheck = 'last_performance_check';
  static const String _keyAverageFrameTime = 'average_frame_time';
  
  static DateTime? _appStartTime;
  static final List<Duration> _frameTimes = [];
  static bool _isMonitoring = false;
  static Duration? _lastTimestamp;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static Future<void> initialize() async {
    _appStartTime = DateTime.now();
    await _saveAppStartTime();
    
    if (kDebugMode) {
      startPerformanceMonitoring();
    }
    
    debugPrint('‚úÖ PerformanceService initialized');
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static void startPerformanceMonitoring() {
    if (_isMonitoring) return;
    
    _isMonitoring = true;
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤
    WidgetsBinding.instance.addPostFrameCallback(_measureFrameTime);
    
    debugPrint('üîç Performance monitoring started');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  static void stopPerformanceMonitoring() {
    _isMonitoring = false;
    debugPrint('‚èπÔ∏è Performance monitoring stopped');
  }

  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–¥—Ä–∞
  static void _measureFrameTime(Duration timestamp) {
    if (!_isMonitoring) return;
    
    if (_lastTimestamp != null) {
      final frameTime = timestamp - _lastTimestamp!;
      _frameTimes.add(frameTime);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
      if (_frameTimes.length > 100) {
        _frameTimes.removeAt(0);
      }
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–∞—Ö
      if (frameTime.inMilliseconds > 16.67) { // –ë–æ–ª—å—à–µ 60 FPS
        debugPrint('‚ö†Ô∏è Frame drop detected: ${frameTime.inMilliseconds}ms');
      }
    }
    
    _lastTimestamp = timestamp;
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
    WidgetsBinding.instance.addPostFrameCallback(_measureFrameTime);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static PerformanceStats getPerformanceStats() {
    final averageFrameTime = _frameTimes.isNotEmpty
        ? _frameTimes.map((d) => d.inMicroseconds).reduce((a, b) => a + b) / _frameTimes.length
        : 0.0;
    
    final fps = averageFrameTime > 0 ? 1000000 / averageFrameTime : 0.0;
    
    final frameDrops = _frameTimes.where((d) => d.inMilliseconds > 16.67).length;
    
    return PerformanceStats(
      averageFrameTimeMs: averageFrameTime / 1000,
      currentFps: fps,
      frameDrops: frameDrops,
      totalFrames: _frameTimes.length,
      appUptimeMs: _appStartTime != null 
          ? DateTime.now().difference(_appStartTime!).inMilliseconds 
          : 0,
    );
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static Future<void> _saveAppStartTime() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(_keyAppStartTime, DateTime.now().millisecondsSinceEpoch);
    } catch (e) {
      debugPrint('Failed to save app start time: $e');
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  static void logSlowOperation(String operation, Duration duration) {
    if (duration.inMilliseconds > 100) {
      debugPrint('üêå Slow operation: $operation took ${duration.inMilliseconds}ms');
      
      // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      if (kReleaseMode) {
        _sendSlowOperationAnalytics(operation, duration);
      }
    }
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  static void logMemoryUsage(String context) {
    if (kDebugMode) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dart:developer
      debugPrint('üíæ Memory usage check: $context');
    }
  }

  // –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static Future<PerformanceReport> generatePerformanceReport() async {
    final stats = getPerformanceStats();
    final prefs = await SharedPreferences.getInstance();
    
    final lastCheck = prefs.getInt(_keyLastPerformanceCheck) ?? 0;
    final appStartTime = prefs.getInt(_keyAppStartTime) ?? 0;
    
    await prefs.setInt(_keyLastPerformanceCheck, DateTime.now().millisecondsSinceEpoch);
    
    return PerformanceReport(
      timestamp: DateTime.now(),
      stats: stats,
      recommendations: _generateRecommendations(stats),
      sessionInfo: SessionInfo(
        startTime: DateTime.fromMillisecondsSinceEpoch(appStartTime),
        duration: DateTime.now().difference(DateTime.fromMillisecondsSinceEpoch(appStartTime)),
        lastPerformanceCheck: lastCheck > 0 
            ? DateTime.fromMillisecondsSinceEpoch(lastCheck)
            : null,
      ),
    );
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  static List<String> _generateRecommendations(PerformanceStats stats) {
    final recommendations = <String>[];
    
    if (stats.currentFps < 55) {
      recommendations.add('–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞–Ω–∏–º–∞—Ü–∏–π.');
    }
    
    if (stats.frameDrops > stats.totalFrames * 0.1) {
      recommendations.add('–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã.');
    }
    
    if (stats.averageFrameTimeMs > 20) {
      recommendations.add('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞ –≤—ã—Å–æ–∫–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RepaintBoundary.');
    }
    
    if (recommendations.isEmpty) {
      recommendations.add('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏.');
    }
    
    return recommendations;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
  static void _sendSlowOperationAnalytics(String operation, Duration duration) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Firebase Analytics –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
    debugPrint('üìä Analytics: Slow operation logged - $operation (${duration.inMilliseconds}ms)');
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static void clearPerformanceData() {
    _frameTimes.clear();
    debugPrint('üóëÔ∏è Performance data cleared');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  static SystemResourceInfo getSystemResourceInfo() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    return SystemResourceInfo(
      platform: defaultTargetPlatform.toString(),
      isLowEndDevice: _isLowEndDevice(),
      batteryOptimized: false, // –ó–∞–≥–ª—É—à–∫–∞
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–∞–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static bool _isLowEndDevice() {
    // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å device_info_plus
    return false;
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static Map<String, dynamic> exportPerformanceData() {
    final stats = getPerformanceStats();
    
    return {
      'timestamp': DateTime.now().toIso8601String(),
      'performance_stats': {
        'average_frame_time_ms': stats.averageFrameTimeMs,
        'current_fps': stats.currentFps,
        'frame_drops': stats.frameDrops,
        'total_frames': stats.totalFrames,
        'app_uptime_ms': stats.appUptimeMs,
      },
      'frame_times': _frameTimes.map((d) => d.inMicroseconds).toList(),
    };
  }
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class PerformanceStats {
  final double averageFrameTimeMs;
  final double currentFps;
  final int frameDrops;
  final int totalFrames;
  final int appUptimeMs;

  const PerformanceStats({
    required this.averageFrameTimeMs,
    required this.currentFps,
    required this.frameDrops,
    required this.totalFrames,
    required this.appUptimeMs,
  });

  double get frameDropPercentage => totalFrames > 0 ? (frameDrops / totalFrames) * 100 : 0;
}

class PerformanceReport {
  final DateTime timestamp;
  final PerformanceStats stats;
  final List<String> recommendations;
  final SessionInfo sessionInfo;

  const PerformanceReport({
    required this.timestamp,
    required this.stats,
    required this.recommendations,
    required this.sessionInfo,
  });
}

class SessionInfo {
  final DateTime startTime;
  final Duration duration;
  final DateTime? lastPerformanceCheck;

  const SessionInfo({
    required this.startTime,
    required this.duration,
    this.lastPerformanceCheck,
  });
}

class SystemResourceInfo {
  final String platform;
  final bool isLowEndDevice;
  final bool batteryOptimized;

  const SystemResourceInfo({
    required this.platform,
    required this.isLowEndDevice,
    required this.batteryOptimized,
  });
}